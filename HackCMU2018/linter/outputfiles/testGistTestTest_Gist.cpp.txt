122
8, 17, 18, 19, 21, 22, 23, 26, 28, 30, 32, 34, 35, 36, 43, 45, 47, 48, 49, 52, 54, 56, 58, 60, 61, 62, 69, 70, 71, 73, 74, 75, 78, 80, 82, 84, 85, 86, 87, 94, 95, 96, 98, 99, 100, 103, 105, 107, 109, 110, 111, 112, 119, 120, 121, 123, 125, 126, 127, 128, 128, 130, 132, 134, 137, 138, 138, 143, 144, 145, 147, 149, 150, 151, 152, 152, 154, 156, 158, 160, 161, 162, 162, 167, 168, 169, 171, 173, 174, 175, 176, 176, 178, 179, 180, 182, 184, 185, 186, 187, 188, 188, 193, 194, 194, 195, 197, 198, 199, 200, 201, 202, 202, 204, 205, 206, 208, 209, 210, 211, 211, 183
#ifndef GIST_TESTS
#define GIST_TESTS

#include "../../src/Gist.h"
#include "test-signals/Test_Signals.h"

#define BOOST_TEST_DYN_LINK
#include <boost/test/unit_test.hpp>

//=============================================================
//========================= GIST ==============================
//=============================================================
BOOST_AUTO_TEST_SUITE(GistTest)

//=============================================================
BOOST_AUTO_TEST_CASE(TestFFT1)
{
    Gist<float> g (512, 44100, WindowType::RectangularWindow);
    
    std::vector<float> testFrame(512);
    
    for (int i = 0;i < 512;i++)
    {
        testFrame[i] = 0;
    }
    
    testFrame[0] = 1.0;
    
    g.processAudioFrame(testFrame);
    
    std::vector<float> mag;
    
    mag = g.getMagnitudeSpectrum();
    
    for (int i = 0;i < mag.size();i++)
    {
        BOOST_CHECK_EQUAL(mag[i], 1.0);
    }
}

//=============================================================
BOOST_AUTO_TEST_CASE(TestFFT2)
{
    Gist<float> g(512, 44100, WindowType::RectangularWindow);
        
    std::vector<float> testFrame(512);
    
    for (int i = 0;i < 512;i++)
    {
        testFrame[i] = 1.0;
    }
    
    g.processAudioFrame(testFrame);
    
    std::vector<float> mag;
    
    mag = g.getMagnitudeSpectrum();
    
    BOOST_CHECK_EQUAL(mag[0], testFrame.size());
    
    for (int i = 1;i < mag.size();i++)
    {
        BOOST_CHECK_EQUAL(mag[i], 0.0);
    }
}

//=============================================================
BOOST_AUTO_TEST_CASE(TestFFT3)
{
    Gist<float> g (256, 44100, WindowType::RectangularWindow);
    
    std::vector<float> testFrame(256);
    
    for (int i = 0;i < 256;i++)
    {
        testFrame[i] = fftTestIn[i];
    }
    
    g.processAudioFrame(testFrame);
    
    std::vector<float> mag;
    
    mag = g.getMagnitudeSpectrum();
    
    for (int i = 1;i < mag.size();i++)
    {
        BOOST_CHECK_CLOSE (mag[i], fftTestMag[i], 0.001);
    }
}


//=============================================================
BOOST_AUTO_TEST_CASE(TestFFT4)
{
    Gist<double> g (256, 44100, WindowType::RectangularWindow);
    
    std::vector<double> testFrame(256);
    
    for (int i = 0;i < 256;i++)
    {
        testFrame[i] = fftTestIn[i];
    }
    
    g.processAudioFrame(testFrame);
    
    std::vector<double> mag;
    
    mag = g.getMagnitudeSpectrum();
    
    for (int i = 1;i < mag.size();i++)
    {
        BOOST_CHECK_CLOSE (mag[i], fftTestMag[i], 0.001);
    }
}


//=============================================================
BOOST_AUTO_TEST_CASE(RMS_Test)
{
    Gist<float> g(512,44100);
    
    CoreTimeDomainFeatures<float> tdf;
    
    std::vector<float> testFrame(512);
    
    for (int i = 0;i < 512;i++)
    {
        testFrame[i] = ((float)((rand() % 1000) - 500)) / 1000.;
    }
    
    g.processAudioFrame(testFrame);
    
    float r1 = g.rootMeanSquare();
    
    float r2 = tdf.rootMeanSquare(testFrame);

    BOOST_CHECK_EQUAL(r1,r2);
    
}

//=============================================================
BOOST_AUTO_TEST_CASE(PeakEnergy_Test)
{
    Gist<float> g(512,44100);
    
    CoreTimeDomainFeatures<float> tdf;
    
    std::vector<float> testFrame(512);
    
    for (int i = 0;i < 512;i++)
    {
        testFrame[i] = ((float)((rand() % 1000) - 500)) / 1000.;
    }
    
    g.processAudioFrame(testFrame);
    
    float r1 = g.peakEnergy();
    
    float r2 = tdf.peakEnergy(testFrame);
    
    BOOST_CHECK_EQUAL(r1,r2);
    
}

//=============================================================
BOOST_AUTO_TEST_CASE(ZeroCrossingRate_Test)
{
    Gist<float> g (512, 44100);
    
    CoreTimeDomainFeatures<float> tdf;
    
    float testFrame[512];
    
    for (int i = 0;i < 512;i++)
    {
        testFrame[i] = ((float)((rand() % 1000) - 500)) / 1000.;
    }
    
    g.processAudioFrame (testFrame, 512);
    
    float r1 = g.zeroCrossingRate();
    
    std::vector<float> v;
    v.assign (testFrame, testFrame + 512);
    float r2 = tdf.zeroCrossingRate (v);
    
    BOOST_CHECK_EQUAL (r1, r2);
    
}

//=============================================================
BOOST_AUTO_TEST_CASE(SpectralCentroid_Test)
{
    Gist<float> g (512,44100);
    
    CoreFrequencyDomainFeatures<float> fdf;
    
    float testFrame [512];
    
    for (int i = 0;i < 512;i++)
    {
        testFrame[i] = ((float)((rand() % 1000) - 500)) / 1000.;
    }
    
    g.processAudioFrame (testFrame, 512);
    
    float r1 = g.spectralCentroid();
    float r2 = fdf.spectralCentroid (g.getMagnitudeSpectrum());
    
    BOOST_CHECK_EQUAL (r1, r2);
    
}


BOOST_AUTO_TEST_SUITE_END()

#endif
