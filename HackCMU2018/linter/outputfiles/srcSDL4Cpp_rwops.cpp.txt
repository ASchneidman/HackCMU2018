250
21, 22, 23, 23, 23, 24, 26, 27, 27, 27, 28, 29, 29, 30, 32, 33, 33, 33, 34, 35, 37, 38, 38, 38, 39, 40, 42, 43, 43, 43, 44, 45, 47, 48, 48, 48, 49, 50, 52, 54, 55, 57, 59, 60, 61, 61, 61, 62, 63, 65, 67, 68, 70, 71, 73, 74, 74, 74, 75, 76, 78, 80, 81, 83, 85, 86, 86, 86, 87, 88, 90, 92, 93, 95, 97, 98, 98, 98, 99, 100, 102, 104, 105, 107, 108, 110, 111, 111, 111, 112, 113, 113, 113, 114, 115, 116, 117, 119, 120, 120, 120, 121, 122, 122, 124, 125, 127, 128, 128, 128, 129, 130, 132, 133, 135, 136, 136, 136, 137, 138, 138, 140, 141, 143, 144, 144, 144, 145, 146, 146, 148, 149, 151, 152, 152, 152, 153, 154, 156, 157, 159, 160, 160, 160, 161, 162, 164, 165, 167, 168, 168, 168, 169, 170, 172, 173, 175, 176, 176, 176, 177, 178, 180, 181, 183, 184, 184, 184, 185, 186, 188, 189, 191, 192, 192, 192, 193, 194, 196, 197, 199, 200, 200, 200, 201, 202, 204, 205, 207, 208, 208, 208, 209, 210, 210, 212, 213, 215, 216, 216, 216, 217, 218, 218, 220, 221, 223, 224, 224, 224, 225, 226, 226, 228, 229, 231, 232, 232, 232, 233, 234, 234, 236, 237, 239, 240, 240, 240, 241, 242, 242, 244, 245, 247, 248, 248, 248, 249, 250, 250, 252, 253, 255, 256, 256, 256, 257, 258, 259, 47
/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with main.c; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
 */

#include "SDL4Cpp_main.h"
#include "SDL4Cpp_rwops.h"

namespace SDL
{
	RWops::RWops() : m_RWops(NULL)
	{
	}

	RWops::RWops(const std::string file, const std::string mode) : m_RWops(NULL)
	{
		if(!FromFile(file, mode))
			throw RuntimeError("RWOps(const std::string file, const std::string mode) failed to load file");
	}

	RWops::RWops(const RWops &copy) : m_RWops(NULL)
	{
		// XXX TODO RWops Copy constructor
	}

	RWops::~RWops()
	{
		Free();
	}

	RWops &RWops::operator =(const RWops &copy)
	{
		// XXX TODO RWops equals operator
	}

	bool RWops::FromFile(const std::string file, const std::string mode)
	{
		if(m_RWops)
			Free();

		m_RWops = SDL_RWFromFile(file.c_str(), mode.c_str());

		if(!m_RWops)
			return false;

		return true;}

	#ifdef HAVE_STDIO_H
	bool RWops::FromFP(FILE *fp, int autoclose)
	{
		if(m_RWops)
			Free();

		m_RWops = SDL_RWFromFP(fp, autoclose);

		if(!m_RWops)
			return false;

		return true;}
	#endif

	bool RWops::FromMem(void *mem, int size)
	{
		if(m_RWops)
			Free();

		m_RWops = SDL_RWFromMem(mem, size);

		if(!m_RWops)
			return false;

		return true;}

	bool RWops::FromConstMem(const void *mem, int size)
	{
		if(m_RWops)
			Free();

		m_RWops = SDL_RWFromConstMem(mem, size);

		if(!m_RWops)
			return false;

		return true;}

	bool RWops::Alloc(void)
	{
		if(m_RWops)
			Free();

		m_RWops = SDL_AllocRW();

		if(!m_RWops)
			return false;

		return true;
	}

	void RWops::Free()
	{
		if(m_RWops)
		{
			SDL_FreeRW(m_RWops);
			m_RWops = NULL;
		}
	}

	int RWops::seek(int offset, int whence)
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling seek(int offset, int whence)");

		return SDL_RWseek(m_RWops, offset, whence);
	}

	int RWops::tell()
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling tell()");

		return SDL_RWtell(m_RWops);
	}

	int RWops::read(void *ptr, int size, int blocks)
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling read(void *ptr, int size, int blocks)");

		return SDL_RWread(m_RWops, ptr, size, blocks);
	}

	int RWops::write(void *ptr, int size, int blocks)
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling write(void *ptr, int size, int blocks)");

		return SDL_RWwrite(m_RWops, ptr, size, blocks);
	}

	bool RWops::close()
	{
		if(SDL_RWclose(m_RWops) == 0)
			return true;

		return false;
	}

	Uint16 RWops::ReadLE16()
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling ReadLE16()");

		return SDL_ReadLE16(m_RWops);
	}

	Uint16 RWops::ReadBE16()
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling ReadBE16()");

		return SDL_ReadBE16(m_RWops);
	}

	Uint32 RWops::ReadLE32()
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling ReadLE32()");

		return SDL_ReadLE32(m_RWops);
	}

	Uint32 RWops::ReadBE32()
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling ReadBE32()");

		return SDL_ReadBE32(m_RWops);
	}

	Uint64 RWops::ReadLE64()
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling ReadLE64()");

		return SDL_ReadLE64(m_RWops);
	}

	Uint64 RWops::ReadBE64()
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling ReadBE64()");

		return SDL_ReadBE64(m_RWops);
	}

	int RWops::WriteLE16(Uint16 value)
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling WriteLE16(Uint16 value)");

		return SDL_WriteLE16(m_RWops, value);
	}

	int RWops::WriteBE16(Uint16 value)
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling WriteBE16(Uint16 value)");

		return SDL_WriteBE16(m_RWops, value);
	}

	int RWops::WriteLE32(Uint32 value)
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling WriteLE32(Uint32 value))");

		return SDL_WriteLE32(m_RWops, value);
	}

	int RWops::WriteBE32(Uint32 value)
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling WriteBE32(Uint32 value))");

		return SDL_WriteBE32(m_RWops, value);
	}

	int RWops::WriteLE64(Uint64 value)
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling WriteLE64(Uint64 value)");

		return SDL_WriteLE64(m_RWops, value);
	}

	int RWops::WriteBE64(Uint64 value)
	{
		if(m_RWops == NULL)
			throw LogicError("m_RWops must be inialized before calling WriteBE64(Uint64 value)");

		return SDL_WriteBE64(m_RWops, value);
	}

	SDL_RWops *RWops::Get()
	{
		return m_RWops;
	}
}

