443
6, 8, 9, 10, 10, 12, 13, 13, 13, 14, 14, 15, 16, 16, 17, 18, 19, 21, 22, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 32, 33, 33, 33, 34, 35, 36, 38, 39, 39, 39, 40, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 56, 58, 58, 59, 59, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 69, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 81, 81, 82, 83, 84, 85, 87, 88, 90, 91, 91, 91, 92, 93, 94, 95, 97, 98, 100, 101, 101, 101, 102, 103, 104, 105, 107, 108, 110, 111, 111, 111, 112, 113, 114, 116, 117, 119, 120, 120, 120, 121, 122, 123, 125, 126, 128, 129, 129, 129, 130, 131, 132, 133, 135, 136, 138, 139, 139, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 150, 150, 151, 152, 153, 154, 155, 157, 159, 160, 162, 163, 163, 163, 164, 166, 167, 169, 170, 170, 170, 171, 172, 174, 175, 177, 178, 178, 178, 179, 180, 182, 183, 185, 186, 186, 186, 187, 189, 191, 192, 194, 195, 195, 196, 196, 196, 197, 199, 200, 202, 203, 203, 203, 204, 205, 207, 208, 208, 208, 209, 210, 212, 213, 213, 213, 214, 215, 216, 217, 222, 223, 224, 224, 224, 226, 227, 227, 227, 228, 229, 231, 232, 233, 233, 233, 234, 235, 236, 236, 237, 237, 238, 240, 241, 242, 242, 243, 244, 245, 245, 247, 248, 248, 248, 249, 250, 251, 253, 254, 254, 254, 255, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 270, 271, 272, 272, 273, 274, 275, 275, 276, 278, 279, 280, 280, 281, 282, 283, 284, 285, 287, 288, 289, 289, 290, 291, 292, 294, 295, 296, 296, 297, 298, 299, 301, 302, 303, 303, 304, 304, 305, 306, 308, 309, 310, 310, 311, 311, 312, 313, 314, 316, 317, 318, 318, 319, 320, 320, 321, 323, 324, 325, 325, 326, 326, 327, 329, 330, 331, 331, 332, 332, 333, 335, 336, 337, 338, 340, 341, 341, 342, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 362, 363, 363, 363, 364, 365, 367, 368, 368, 368, 369, 370, 372, 373, 373, 373, 374, 375, 376, 377, 381, 382, 383, 384, 384, 385, 386, 387, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 411, 411, 412, 413, 413, 413, 414, 415, 416, 417, 419, 419, 421, 422, 422, 422, 423, 424, 425, 426, 427, 428, 430, 431, 431, 431, 432, 434, 435, 436, 437, 439, 440, 442
#include <iostream>
#include <string>
#include <vector>
#include "SDL4Cpp.h"

/* These two classes do exactly the same thing, one uses the class functions, and the other does it the SDL C way */
class TestHandler : public SDL::Handle
{
	public:
		TestHandler() : m_Quit(false), m_Switch(false), m_Unicode(false), m_Repeat(false) {}

		bool Active(Uint8 gain, Uint8 state)
		{
			// Note here that for output purposes casting to int is required otherwise you'll
			// get the Uint8 (or unsigned char) which is typically garbage output
			// It'd be more accurate to cast to unsigned int, but for this it shouldn't matter.
			std::cout << "Active:" << std::endl
				<< "\tgain: " << static_cast<int>(gain) << std::endl
				<< "\tstate: " << static_cast<int>(state) << std::endl;

			return true;
		}

		bool KeyPressed(SDL::KeySym &keysym)
		{
			std::cout << "KeyPressed:" << std::endl
				<< "\tkeysym.scancode: " << static_cast<int>(keysym.scancode) << std::endl
				<< "\tkeysym.sym: " << keysym.sym << std::endl
				<< "\tkeysym.mod: " << keysym.mod << std::endl
				<< "\tkeysym.unicode: " << keysym.unicode << std::endl;

			if(keysym.sym == SDLK_u)
			{
				m_Unicode = !m_Unicode;
				SDL::Unicode(m_Unicode);
			}

			if(keysym.sym == SDLK_r)
			{
				m_Repeat = !m_Repeat;

				if(m_Repeat)
					SDL::KeyRepeat(25, 5);
				else
					SDL::KeyRepeat(0, 0);
			}

			if(keysym.sym == SDLK_s)
				m_Switch = !m_Switch;

			Uint8 *keys = SDL::GetKeyState(NULL);
			if(keys[SDLK_LCTRL] && keys[SDLK_c])
				m_Quit = true;

			return true;
		}

		bool KeyReleased(SDL::KeySym &keysym)
		{
			std::cout << "KeyReleased:" << std::endl
				<< "\tkeysym.scancode: " << static_cast<int>(keysym.scancode) << std::endl
				<< "\tkeysym.sym: " << keysym.sym << std::endl
				<< "\tkeysym.mod: " << keysym.mod << std::endl
				<< "\tkeysym.unicode: " << keysym.unicode << std::endl;
			return true;
		}

		bool MouseMotion(Uint8 state, Uint16 x, Uint16 y, Sint16 xrel, Sint16 yrel)
		{
			std::cout << "MouseMotion: " << std::endl
				<< "\tstate: " << static_cast<int>(state) << std::endl
				<< "\tx: " << x << std::endl
				<< "\ty: " << y << std::endl
				<< "\txrel: " << xrel << std::endl
				<< "\tyrel: " << yrel << std::endl;

			return true;
		}

		bool MouseButtonPressed(Uint8 button, Uint16 x, Uint16 y)
		{
			std::cout << "MouseButtonPressed: " << std::endl
				<< "\tbutton: " << static_cast<int>(button) << std::endl
				<< "\tx: " << x << std::endl
				<< "\ty: " << y << std::endl;

			return true;
		}

		bool MouseButtonReleased(Uint8 button, Uint16 x, Uint16 y)
		{
			std::cout  << "MouseButtonReleased:" << std::endl
				<< "\tbutton: " << static_cast<int>(button) << std::endl
				<< "\tx: " << x << std::endl
				<< "\ty: " << y << std::endl;

			return true;
		}

		bool JoyAxis(Uint8 which, Uint8 axis, Sint16 value)
		{
			std::cout << "JoyAxis:" << std::endl
				<< "\twhich: " << static_cast<int>(which) << std::endl
				<< "\taxis: " << static_cast<int>(axis) << std::endl
				<< "\tvalue: " << value << std::endl;

			return true;
		}

		bool JoyButtonPressed(Uint8 which, Uint8 button)
		{
			std::cout << "JoyButtonPressed" << std::endl
				<< "\twhich: " << static_cast<int>(which) << std::endl
				<< "\tbutton: " << static_cast<int>(button) << std::endl;

			return true;
		}

		bool JoyButtonReleased(Uint8 which, Uint8 button)
		{
			std::cout << "JoyButtonReleased" << std::endl
				<< "\twhich: " << static_cast<int>(which) << std::endl
				<< "\tbutton: " << static_cast<int>(button) << std::endl;

			return true;
		}

		bool JoyHat(Uint8 which, Uint8 hat, Uint8 value)
		{
			std::cout << "JoyHat" << std::endl
				<< "\twhich: " << static_cast<int>(which) << std::endl
				<< "\that: " << static_cast<int>(hat) << std::endl
				<< "\tvalue: " << static_cast<int>(value) << std::endl;

			return true;
		}

		bool JoyBall(Uint8 which, Uint8 ball, Sint16 xrel, Sint16 yrel)
		{
			std::cout << "JoyBall" << std::endl
				<< "\twhich: " << static_cast<int>(which) << std::endl
				<< "\tball: " << static_cast<int>(ball) << std::endl
				<< "\txrel: " << xrel << std::endl
				<< "\tyrel: " << yrel << std::endl;

			return true;
		}

		bool VideoResize(int w, int h)
		{
			SDL::Screen screen;
			SDL::GetVideoSurface(screen);
			std::cout << "VideoResize" << std::endl
				<< "\tw: " << w << std::endl
				<< "\th: " << h << std::endl;

			screen.SetVideoMode(w, h, 8, SDL_SWSURFACE | SDL_RESIZABLE);

			return true;
		}

		bool VideoExpose()
		{
			std::cout << "VideoExpose" << std::endl;

			return true;
		}

		bool SysWM(SDL::SysWMmsg *msg)
		{
			std::cout << "SysWM" << std::endl
				<< "\tmsg: " << msg << std::endl;

			return true;
		}

		bool User(int code, void *data1, void *data2)
		{
			std::cout << "User" << std::endl
				<< "\tcode: " << code << std::endl;

			return true;
		}

		bool Quit()
		{
			std::cout << "Quit" << std::endl;

			m_Quit = true;

			return true;
		}

		// This actually shouldn't ever get here
		bool All(SDL_Event &m_Event)
		{
			std::cout << "This shoudln't happen: All";

			return true;
		}

		operator bool()
		{
			return m_Quit;
		}

		bool Switch()
		{
			return m_Switch;
		}

		void SetSwitch(bool makeswitch)
		{
			m_Switch = makeswitch;
		}
	private:
		bool m_Quit, m_Switch, m_Unicode, m_Repeat;
};

// This is the old way to handle events
class AllHandler : public SDL::Handle
{
	public:
		AllHandler() : m_Quit(false), m_Switch(false), m_Unicode(false), m_Repeat(false) {};

		bool All(SDL_Event &event)
		{
			std::cout << "All" << std::endl;
			Uint8 *keys = SDL::GetKeyState(NULL);

			SDL::Screen screen;
			switch(event.type)
			{
				case SDL_ACTIVEEVENT:
					std::cout << "SDL_ACTIVEEVENT:" << std::endl
						<< "\tevent.active.gain: " << static_cast<int>(event.active.gain) << std::endl
						<< "\tevent.active.state: " << static_cast<int>(event.active.state) << std::endl;
					break;

				case SDL_KEYDOWN:
					std::cout << "SDL_KEYDOWN:" << std::endl
						<< "\tevent.key.keysym.scancode: " << static_cast<int>(event.key.keysym.scancode) << std::endl
						<< "\tevent.key.keysym.sym: " << event.key.keysym.sym << std::endl
						<< "\tevent.key.keysym.mod: " << event.key.keysym.mod << std::endl
						<< "\tevent.key.keysym.unicode: " << event.key.keysym.unicode << std::endl;

					if(event.key.keysym.sym == SDLK_u)
					{
						m_Unicode = !m_Unicode;
						SDL::Unicode(m_Unicode);
					}

					if(event.key.keysym.sym == SDLK_r)
					{
						m_Repeat = !m_Repeat;

						if(m_Repeat)
							SDL::KeyRepeat(25, 5);
						else
							SDL::KeyRepeat(0, 0);
					}

					if(event.key.keysym.sym == SDLK_s)
						m_Switch = !m_Switch;

					if(keys[SDLK_LCTRL] && keys[SDLK_c])
						m_Quit = true;
					break;

				case SDL_KEYUP:
					std::cout << "SDL_KEYUP:" << std::endl
						<< "\tevent.key.keysym.scancode: " << static_cast<int>(event.key.keysym.scancode) << std::endl
						<< "\tevent.key.keysym.sym: " << event.key.keysym.sym << std::endl
						<< "\tevent.key.keysym.mod: " << event.key.keysym.mod << std::endl
						<< "\tevent.key.keysym.unicode: " << event.key.keysym.unicode << std::endl;
					break;

				case SDL_MOUSEMOTION:
					std::cout << "SDL_MOUSEMOTION: " << std::endl
						<< "\tevent.motion.state: " << static_cast<int>(event.motion.state) << std::endl
						<< "\tevent.motion.x: " << event.motion.x << std::endl
						<< "\tevent.motion.y: " << event.motion.y << std::endl
						<< "\tevent.motion.xrel: " << event.motion.xrel << std::endl
						<< "\tevent.motion.yrel: " << event.motion.yrel << std::endl;
					break;

				case SDL_MOUSEBUTTONDOWN:
					std::cout << "SDL_MOUSEBUTTONDOWN: " << std::endl
						<< "\tevent.button.button: " << static_cast<int>(event.button.button) << std::endl
						<< "\tevent.button.x: " << event.button.x << std::endl
						<< "\tevent.button.y: " << event.button.y << std::endl;
					break;

				case SDL_MOUSEBUTTONUP:
					std::cout  << "SDL_MOUSEBUTTONUP:" << std::endl
						<< "\tevent.button.button: " << static_cast<int>(event.button.button) << std::endl
						<< "\tevent.button.x: " << event.button.x << std::endl
						<< "\tevent.button.y: " << event.button.y << std::endl;
					break;

				case SDL_JOYAXISMOTION:
					std::cout << "SDL_JOYAXIS:" << std::endl
						<< "\tevent.jaxis.which: " << static_cast<int>(event.jaxis.which) << std::endl
						<< "\tevent.jaxis.axis: " << static_cast<int>(event.jaxis.axis) << std::endl
						<< "\tevent.jaxis.value: " << event.jaxis.value << std::endl;
					break;

				case SDL_JOYBALLMOTION:
					std::cout << "SDL_JOYBALL" << std::endl
						<< "\tevent.jball.which: " << static_cast<int>(event.jball.which) << std::endl
						<< "\tevent.jball.ball: " << static_cast<int>(event.jball.ball) << std::endl
						<< "\tevent.jball.xrel: " << event.jball.xrel << std::endl
						<< "\tevent.jball.yrel: " << event.jball.yrel << std::endl;
					break;

				case SDL_JOYHATMOTION:
					std::cout << "SDL_JOYHAT" << std::endl
						<< "\tevent.jhat.which: " << static_cast<int>(event.jhat.which) << std::endl
						<< "\tevent.jhat.hat: " << static_cast<int>(event.jhat.hat) << std::endl
						<< "\tevent.jhat.value: " << static_cast<int>(event.jhat.value) << std::endl;
					break;

				case SDL_JOYBUTTONDOWN:
					std::cout << "SDL_JOYBUTTONDOWN" << std::endl
						<< "\tevent.jbutton.which: " << static_cast<int>(event.jbutton.which) << std::endl
						<< "\tevent.jbutton.button: " << static_cast<int>(event.jbutton.button) << std::endl;
					break;

				case SDL_JOYBUTTONUP:
					std::cout << "SDL_JOYBUTTONUP" << std::endl
						<< "\tevent.jbutton.which: " << static_cast<int>(event.jbutton.which) << std::endl
						<< "\tevent.jbutton.button: " << static_cast<int>(event.jbutton.button) << std::endl;
					break;

				case SDL_VIDEORESIZE:
					std::cout << "SDL_VIDEORESIZE" << std::endl
						<< "\tevent.resize.w: " << event.resize.w << std::endl
						<< "\tevent.resize.h: " << event.resize.h << std::endl;

					SDL::GetVideoSurface(screen);
					screen.SetVideoMode(event.resize.w, event.resize.h, 8, SDL_SWSURFACE | SDL_RESIZABLE);
					break;

				case SDL_VIDEOEXPOSE:
					std::cout << "SDL_VIDEOEXPOSE" << std::endl;
					break;

				case SDL_QUIT:
					std::cout << "SDL_QUIT" << std::endl;
					m_Quit = true;
					break;

				case SDL_SYSWMEVENT:
					std::cout << "SDL_SYSWMEVENT" << std::endl
						<< "\tevent.syswm.msg: " << event.syswm.msg << std::endl;
					break;
			}

			return true;
		}

		operator bool()
		{
			return m_Quit;
		}

		bool Switch()
		{
			return m_Switch;
		}

		void SetSwitch(bool makeswitch)
		{
			m_Switch = makeswitch;
		}
	private:
		bool m_Quit, m_Switch, m_Unicode, m_Repeat;
};

class ActiveHandler : public SDL::Handle
{
	public:
		bool Active(Uint8 gain, Uint8 state)
		{
			std::cout << "ActiveHandler:" << std::endl
					<< "\tgain: " << static_cast<int>(gain) << std::endl
					<< "\tstate: " << static_cast<int>(state) << std::endl;

			return true;
		}
};

int main(int argv, char *args[])
{
	SDL::Init(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK);
	atexit(SDL::Quit);

	SDL::Screen screen;
	SDL::Event events;
	TestHandler testhandler;
	AllHandler allhandler;
	ActiveHandler activehandler;

	bool useallhandler = false;
	std::vector<SDL::Joystick *> joysticks;

	// Joysticks must be opened before they're polled
	if(SDL::NumJoysticks() < 1)
		std::cout << "No joysticks to poll." << std::endl;
	else
	{
		for(int i = 0; i < SDL::NumJoysticks(); i++)
		{
			joysticks.push_back(new SDL::Joystick);
			joysticks.at(i)->Open(i);
		}
	}

	screen.SetVideoMode(320,240, 8, SDL_SWSURFACE | SDL_RESIZABLE);

	while(!testhandler && !allhandler)
	{
		// Try out Peek first
		events.PeekActive(activehandler);
		if(useallhandler)
			events.Poll(allhandler);
		else
			events.Poll(testhandler);

		if(allhandler.Switch() || testhandler.Switch())
		{
			useallhandler = !useallhandler;

			allhandler.SetSwitch(false);
			testhandler.SetSwitch(false);
		}
	}

	for(unsigned int i = 0; i < joysticks.size(); i++)
		delete joysticks.at(i);

	return 0;
}

