439
1, 6, 7, 8, 8, 9, 11, 11, 13, 14, 15, 15, 17, 17, 20, 20, 21, 22, 23, 26, 26, 27, 28, 28, 28, 28, 30, 32, 32, 33, 35, 36, 36, 39, 41, 41, 43, 45, 45, 54, 55, 56, 57, 58, 60, 70, 71, 71, 72, 73, 75, 77, 78, 79, 79, 82, 82, 83, 84, 85, 88, 88, 89, 89, 89, 89, 91, 94, 97, 99, 99, 103, 103, 104, 106, 107, 107, 110, 110, 115, 116, 117, 118, 119, 121, 124, 131, 133, 133, 135, 136, 137, 137, 137, 140, 140, 141, 143, 143, 144, 144, 144, 144, 146, 146, 146, 146, 147, 149, 149, 151, 151, 151, 151, 152, 154, 155, 158, 158, 158, 161, 162, 162, 163, 170, 171, 178, 179, 181, 181, 181, 183, 184, 184, 184, 188, 189, 191, 191, 192, 193, 195, 198, 202, 203, 213, 214, 214, 216, 217, 217, 219, 219, 219, 219, 221, 221, 223, 223, 224, 224, 228, 230, 240, 241, 242, 242, 244, 245, 245, 245, 248, 250, 250, 251, 251, 251, 251, 253, 253, 253, 255, 255, 255, 256, 256, 256, 269, 270, 271, 271, 272, 274, 275, 276, 276, 278, 278, 279, 279, 279, 279, 281, 281, 283, 283, 284, 284, 286, 289, 292, 301, 302, 302, 303, 303, 305, 306, 307, 310, 311, 313, 313, 314, 316, 318, 318, 319, 319, 319, 319, 321, 322, 322, 322, 323, 329, 330, 332, 334, 336, 339, 341, 344, 349, 350, 350, 356, 357, 357, 358, 360, 361, 366, 367, 368, 369, 369, 371, 371, 371, 371, 374, 380, 380, 382, 382, 383, 385, 385, 385, 389, 390, 390, 392, 393, 395, 396, 398, 398, 402, 402, 405, 405, 406, 406, 408, 409, 410, 419, 420, 422, 422, 428, 433, 433, 441, 442, 443, 443, 446, 447, 447, 448, 448, 450, 454, 458, 460, 468, 469, 470, 472, 474, 475, 477, 478, 479, 480, 482, 486, 487, 488, 490, 491, 492, 493, 496, 501, 508, 512, 512, 513, 514, 516, 517, 520, 523, 530, 531, 533, 534, 536, 537, 542, 542, 543, 544, 545, 546, 548, 549, 550, 552, 555, 557, 561, 562, 565, 570, 573, 578, 580, 581, 581, 582, 582, 583, 583, 588, 588, 589, 592, 592, 595, 598, 598, 599, 599, 601, 601, 601, 601, 603, 603, 603, 603, 605, 606, 608, 610, 612, 613, 618, 620, 621, 621, 623, 627, 629, 629, 630, 632, 632, 633, 633, 633, 633, 635, 635, 635, 635, 637, 637, 638, 638, 640, 642, 649, 650, 651, 653, 656, 658, 658, 659, 659, 659, 659, 661, 665, 666, 666, 668, 668, 669, 669, 672, 681
#include "app.h"

// --------------------- Opcodes 0x0100+ ---------------------
// Emit a Btst (Register) opcode 0000nnn1 ttaaaaaa
int OpBtstReg(int op)
{
  int use=0;
  int type=0,sea=0,tea=0;
  int size=0;

  type=(op>>6)&3; // Btst/Bchg/Bclr/Bset
  // Get source and target EA
  sea=(op>>9)&7;
  tea=op&0x003f;
  if (tea<0x10) size=2; // For registers, 32-bits

  if ((tea&0x38)==0x08) return 1; // movep

  // See if we can do this opcode:
  if (EaCanRead(tea,0)==0) return 1;
  if (type>0)
  {
    if (EaCanWrite(tea)==0) return 1;
  }

  use=OpBase(op,size);
  use&=~0x0e00; // Use same handler for all registers
  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  OpStart(op,tea);

  if(type==1||type==3) {
    Cycles=8;
  } else {
    Cycles=type?8:4;
    if(size>=2) Cycles+=2;
  }

  EaCalcReadNoSE(-1,10,sea,0,0x0e00);

  EaCalcReadNoSE((type>0)?11:-1,0,tea,size,0x003f);

  if (tea>=0x10)
       ot("  and r10,r10,#7  ;@ mem - do mod 8\n");  // size always 0
  else ot("  and r10,r10,#31 ;@ reg - do mod 32\n"); // size always 2
  ot("\n");

  ot("  mov r1,#1\n");
  ot("  tst r0,r1,lsl r10 ;@ Do arithmetic\n");
  ot("  bicne r9,r9,#0x40000000\n");
  ot("  orreq r9,r9,#0x40000000 ;@ Get Z flag\n");
  ot("\n");

  if (type>0)
  {
    if (type==1) ot("  eor r1,r0,r1,lsl r10 ;@ Toggle bit\n");
    if (type==2) ot("  bic r1,r0,r1,lsl r10 ;@ Clear bit\n");
    if (type==3) ot("  orr r1,r0,r1,lsl r10 ;@ Set bit\n");
    ot("\n");
    EaWrite(11,   1,tea,size,0x003f,0,0);
  }
  OpEnd(tea);

  return 0;
}

// --------------------- Opcodes 0x0800+ ---------------------
// Emit a Btst/Bchg/Bclr/Bset (Immediate) opcode 00001000 ttaaaaaa nn
int OpBtstImm(int op)
{
  int type=0,sea=0,tea=0;
  int use=0;
  int size=0;

  type=(op>>6)&3;
  // Get source and target EA
  sea=   0x003c;
  tea=op&0x003f;
  if (tea<0x10) size=2; // For registers, 32-bits

  // See if we can do this opcode:
  if (EaCanRead(tea,0)==0||EaAn(tea)||tea==0x3c) return 1;
  if (type>0)
  {
    if (EaCanWrite(tea)==0) return 1;
  }

  use=OpBase(op,size);
  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  OpStart(op,sea,tea);

  ot("\n");
  EaCalcReadNoSE(-1,0,sea,0,0);
  ot("  mov r10,#1\n");
  ot("  bic r9,r9,#0x40000000 ;@ Blank Z flag\n");
  if (tea>=0x10)
       ot("  and r0,r0,#7    ;@ mem - do mod 8\n");  // size always 0
  else ot("  and r0,r0,#0x1F ;@ reg - do mod 32\n"); // size always 2
  ot("  mov r10,r10,lsl r0 ;@ Make bit mask\n");
  ot("\n");

  if(type==1||type==3) {
    Cycles=12;
  } else {
    Cycles=type?12:8;
    if(size>=2) Cycles+=2;
  }

  EaCalcReadNoSE((type>0)?11:-1,0,tea,size,0x003f);
  ot("  tst r0,r10 ;@ Do arithmetic\n");
  ot("  orreq r9,r9,#0x40000000 ;@ Get Z flag\n");
  ot("\n");

  if (type>0)
  {
    if (type==1) ot("  eor r1,r0,r10 ;@ Toggle bit\n");
    if (type==2) ot("  bic r1,r0,r10 ;@ Clear bit\n");
    if (type==3) ot("  orr r1,r0,r10 ;@ Set bit\n");
    ot("\n");
    EaWrite(11,   1,tea,size,0x003f,0,0);
  }

  OpEnd(sea,tea);

  return 0;
}

// --------------------- Opcodes 0x4000+ ---------------------
int OpNeg(int op)
{
  // 01000tt0 xxeeeeee (tt=negx/clr/neg/not, xx=size, eeeeee=EA)
  int type=0,size=0,ea=0,use=0;

  type=(op>>9)&3;
  ea  =op&0x003f;
  size=(op>>6)&3; if (size>=3) return 1;

  // See if we can do this opcode:
  if (EaCanRead (ea,size)==0||EaAn(ea)) return 1;
  if (EaCanWrite(ea     )==0) return 1;

  use=OpBase(op,size);
  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  OpStart(op,ea); Cycles=size<2?4:6;
  if(ea >= 0x10)  Cycles*=2;

  EaCalc (10,0x003f,ea,size,0,0);

  if (type!=1) EaRead (10,0,ea,size,0x003f,0,0); // Don't need to read for 'clr' (or do we, for a dummy read?)
  if (type==1) ot("\n");

  if (type==0)
  {
    ot(";@ Negx:\n");
    GetXBit(1);
    if(size!=2) ot("  mov r0,r0,asl #%i\n",size?16:24);
    ot("  rscs r1,r0,#0 ;@ do arithmetic\n");
    ot("  orr r3,r9,#0xb0000000 ;@ for old Z\n");
    OpGetFlags(1,1,0);
    if(size!=2) {
      ot("  movs r1,r1,asr #%i\n",size?16:24);
      ot("  orreq r9,r9,#0x40000000 ;@ possily missed Z\n");
    }
    ot("  andeq r9,r9,r3 ;@ fix Z\n");
    ot("\n");
  }

  if (type==1)
  {
    ot(";@ Clear:\n");
    ot("  mov r1,#0\n");
    ot("  mov r9,#0x40000000 ;@ NZCV=0100\n");
    ot("\n");
  }

  if (type==2)
  {
    ot(";@ Neg:\n");
    if(size!=2) ot("  mov r0,r0,asl #%i\n",size?16:24);
    ot("  rsbs r1,r0,#0\n");
    OpGetFlags(1,1);
    if(size!=2) ot("  mov r1,r1,asr #%i\n",size?16:24);
    ot("\n");
  }

  if (type==3)
  {
    ot(";@ Not:\n");
    if(size!=2) {
      ot("  mov r0,r0,asl #%i\n",size?16:24);
      ot("  mvn r1,r0,asr #%i\n",size?16:24);
    }
    else
      ot("  mvn r1,r0\n");
    ot("  adds r1,r1,#0 ;@ Defines NZ, clears CV\n");
    OpGetFlags(0,0);
    ot("\n");
  }

  if (type==1) eawrite_check_addrerr=1;
  EaWrite(10,     1,ea,size,0x003f,0,0);

  OpEnd(ea);

  return 0;
}

// --------------------- Opcodes 0x4840+ ---------------------
// Swap, 01001000 01000nnn swap Dn
int OpSwap(int op)
{
  int ea=0,use=0;

  ea=op&7;
  use=op&~0x0007; // Use same opcode for all An

  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  OpStart(op); Cycles=4;

  EaCalc (10,0x0007,ea,2,1);
  EaRead (10,     0,ea,2,0x0007,1);

  ot("  mov r1,r0,ror #16\n");
  ot("  adds r1,r1,#0 ;@ Defines NZ, clears CV\n");
  OpGetFlags(0,0);

  EaWrite(10,     1,8,2,0x0007,1);

  OpEnd();

  return 0;
}

// --------------------- Opcodes 0x4a00+ ---------------------
// Emit a Tst opcode, 01001010 xxeeeeee
int OpTst(int op)
{
  int sea=0;
  int size=0,use=0;

  sea=op&0x003f;
  size=(op>>6)&3; if (size>=3) return 1;

  // See if we can do this opcode:
  if (EaCanWrite(sea)==0||EaAn(sea)) return 1;

  use=OpBase(op,size);
  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  OpStart(op,sea); Cycles=4;

  EaCalc ( 0,0x003f,sea,size,1);
  EaRead ( 0,     0,sea,size,0x003f,1);

  ot("  adds r0,r0,#0 ;@ Defines NZ, clears CV\n");
  ot("  mrs r9,cpsr ;@ r9=flags\n");
  ot("\n");

  OpEnd(sea);
  return 0;
}

// --------------------- Opcodes 0x4880+ ---------------------
// Emit an Ext opcode, 01001000 1x000nnn
int OpExt(int op)
{
  int ea=0;
  int size=0,use=0;
  int shift=0;

  ea=op&0x0007;
  size=(op>>6)&1;
  shift=32-(8<<size);

  use=OpBase(op,size);
  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  OpStart(op); Cycles=4;

  EaCalc (10,0x0007,ea,size+1,0,0);
  EaRead (10,     0,ea,size+1,0x0007,0,0);

  ot("  mov r0,r0,asl #%d\n",shift);
  ot("  adds r0,r0,#0 ;@ Defines NZ, clears CV\n");
  ot("  mrs r9,cpsr ;@ r9=flags\n");
  ot("  mov r1,r0,asr #%d\n",shift);
  ot("\n");

  EaWrite(10,     1,ea,size+1,0x0007,0,0);

  OpEnd();
  return 0;
}

// --------------------- Opcodes 0x50c0+ ---------------------
// Emit a Set cc opcode, 0101cccc 11eeeeee
int OpSet(int op)
{
  int cc=0,ea=0;
  int size=0,use=0,changed_cycles=0;
  char *cond[16]=
  {
    "al","", "hi","ls","cc","cs","ne","eq",
    "vc","vs","pl","mi","ge","lt","gt","le"
  };

  cc=(op>>8)&15;
  ea=op&0x003f;

  if ((ea&0x38)==0x08) return 1; // dbra, not scc
  
  // See if we can do this opcode:
  if (EaCanWrite(ea)==0) return 1;

  use=OpBase(op,size);
  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  changed_cycles=ea<8 && cc>=2;
  OpStart(op,ea,0,changed_cycles); Cycles=8;
  if (ea<8) Cycles=4;

  if (cc)
    ot("  mov r1,#0\n");

  switch (cc)
  {
    case 0: // T
      ot("  mvn r1,#0\n");
      if (ea<8) Cycles+=2;
      break;
    case 1: // F
      break;
    case 2: // hi
      ot("  tst r9,#0x60000000 ;@ hi: !C && !Z\n");
      ot("  mvneq r1,r1\n");
      if (ea<8) ot("  subeq r5,r5,#2 ;@ Extra cycles\n");
      break;
    case 3: // ls
      ot("  tst r9,#0x60000000 ;@ ls: C || Z\n");
      ot("  mvnne r1,r1\n");
      if (ea<8) ot("  subne r5,r5,#2 ;@ Extra cycles\n");
      break;
    default:
      ot(";@ Is the condition true?\n");
      ot("  msr cpsr_flg,r9 ;@ ARM flags = 68000 flags\n");
      ot("  mvn%s r1,r1\n",cond[cc]);
      if (ea<8) ot("  sub%s r5,r5,#2 ;@ Extra cycles\n",cond[cc]);
      break;
  }

  ot("\n");

  eawrite_check_addrerr=1;
  EaCalc (0,0x003f, ea,size,0,0);
  EaWrite(0,     1, ea,size,0x003f,0,0);

  opend_op_changes_cycles=changed_cycles;
  OpEnd(ea,0);
  return 0;
}

// Emit a Asr/Lsr/Roxr/Ror opcode
static int EmitAsr(int op,int type,int dir,int count,int size,int usereg)
{
  char pct[8]=""; // count
  int shift=32-(8<<size);

  if (count>=1) sprintf(pct,"#%d",count); // Fixed count

  if (usereg)
  {
    ot(";@ Use Dn for count:\n");
    ot("  and r2,r8,#0x0e00\n");
    ot("  ldr r2,[r7,r2,lsr #7]\n");
    ot("  and r2,r2,#63\n");
    ot("\n");
    strcpy(pct,"r2");
  }
  else if (count<0)
  {
    ot("  mov r2,r8,lsr #9 ;@ Get 'n'\n");
    ot("  and r2,r2,#7\n\n"); strcpy(pct,"r2");
  }

  // Take 2*n cycles:
  if (count<0) ot("  sub r5,r5,r2,asl #1 ;@ Take 2*n cycles\n\n");
  else Cycles+=count<<1;

  if (type<2)
  {
    // Asr/Lsr
    if (dir==0 && size<2)
    {
      ot(";@ For shift right, use loworder bits for the operation:\n");
      ot("  mov r0,r0,%s #%d\n",type?"lsr":"asr",32-(8<<size));
      ot("\n");
    }

    if (type==0 && dir) ot("  adds r3,r0,#0 ;@ save old value for V flag calculation, also clear V\n");

    ot(";@ Shift register:\n");
    if (type==0) ot("  movs r0,r0,%s %s\n",dir?"asl":"asr",pct);
    if (type==1) ot("  movs r0,r0,%s %s\n",dir?"lsl":"lsr",pct);

    OpGetFlags(0,0);
    if (usereg) { // store X only if count is not 0
      ot("  cmp %s,#0 ;@ shifting by 0?\n",pct);
      ot("  biceq r9,r9,#0x20000000 ;@ if so, clear carry\n");
      ot("  strne r9,[r7,#0x4c] ;@ else Save X bit\n");
    } else {
      // count will never be 0 if we use immediate
      ot("  str r9,[r7,#0x4c] ;@ Save X bit\n");
    }
    ot("\n");

    if (dir==0 && size<2)
    {
      ot(";@ restore after right shift:\n");
      ot("  movs r0,r0,lsl #%d\n",32-(8<<size));
      if (type)
        ot("  orrmi r9,r9,#0x80000000 ;@ Potentially missed N flag\n");
      ot("\n");
    }

    if (type==0 && dir) {
      ot(";@ calculate V flag (set if sign bit changes at anytime):\n");
      ot("  mov r1,#0x80000000\n");
      ot("  ands r3,r3,r1,asr %s\n", pct);
      ot("  cmpne r3,r1,asr %s\n", pct);
      ot("  eoreq r1,r0,r3\n"); // above check doesn't catch (-1)<<(32+), so we need this
      ot("  tsteq r1,#0x80000000\n");
      ot("  orrne r9,r9,#0x10000000\n");
      ot("\n");
    }
  }

  // --------------------------------------
  if (type==2)
  {
    int wide=8<<size;

    // Roxr
    if(count == 1) {
      if(dir==0) {
        if(size!=2) {
          ot("  orr r0,r0,r0,lsr #%i\n", size?16:24);
          ot("  bic r0,r0,#0x%x\n", 1<<(32-wide));
        }
        GetXBit(0);
        ot("  movs r0,r0,rrx\n");
        OpGetFlags(0,1);
      } else {
        ot("  ldr r3,[r7,#0x4c]\n");
        ot("  movs r0,r0,lsl #1\n");
        OpGetFlags(0,1);
        ot("  tst r3,#0x20000000\n");
        ot("  orrne r0,r0,#0x%x\n", 1<<(32-wide));
        ot("  bicne r9,r9,#0x40000000 ;@ clear Z in case it got there\n");
      }
      ot("  bic r9,r9,#0x10000000 ;@ make suve V is clear\n");
      return 0;
    }

    if (usereg)
    {
      if (size==2)
      {
        ot("  subs r2,r2,#33\n");
        ot("  addmis r2,r2,#33 ;@ Now r2=0-%d\n",wide);
      }
      else
      {
        ot(";@ Reduce r2 until <0:\n");
        ot("Reduce_%.4x%s\n",op,ms?"":":");
        ot("  subs r2,r2,#%d\n",wide+1);
        ot("  bpl Reduce_%.4x\n",op);
        ot("  adds r2,r2,#%d ;@ Now r2=0-%d\n",wide+1,wide);
      }
      ot("  beq norotx_%.4x\n",op);
      ot("\n");
    }

    if (usereg||count < 0)
    {
      if (dir) ot("  rsb r2,r2,#%d ;@ Reverse direction\n",wide+1);
    }
    else
    {
      if (dir) ot("  mov r2,#%d ;@ Reversed\n",wide+1-count);
      else     ot("  mov r2,#%d\n",count);
    }

    if (shift) ot("  mov r0,r0,lsr #%d ;@ Shift down\n",shift);

    ot("\n");
    ot(";@ First get X bit (middle):\n");
    ot("  ldr r3,[r7,#0x4c]\n");
    ot("  rsb r1,r2,#%d\n",wide);
    ot("  and r3,r3,#0x20000000\n");
    ot("  mov r3,r3,lsr #29\n");
    ot("  mov r3,r3,lsl r1\n");

    ot(";@ Rotate bits:\n");
    ot("  orr r3,r3,r0,lsr r2 ;@ Orr right part\n");
    ot("  rsbs r2,r2,#%d ;@ should also clear ARM V\n",wide+1);
    ot("  orrs r0,r3,r0,lsl r2 ;@ Orr left part, set flags\n");
    ot("\n");

    if (shift) ot("  movs r0,r0,lsl #%d ;@ Shift up and get correct NC flags\n",shift);
    OpGetFlags(0,!usereg);
    if (usereg) { // store X only if count is not 0
      ot("  str r9,[r7,#0x4c] ;@ if not 0, Save X bit\n");
      ot("  b nozerox%.4x\n",op);
      ot("norotx_%.4x%s\n",op,ms?"":":");
      ot("  ldr r2,[r7,#0x4c]\n");
      ot("  adds r0,r0,#0 ;@ Defines NZ, clears CV\n");
      OpGetFlags(0,0);
      ot("  and r2,r2,#0x20000000\n");
      ot("  orr r9,r9,r2 ;@ C = old_X\n");
      ot("nozerox%.4x%s\n",op,ms?"":":");
    }

    ot("\n");
  }

  // --------------------------------------
  if (type==3)
  {
    // Ror
    if (size<2)
    {
      ot(";@ Mirror value in whole 32 bits:\n");
      if (size<=0) ot("  orr r0,r0,r0,lsr #8\n");
      if (size<=1) ot("  orr r0,r0,r0,lsr #16\n");
      ot("\n");
    }

    ot(";@ Rotate register:\n");
    if (!dir) ot("  adds r0,r0,#0 ;@ first clear V and C\n"); // ARM does not clear C if rot count is 0
    if (count<0)
    {
      if (dir) ot("  rsb %s,%s,#32\n",pct,pct);
      ot("  movs r0,r0,ror %s\n",pct);
    }
    else
    {
      int ror=count;
      if (dir) ror=32-ror;
      if (ror&31) ot("  movs r0,r0,ror #%d\n",ror);
    }

    OpGetFlags(0,0);
    if (dir)
    {
      ot("  bic r9,r9,#0x30000000 ;@ clear CV\n");
      ot(";@ Get carry bit from bit 0:\n");
      if (usereg)
      {
        ot("  cmp %s,#32 ;@ rotating by 0?\n",pct);
        ot("  tstne r0,#1 ;@ no, check bit 0\n");
      }
      else
        ot("  tst r0,#1\n");
      ot("  orrne r9,r9,#0x20000000\n");
    }
    ot("\n");

  }
  // --------------------------------------
  
  return 0;
}

// Emit a Asr/Lsr/Roxr/Ror opcode - 1110cccd xxuttnnn
// (ccc=count, d=direction(r,l) xx=size extension, u=use reg for count, tt=type, nnn=register Dn)
int OpAsr(int op)
{
  int ea=0,use=0;
  int count=0,dir=0;
  int size=0,usereg=0,type=0;

  count =(op>>9)&7;
  dir   =(op>>8)&1;
  size  =(op>>6)&3;
  if (size>=3) return 1; // use OpAsrEa()
  usereg=(op>>5)&1;
  type  =(op>>3)&3;

  if (usereg==0) count=((count-1)&7)+1; // because ccc=000 means 8

  // Use the same opcode for target registers:
  use=op&~0x0007;

  // As long as count is not 8, use the same opcode for all shift counts:
  if (usereg==0 && count!=8 && !(count==1&&type==2)) { use|=0x0e00; count=-1; }
  if (usereg) { use&=~0x0e00; count=-1; } // Use same opcode for all Dn

  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  OpStart(op,ea,0,count<0); Cycles=size<2?6:8;

  EaCalc(10,0x0007, ea,size,1);
  EaRead(10,     0, ea,size,0x0007,1);

  EmitAsr(op,type,dir,count, size,usereg);

  EaWrite(10,    0, ea,size,0x0007,1);

  opend_op_changes_cycles = (count<0);
  OpEnd(ea,0);

  return 0;
}

// Asr/Lsr/Roxr/Ror etc EA - 11100ttd 11eeeeee 
int OpAsrEa(int op)
{
  int use=0,type=0,dir=0,ea=0,size=1;

  type=(op>>9)&3;
  dir =(op>>8)&1;
  ea  = op&0x3f;

  if (ea<0x10) return 1;
  // See if we can do this opcode:
  if (EaCanRead(ea,0)==0) return 1;
  if (EaCanWrite(ea)==0) return 1;

  use=OpBase(op,size);
  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  OpStart(op,ea); Cycles=6; // EmitAsr() will add 2

  EaCalc (10,0x003f,ea,size,1);
  EaRead (10,     0,ea,size,0x003f,1);

  EmitAsr(op,type,dir,1,size,0);

  EaWrite(10,     0,ea,size,0x003f,1);

  OpEnd(ea);
  return 0;
}

int OpTas(int op, int gen_special)
{
  int ea=0;
  int use=0;

  ea=op&0x003f;

  // See if we can do this opcode:
  if (EaCanWrite(ea)==0 || EaAn(ea)) return 1;

  use=OpBase(op,0);
  if (op!=use) { OpUse(op,use); return 0; } // Use existing handler

  if (!gen_special) OpStart(op,ea);
  else
    ot("Op%.4x_%s\n", op, ms?"":":");

  Cycles=4;
  if(ea>=8) Cycles+=10;

  EaCalc (10,0x003f,ea,0,1);
  EaRead (10,     1,ea,0,0x003f,1);

  ot("  adds r1,r1,#0 ;@ Defines NZ, clears CV\n");
  OpGetFlags(0,0);
  ot("\n");

#if CYCLONE_FOR_GENESIS
  // the original Sega hardware ignores write-back phase (to memory only)
  if (ea < 0x10 || gen_special) {
#endif
    ot("  orr r1,r1,#0x80000000 ;@ set bit7\n");

    EaWrite(10,     1,ea,0,0x003f,1);
#if CYCLONE_FOR_GENESIS
  }
#endif

  OpEnd(ea);

#if (CYCLONE_FOR_GENESIS == 2)
  if (!gen_special && ea >= 0x10) {
    OpTas(op, 1);
  }
#endif

  return 0;
}

