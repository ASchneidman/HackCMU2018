662
20, 21, 22, 22, 22, 23, 24, 26, 27, 27, 27, 28, 29, 31, 32, 32, 32, 33, 34, 36, 37, 37, 37, 38, 39, 41, 42, 42, 42, 43, 44, 46, 47, 47, 47, 48, 49, 51, 52, 52, 52, 53, 54, 56, 57, 57, 57, 58, 59, 61, 62, 62, 62, 63, 64, 65, 66, 67, 69, 69, 69, 70, 70, 70, 71, 72, 74, 74, 74, 75, 75, 75, 76, 77, 79, 80, 80, 80, 81, 82, 84, 85, 85, 85, 86, 87, 90, 91, 91, 91, 92, 93, 95, 96, 96, 96, 97, 98, 100, 101, 101, 101, 102, 103, 105, 105, 106, 106, 106, 107, 108, 110, 111, 111, 111, 112, 113, 115, 116, 116, 116, 117, 118, 120, 121, 121, 121, 122, 123, 125, 126, 126, 126, 127, 128, 130, 131, 131, 131, 132, 133, 135, 136, 136, 136, 137, 138, 140, 141, 141, 141, 142, 143, 145, 146, 146, 146, 147, 148, 150, 151, 151, 151, 152, 153, 155, 156, 156, 156, 157, 158, 160, 161, 161, 161, 162, 163, 165, 166, 166, 166, 167, 168, 170, 171, 171, 171, 172, 173, 175, 176, 176, 176, 177, 178, 180, 181, 181, 181, 182, 183, 185, 186, 186, 186, 187, 189, 190, 192, 193, 195, 196, 197, 199, 200, 200, 200, 201, 202, 204, 205, 205, 205, 206, 207, 209, 210, 210, 210, 211, 212, 214, 215, 215, 215, 216, 217, 219, 220, 220, 220, 221, 222, 224, 225, 225, 225, 226, 227, 229, 230, 230, 230, 231, 232, 234, 235, 235, 235, 236, 237, 239, 240, 240, 240, 241, 242, 244, 245, 245, 245, 246, 247, 249, 250, 250, 250, 251, 252, 254, 255, 255, 255, 256, 257, 259, 260, 260, 260, 261, 262, 264, 265, 265, 265, 266, 267, 269, 270, 270, 270, 271, 272, 274, 275, 275, 275, 276, 277, 279, 280, 280, 280, 281, 282, 284, 285, 285, 285, 286, 287, 289, 290, 290, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 303, 303, 304, 305, 307, 308, 308, 308, 309, 310, 312, 313, 313, 313, 314, 315, 317, 318, 318, 318, 319, 320, 322, 323, 323, 323, 324, 325, 327, 328, 328, 328, 329, 330, 332, 333, 333, 333, 334, 335, 337, 338, 338, 338, 339, 340, 342, 343, 343, 343, 344, 345, 347, 348, 348, 348, 349, 350, 352, 353, 353, 353, 354, 355, 357, 358, 358, 358, 359, 360, 362, 363, 363, 363, 364, 365, 367, 368, 368, 368, 369, 370, 372, 373, 373, 373, 374, 375, 377, 378, 378, 378, 379, 380, 382, 383, 383, 383, 384, 385, 387, 388, 388, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 399, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 410, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 421, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 432, 432, 433, 434, 436, 437, 438, 439, 440, 442, 443, 443, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 454, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 465, 465, 466, 467, 469, 470, 471, 472, 473, 475, 476, 476, 476, 477, 478, 480, 481, 482, 483, 484, 486, 487, 487, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 498, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 509, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 522, 523, 523, 523, 524, 526, 527, 528, 529, 530, 532, 533, 533, 533, 534, 535, 535, 535, 536, 537, 538, 539, 541, 542, 542, 542, 543, 545, 546, 546, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 557, 558, 559, 560, 560, 561, 562, 563, 563, 564, 565, 566, 566, 567, 568, 569, 569, 570, 571, 572, 572, 573, 574, 575, 575, 576, 577, 578, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 593, 594, 595, 597, 598, 599, 53
/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with main.c; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
 */

#include "SDL4Cpp_events.h"

namespace SDL
{
	void SetEventFilter(EventFilter filter)
	{
		SDL_SetEventFilter(filter);
	}

	EventFilter GetEventFilter(void)
	{
		return SDL_GetEventFilter();
	}

	Uint8 EventState(Uint8 type, int state)
	{
		return SDL_EventState(type, state);
	}

	Uint8 *GetKeyState(int *numkeys)
	{
		return SDL_GetKeyState(numkeys);
	}

	Mod GetModState(void)
	{
		return SDL_GetModState();
	}

	void SetModState(Mod modstate)
	{
		SDL_SetModState(modstate);
	}

	std::string GetKeyName(Key key)
	{
		return static_cast<std::string>(SDL_GetKeyName(key));
	}

	bool Unicode(int enable)
	{
		return SDL_EnableUNICODE(enable);
	}

	bool KeyRepeat(int delay, int interval)
	{
		if(SDL_EnableKeyRepeat(delay, interval) == 0)
			return true;
		else
			return false;
	}

	Uint8 GetMouseState(int &x, int &y)
	{
		return SDL_GetMouseState(&x, &y);
	}

	Uint8 GetRelativeMouseState(int &x, int &y)
	{
		return SDL_GetRelativeMouseState(&x, &y);
	}

	Uint8 GetAppState(void)
	{
		return SDL_GetAppState();
	}

	int JoystickState(int state)
	{
		return SDL_JoystickEventState(state);
	}


	bool Handle::Active(Uint8 gain, Uint8 state)
	{
		return false;
	}

	bool Handle::KeyPressed(KeySym &keysym)
	{
		return false;
	}

	bool Handle::KeyReleased(KeySym &keysym)
	{
		return false;
	}

	bool Handle::MouseMotion(Uint8 state, Uint16 x, Uint16 y, Sint16 xrel, Sint16 yrel)
	{
		return false;
	}

	bool Handle::MouseButtonPressed(Uint8 button, Uint16 x, Uint16 y)
	{
		return false;
	}

	bool Handle::MouseButtonReleased(Uint8 button, Uint16 x, Uint16 y)
	{
		return false;
	}

	bool Handle::JoyAxis(Uint8 which, Uint8 axis, Sint16 value)
	{
		return false;
	}

	bool Handle::JoyButtonPressed(Uint8 which, Uint8 button)
	{
		return false;
	}

	bool Handle::JoyButtonReleased(Uint8 which, Uint8 button)
	{
		return false;
	}

	bool Handle::JoyHat(Uint8 which, Uint8 hat, Uint8 value)
	{
		return false;
	}

	bool Handle::JoyBall(Uint8 which, Uint8 ball, Sint16 xrel, Sint16 yrel)
	{
		return false;
	}

	bool Handle::VideoResize(int w, int h)
	{
		return false;
	}

	bool Handle::VideoExpose()
	{
		return false;
	}

	bool Handle::SysWM(SysWMmsg *msg)
	{
		return false;
	}

	bool Handle::User(int code, void *data1, void *data2)
	{
		return false;
	}

	bool Handle::Quit()
	{
		return false;
	}

	bool Handle::All(SDL_Event &event)
	{
		return false;
	}

	void Event::Pump(void)
	{
		SDL_PumpEvents();
	}

	int Event::Peep(int numevents, SDL_eventaction action, Uint32 mask)
	{
		return SDL_PeepEvents(&m_Event, numevents, action, mask);
	}

	int Event::Pop(Handle &handler, Uint32 mask)
	{
		int isEvent;

		Pump();
		isEvent = Peep(1, SDL_GETEVENT, mask);

		if(isEvent == 1)
			HandleEvents(handler);

		return isEvent;

	}

	bool Event::PopActive(Handle &handler)
	{
		return Pop(handler, SDL_ACTIVEEVENTMASK);
	}

	bool Event::PopKeyPressed(Handle &handler)
	{
		return Pop(handler, SDL_KEYDOWNMASK);
	}

	bool Event::PopKeyReleased(Handle &handler)
	{
		return Pop(handler, SDL_KEYUPMASK);
	}

	bool Event::PopMouseMotion(Handle &handler)
	{
		return Pop(handler, SDL_MOUSEMOTIONMASK);
	}

	bool Event::PopMouseButtonDown(Handle &handler)
	{
		return Pop(handler, SDL_MOUSEBUTTONDOWNMASK);
	}

	bool Event::PopMouseButtonUp(Handle &handler)
	{
		return Pop(handler, SDL_MOUSEBUTTONUPMASK);
	}

	bool Event::PopMouse(Handle &handler)
	{
		return Pop(handler, SDL_MOUSEEVENTMASK);
	}

	bool Event::PopJoyAxisMontion(Handle &handler)
	{
		return Pop(handler, SDL_JOYAXISMOTIONMASK);
	}

	bool Event::PopJoyBallMotion(Handle &handler)
	{
		return Pop(handler, SDL_JOYBALLMOTIONMASK);
	}

	bool Event::PopJoyHatMotion(Handle &handler)
	{
		return Pop(handler, SDL_JOYHATMOTIONMASK);
	}

	bool Event::PopJoyButtonDown(Handle &handler)
	{
		return Pop(handler, SDL_JOYBUTTONDOWNMASK);
	}

	bool Event::PopJoyButtonUp(Handle &handler)
	{
		return Pop(handler, SDL_JOYBUTTONUPMASK);
	}

	bool Event::PopJoy(Handle &handler)
	{
		return Pop(handler, SDL_JOYEVENTMASK);
	}

	bool Event::PopVideoResize(Handle &handler)
	{
		return Pop(handler, SDL_VIDEORESIZEMASK);
	}

	bool Event::PopVideoExpose(Handle &handler)
	{
		return Pop(handler, SDL_VIDEOEXPOSEMASK);
	}

	bool Event::PopQuit(Handle &handler)
	{
		return Pop(handler, SDL_QUITMASK);
	}

	bool Event::PopSysWM(Handle &handler)
	{
		return Pop(handler, SDL_SYSWMEVENTMASK);
	}

	bool Event::Wait()
	{
		return SDL_WaitEvent(&m_Event);
	}

	bool Event::Peek(Handle &handler, Uint32 mask)
	{
		int isEvent;

		Pump();
		isEvent = Peep(1, SDL_PEEKEVENT, mask);

		if(isEvent == 1)
			HandleEvents(handler);

		return isEvent;
	}

	bool Event::PeekActive(Handle &handler)
	{
		return Peek(handler, SDL_ACTIVEEVENTMASK);
	}

	bool Event::PeekKeyPressed(Handle &handler)
	{
		return Peek(handler, SDL_KEYDOWNMASK);
	}

	bool Event::PeekKeyReleased(Handle &handler)
	{
		return Peek(handler, SDL_KEYUPMASK);
	}

	bool Event::PeekMouseMotion(Handle &handler)
	{
		return Peek(handler, SDL_MOUSEMOTIONMASK);
	}

	bool Event::PeekMouseButtonDown(Handle &handler)
	{
		return Peek(handler, SDL_MOUSEBUTTONDOWNMASK);
	}

	bool Event::PeekMouseButtonUp(Handle &handler)
	{
		return Peek(handler, SDL_MOUSEBUTTONUPMASK);
	}

	bool Event::PeekMouse(Handle &handler)
	{
		return Peek(handler, SDL_MOUSEEVENTMASK);
	}

	bool Event::PeekJoyAxisMontion(Handle &handler)
	{
		return Peek(handler, SDL_JOYAXISMOTIONMASK);
	}

	bool Event::PeekJoyBallMotion(Handle &handler)
	{
		return Peek(handler, SDL_JOYBALLMOTIONMASK);
	}

	bool Event::PeekJoyHatMotion(Handle &handler)
	{
		return Peek(handler, SDL_JOYHATMOTIONMASK);
	}

	bool Event::PeekJoyButtonDown(Handle &handler)
	{
		return Peek(handler, SDL_JOYBUTTONDOWNMASK);
	}

	bool Event::PeekJoyButtonUp(Handle &handler)
	{
		return Peek(handler, SDL_JOYBUTTONUPMASK);
	}

	bool Event::PeekJoy(Handle &handler)
	{
		return Peek(handler, SDL_JOYEVENTMASK);
	}

	bool Event::PeekVideoResize(Handle &handler)
	{
		return Peek(handler, SDL_VIDEORESIZEMASK);
	}

	bool Event::PeekVideoExpose(Handle &handler)
	{
		return Peek(handler, SDL_VIDEOEXPOSEMASK);
	}

	bool Event::PeekQuit(Handle &handler)
	{
		return Peek(handler, SDL_QUITMASK);
	}

	bool Event::PeekSysWM(Handle &handler)
	{
		return Peek(handler, SDL_SYSWMEVENTMASK);
	}

	bool Event::Push(ActiveEvent &event)
	{
		SDL_Event e;
		e.active = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(KeyboardEvent &event)
	{
		SDL_Event e;
		e.key = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(MouseMotionEvent &event)
	{
		SDL_Event e;
		e.motion = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(MouseButtonEvent &event)
	{
		SDL_Event e;
		e.button = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(JoyAxisEvent &event)
	{
		SDL_Event e;
		e.jaxis = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(JoyButtonEvent &event)
	{
		SDL_Event e;
		e.jbutton = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(JoyHatEvent &event)
	{
		SDL_Event e;
		e.jhat = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(JoyBallEvent &event)
	{
		SDL_Event e;
		e.jball = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(ResizeEvent &event)
	{
		SDL_Event e;
		e.resize = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(ExposeEvent &event)
	{
		SDL_Event e;
		e.expose = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(SysWMEvent &event)
	{
		SDL_Event e;
		e.syswm = event;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(UserEvent &event)
	{
		SDL_Event e;
		e.type = SDL_USEREVENT;
		e.user.code = event.code;
		e.user.data1 = event.data1;
		e.user.data2 = event.data2;

		if(SDL_PushEvent(&e) == 0)
			return true;
		else
			return false;
	}

	bool Event::Push(QuitEvent &event)
	{
		m_Event.quit = event;

		if(SDL_PushEvent(&m_Event) == 0)
			return true;
		else
			return false;
	}

	void Event::Poll(Handle &handler)
	{
		while(SDL_PollEvent(&m_Event))
		{
			if(!HandleEvents(handler))
				handler.All(m_Event);
		}
	}

	bool Event::HandleEvents(Handle &handler)
	{
		bool handled = false;

		switch(m_Event.type)
		{
			case SDL_ACTIVEEVENT:
				handled = handler.Active(m_Event.active.gain, m_Event.active.state);
				break;
			case SDL_KEYDOWN:
				handled = handler.KeyPressed(m_Event.key.keysym);
				break;
			case SDL_KEYUP:
				handled = handler.KeyReleased(m_Event.key.keysym);
				break;
			case SDL_MOUSEMOTION:
				handled = handler.MouseMotion(m_Event.motion.state, m_Event.motion.x, m_Event.motion.y, m_Event.motion.xrel, m_Event.motion.yrel);
				break;
			case SDL_MOUSEBUTTONDOWN:
				handled = handler.MouseButtonPressed(m_Event.button.button, m_Event.button.x, m_Event.button.y);
				break;
			case SDL_MOUSEBUTTONUP:
				handled = handler.MouseButtonReleased(m_Event.button.button, m_Event.button.x, m_Event.button.y);
				break;
			case SDL_JOYAXISMOTION:
				handled = handler.JoyAxis(m_Event.jaxis.which, m_Event.jaxis.axis, m_Event.jaxis.value);
				break;
			case SDL_JOYBALLMOTION:
				handled = handler.JoyBall(m_Event.jball.which, m_Event.jball.ball, m_Event.jball.xrel, m_Event.jball.yrel);
				break;
			case SDL_JOYHATMOTION:
				handled = handler.JoyHat(m_Event.jhat.which, m_Event.jhat.hat, m_Event.jhat.value);
				break;
			case SDL_JOYBUTTONDOWN:
				handled = handler.JoyButtonPressed(m_Event.jbutton.which, m_Event.jbutton.button);
				break;
			case SDL_JOYBUTTONUP:
				handled = handler.JoyButtonReleased(m_Event.jbutton.which, m_Event.jbutton.button);
				break;
			case SDL_QUIT:
				handled = handler.Quit();
				break;
			case SDL_SYSWMEVENT:
				handled = handler.SysWM(m_Event.syswm.msg);
				break;
			case SDL_VIDEORESIZE:
				handled = handler.VideoResize(m_Event.resize.w, m_Event.resize.h);
				break;
			case SDL_VIDEOEXPOSE:
				handled = handler.VideoExpose();
				break;
			case SDL_USEREVENT:
				handled = handler.User(m_Event.user.code, m_Event.user.data1, m_Event.user.data2);
				break;
		}

		return handled;
	}
}

