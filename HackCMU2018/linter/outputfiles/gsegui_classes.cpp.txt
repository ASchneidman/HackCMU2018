4486
8, 12, 12, 12, 12, 13, 14, 14, 14, 15, 15, 16, 17, 18, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 24, 24, 24, 25, 25, 26, 26, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 38, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 43, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 48, 48, 49, 49, 50, 51, 52, 52, 53, 53, 53, 54, 54, 55, 56, 56, 57, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 61, 62, 62, 63, 64, 65, 65, 66, 67, 67, 68, 68, 69, 69, 70, 70, 70, 71, 71, 72, 72, 73, 73, 73, 74, 74, 75, 75, 76, 76, 76, 77, 77, 78, 78, 79, 79, 79, 80, 80, 81, 81, 82, 82, 82, 83, 83, 84, 84, 85, 85, 85, 86, 86, 87, 87, 88, 88, 88, 89, 89, 90, 90, 91, 91, 91, 92, 92, 93, 93, 94, 94, 94, 95, 95, 96, 96, 97, 97, 97, 98, 98, 99, 99, 100, 100, 100, 101, 101, 102, 102, 102, 103, 103, 104, 105, 106, 106, 107, 108, 108, 109, 109, 110, 110, 111, 111, 111, 112, 112, 113, 113, 113, 114, 114, 115, 115, 115, 116, 116, 117, 118, 118, 119, 119, 120, 120, 121, 121, 121, 122, 122, 123, 123, 123, 124, 124, 125, 125, 125, 126, 126, 127, 127, 127, 128, 128, 129, 129, 129, 130, 131, 131, 131, 135, 138, 138, 138, 138, 139, 140, 140, 140, 141, 141, 141, 142, 142, 142, 142, 143, 143, 144, 145, 146, 146, 147, 148, 148, 149, 149, 150, 150, 151, 151, 151, 151, 152, 152, 153, 153, 153, 154, 154, 155, 155, 155, 156, 156, 157, 158, 159, 159, 160, 161, 161, 162, 162, 163, 164, 165, 165, 166, 166, 167, 167, 167, 168, 168, 168, 168, 169, 169, 170, 170, 170, 171, 171, 172, 173, 174, 174, 175, 175, 176, 176, 176, 177, 177, 177, 177, 178, 178, 179, 179, 179, 180, 180, 181, 181, 182, 182, 182, 183, 183, 184, 184, 184, 185, 185, 186, 187, 188, 188, 189, 189, 190, 190, 190, 191, 191, 191, 191, 192, 192, 193, 193, 193, 194, 194, 195, 195, 196, 196, 196, 197, 197, 198, 198, 198, 199, 199, 200, 201, 202, 202, 203, 203, 204, 204, 204, 205, 205, 205, 205, 206, 206, 207, 207, 207, 208, 208, 209, 209, 210, 210, 210, 211, 211, 212, 212, 212, 213, 213, 214, 214, 214, 215, 215, 216, 217, 218, 218, 219, 219, 220, 220, 220, 221, 221, 221, 221, 222, 222, 223, 223, 223, 224, 224, 225, 225, 226, 226, 226, 227, 227, 228, 229, 230, 230, 231, 231, 232, 232, 232, 233, 233, 233, 233, 234, 234, 235, 235, 235, 236, 236, 237, 237, 238, 238, 238, 239, 239, 240, 240, 240, 241, 241, 242, 243, 244, 244, 245, 245, 246, 246, 246, 247, 247, 247, 247, 248, 248, 249, 249, 249, 250, 250, 251, 251, 252, 252, 252, 253, 253, 254, 254, 254, 255, 255, 256, 256, 256, 257, 257, 258, 258, 258, 259, 259, 260, 261, 261, 262, 262, 263, 264, 265, 265, 266, 266, 267, 267, 267, 268, 268, 268, 268, 269, 269, 270, 270, 270, 271, 271, 272, 273, 274, 274, 275, 275, 276, 276, 276, 277, 277, 277, 277, 278, 278, 279, 279, 279, 280, 280, 281, 281, 282, 282, 282, 283, 283, 284, 284, 284, 285, 285, 286, 287, 288, 288, 289, 289, 290, 290, 290, 291, 291, 291, 291, 292, 292, 293, 293, 293, 294, 294, 295, 295, 296, 296, 296, 297, 297, 298, 298, 298, 299, 299, 300, 301, 302, 302, 303, 303, 304, 304, 304, 305, 305, 305, 305, 306, 306, 307, 307, 307, 308, 308, 309, 309, 310, 310, 310, 311, 311, 312, 312, 312, 313, 313, 314, 315, 316, 316, 317, 317, 318, 318, 318, 319, 319, 319, 319, 320, 320, 321, 321, 321, 322, 322, 323, 323, 324, 324, 324, 325, 325, 326, 326, 326, 327, 327, 328, 328, 328, 329, 329, 330, 331, 332, 332, 333, 333, 334, 334, 334, 335, 335, 335, 335, 336, 336, 337, 337, 337, 338, 338, 339, 340, 341, 341, 342, 342, 343, 343, 343, 344, 344, 344, 344, 345, 345, 346, 346, 346, 347, 347, 348, 348, 349, 349, 349, 350, 350, 351, 351, 351, 352, 352, 353, 354, 355, 355, 356, 356, 357, 357, 357, 358, 358, 358, 358, 359, 359, 360, 360, 360, 361, 361, 362, 362, 363, 363, 363, 364, 364, 365, 365, 365, 366, 366, 367, 368, 369, 369, 370, 370, 371, 371, 371, 372, 372, 372, 372, 373, 373, 374, 374, 374, 375, 375, 376, 376, 377, 377, 377, 378, 378, 379, 379, 379, 380, 380, 381, 381, 382, 382, 382, 383, 383, 384, 384, 384, 385, 385, 386, 387, 388, 388, 389, 389, 390, 390, 390, 391, 391, 391, 391, 392, 392, 393, 393, 393, 394, 394, 395, 396, 397, 397, 398, 398, 399, 399, 399, 400, 400, 400, 400, 401, 401, 402, 402, 402, 403, 403, 404, 404, 405, 405, 405, 406, 406, 407, 407, 407, 408, 408, 409, 410, 411, 411, 412, 412, 413, 413, 413, 414, 414, 414, 414, 415, 415, 416, 416, 416, 417, 417, 418, 418, 419, 419, 419, 420, 420, 421, 421, 421, 422, 422, 423, 424, 425, 425, 426, 426, 427, 427, 427, 428, 428, 428, 428, 429, 429, 430, 430, 430, 431, 431, 432, 432, 433, 433, 433, 434, 434, 435, 435, 435, 436, 436, 437, 438, 439, 439, 440, 440, 441, 441, 441, 442, 442, 442, 442, 443, 443, 444, 444, 444, 445, 445, 446, 446, 447, 447, 447, 448, 448, 449, 449, 449, 450, 450, 451, 451, 451, 452, 452, 453, 453, 453, 454, 454, 455, 456, 457, 457, 458, 459, 459, 460, 460, 461, 462, 463, 463, 464, 464, 465, 465, 465, 466, 466, 466, 466, 467, 467, 468, 468, 468, 469, 469, 470, 470, 471, 471, 471, 472, 472, 473, 473, 473, 474, 474, 475, 476, 477, 477, 478, 478, 479, 479, 479, 480, 480, 480, 480, 481, 481, 482, 482, 482, 483, 483, 484, 484, 485, 485, 485, 486, 486, 487, 487, 487, 488, 488, 489, 490, 491, 491, 492, 492, 493, 493, 493, 494, 494, 494, 494, 495, 495, 496, 496, 496, 497, 497, 498, 498, 499, 499, 499, 500, 500, 501, 501, 501, 502, 502, 503, 504, 505, 505, 506, 506, 507, 507, 507, 508, 508, 508, 508, 509, 509, 510, 510, 510, 511, 511, 512, 512, 513, 513, 513, 514, 514, 515, 515, 515, 516, 516, 517, 518, 519, 519, 520, 520, 521, 521, 521, 522, 522, 522, 522, 523, 523, 524, 524, 524, 525, 525, 526, 526, 527, 527, 527, 528, 528, 529, 529, 529, 530, 530, 531, 531, 531, 532, 532, 533, 534, 534, 535, 535, 536, 537, 538, 538, 539, 539, 540, 540, 540, 541, 541, 541, 541, 542, 542, 543, 543, 543, 544, 544, 545, 545, 546, 546, 546, 547, 547, 548, 548, 548, 549, 549, 550, 551, 552, 552, 553, 553, 554, 554, 554, 555, 555, 555, 555, 556, 556, 557, 557, 557, 558, 558, 559, 559, 560, 560, 560, 561, 561, 562, 562, 562, 563, 563, 564, 565, 566, 566, 567, 567, 568, 568, 568, 569, 569, 569, 569, 570, 570, 571, 571, 571, 572, 572, 573, 573, 574, 574, 574, 575, 575, 576, 576, 576, 577, 577, 578, 579, 580, 580, 581, 581, 582, 582, 582, 583, 583, 583, 583, 584, 584, 585, 585, 585, 586, 586, 587, 587, 588, 588, 588, 589, 589, 590, 590, 590, 591, 591, 592, 592, 593, 593, 593, 594, 594, 595, 595, 595, 596, 596, 597, 597, 597, 598, 598, 599, 599, 599, 600, 600, 601, 601, 601, 602, 603, 603, 604, 605, 605, 605, 606, 609, 610, 611, 611, 611, 611, 614, 614, 614, 614, 615, 616, 616, 616, 617, 617, 617, 617, 618, 618, 619, 620, 621, 621, 622, 623, 623, 624, 624, 625, 625, 626, 626, 626, 627, 627, 628, 628, 628, 629, 629, 630, 630, 630, 631, 631, 632, 633, 634, 634, 635, 636, 636, 637, 637, 638, 639, 640, 640, 641, 641, 642, 642, 642, 643, 643, 643, 643, 644, 644, 645, 645, 645, 646, 646, 647, 648, 649, 649, 650, 650, 651, 651, 651, 652, 652, 652, 652, 653, 653, 654, 654, 654, 655, 655, 656, 656, 657, 657, 657, 658, 658, 658, 659, 659, 660, 660, 660, 661, 661, 662, 663, 664, 664, 665, 665, 666, 666, 666, 667, 667, 667, 667, 668, 668, 669, 669, 669, 670, 670, 671, 671, 672, 672, 672, 673, 673, 673, 674, 674, 675, 675, 675, 676, 676, 677, 678, 679, 679, 680, 680, 681, 681, 681, 682, 682, 682, 682, 683, 683, 684, 684, 684, 685, 685, 686, 686, 687, 687, 687, 688, 688, 688, 689, 689, 690, 690, 690, 691, 691, 692, 692, 692, 693, 693, 694, 695, 696, 696, 697, 697, 698, 698, 698, 699, 699, 699, 699, 700, 700, 701, 701, 701, 702, 702, 703, 704, 705, 705, 706, 706, 707, 707, 707, 708, 708, 708, 708, 709, 709, 710, 710, 710, 711, 711, 712, 712, 713, 713, 713, 714, 714, 714, 715, 715, 716, 716, 716, 717, 717, 718, 719, 720, 720, 721, 721, 722, 722, 722, 723, 723, 723, 723, 724, 724, 725, 725, 725, 726, 726, 727, 727, 728, 728, 728, 729, 729, 729, 730, 730, 731, 731, 731, 732, 732, 733, 734, 735, 735, 736, 736, 737, 737, 737, 738, 738, 738, 738, 739, 739, 740, 740, 740, 741, 741, 742, 742, 743, 743, 743, 744, 744, 744, 745, 745, 746, 746, 746, 747, 747, 748, 748, 748, 749, 749, 750, 750, 750, 751, 751, 752, 753, 753, 754, 754, 755, 756, 757, 757, 758, 758, 759, 759, 759, 760, 760, 760, 760, 761, 761, 762, 762, 762, 763, 763, 764, 765, 766, 766, 767, 767, 768, 768, 768, 769, 769, 769, 769, 770, 770, 771, 771, 771, 772, 772, 773, 773, 774, 774, 774, 775, 775, 775, 776, 776, 777, 777, 777, 778, 778, 779, 780, 781, 781, 782, 782, 783, 783, 783, 784, 784, 784, 784, 785, 785, 786, 786, 786, 787, 787, 788, 788, 789, 789, 789, 790, 790, 790, 791, 791, 792, 792, 792, 793, 793, 794, 795, 796, 796, 797, 797, 798, 798, 798, 799, 799, 799, 799, 800, 800, 801, 801, 801, 802, 802, 803, 803, 804, 804, 804, 805, 805, 805, 806, 806, 807, 807, 807, 808, 808, 809, 810, 811, 811, 812, 812, 813, 813, 813, 814, 814, 814, 814, 815, 815, 816, 816, 816, 817, 817, 818, 818, 819, 819, 819, 820, 820, 820, 821, 821, 822, 822, 822, 823, 823, 824, 824, 824, 825, 825, 826, 827, 828, 828, 829, 829, 830, 830, 830, 831, 831, 831, 831, 832, 832, 833, 833, 833, 834, 834, 835, 836, 837, 837, 838, 838, 839, 839, 839, 840, 840, 840, 840, 841, 841, 842, 842, 842, 843, 843, 844, 844, 845, 845, 845, 846, 846, 846, 847, 847, 848, 848, 848, 849, 849, 850, 851, 852, 852, 853, 853, 854, 854, 854, 855, 855, 855, 855, 856, 856, 857, 857, 857, 858, 858, 859, 859, 860, 860, 860, 861, 861, 861, 862, 862, 863, 863, 863, 864, 864, 865, 866, 867, 867, 868, 868, 869, 869, 869, 870, 870, 870, 870, 871, 871, 872, 872, 872, 873, 873, 874, 874, 875, 875, 875, 876, 876, 876, 877, 877, 878, 878, 878, 879, 879, 880, 880, 881, 881, 881, 882, 882, 883, 883, 883, 884, 884, 885, 886, 887, 887, 888, 888, 889, 889, 889, 890, 890, 890, 890, 891, 891, 892, 892, 892, 893, 893, 894, 895, 896, 896, 897, 897, 898, 898, 898, 899, 899, 899, 899, 900, 900, 901, 901, 901, 902, 902, 903, 903, 904, 904, 904, 905, 905, 905, 906, 906, 907, 907, 907, 908, 908, 909, 910, 911, 911, 912, 912, 913, 913, 913, 914, 914, 914, 914, 915, 915, 916, 916, 916, 917, 917, 918, 918, 919, 919, 919, 920, 920, 920, 921, 921, 922, 922, 922, 923, 923, 924, 925, 926, 926, 927, 927, 928, 928, 928, 929, 929, 929, 929, 930, 930, 931, 931, 931, 932, 932, 933, 933, 934, 934, 934, 935, 935, 935, 936, 936, 937, 937, 937, 938, 938, 939, 940, 941, 941, 942, 942, 943, 943, 943, 944, 944, 944, 944, 945, 945, 946, 946, 946, 947, 947, 948, 948, 949, 949, 949, 950, 950, 950, 951, 951, 952, 952, 952, 953, 953, 954, 954, 954, 955, 955, 956, 956, 956, 957, 957, 958, 959, 959, 960, 960, 961, 962, 963, 963, 964, 964, 965, 965, 965, 966, 966, 966, 966, 967, 967, 968, 968, 968, 969, 969, 970, 971, 972, 972, 973, 973, 974, 974, 974, 975, 975, 975, 975, 976, 976, 977, 977, 977, 978, 978, 979, 979, 980, 980, 980, 981, 981, 981, 982, 982, 983, 983, 983, 984, 984, 985, 986, 987, 987, 988, 988, 989, 989, 989, 990, 990, 990, 990, 991, 991, 992, 992, 992, 993, 993, 994, 994, 995, 995, 995, 996, 996, 996, 997, 997, 998, 998, 998, 999, 999, 1000, 1001, 1002, 1002, 1003, 1003, 1004, 1004, 1004, 1005, 1005, 1005, 1005, 1006, 1006, 1007, 1007, 1007, 1008, 1008, 1009, 1009, 1010, 1010, 1010, 1011, 1011, 1011, 1012, 1012, 1013, 1013, 1013, 1014, 1014, 1015, 1016, 1017, 1017, 1018, 1018, 1019, 1019, 1019, 1020, 1020, 1020, 1020, 1021, 1021, 1022, 1022, 1022, 1023, 1023, 1024, 1024, 1025, 1025, 1025, 1026, 1026, 1026, 1027, 1027, 1028, 1028, 1028, 1029, 1029, 1030, 1030, 1030, 1031, 1031, 1032, 1033, 1034, 1034, 1035, 1035, 1036, 1036, 1036, 1037, 1037, 1037, 1037, 1038, 1038, 1039, 1039, 1039, 1040, 1040, 1041, 1042, 1043, 1043, 1044, 1044, 1045, 1045, 1045, 1046, 1046, 1046, 1046, 1047, 1047, 1048, 1048, 1048, 1049, 1049, 1050, 1050, 1051, 1051, 1051, 1052, 1052, 1052, 1053, 1053, 1054, 1054, 1054, 1055, 1055, 1056, 1057, 1058, 1058, 1059, 1059, 1060, 1060, 1060, 1061, 1061, 1061, 1061, 1062, 1062, 1063, 1063, 1063, 1064, 1064, 1065, 1065, 1066, 1066, 1066, 1067, 1067, 1067, 1068, 1068, 1069, 1069, 1069, 1070, 1070, 1071, 1072, 1073, 1073, 1074, 1074, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 1077, 1077, 1078, 1078, 1078, 1079, 1079, 1080, 1080, 1081, 1081, 1081, 1082, 1082, 1082, 1083, 1083, 1084, 1084, 1084, 1085, 1085, 1086, 1086, 1087, 1087, 1087, 1088, 1088, 1089, 1089, 1089, 1090, 1090, 1091, 1092, 1093, 1093, 1094, 1094, 1095, 1095, 1095, 1096, 1096, 1096, 1096, 1097, 1097, 1098, 1098, 1098, 1099, 1099, 1100, 1101, 1102, 1102, 1103, 1103, 1104, 1104, 1104, 1105, 1105, 1105, 1105, 1106, 1106, 1107, 1107, 1107, 1108, 1108, 1109, 1109, 1110, 1110, 1110, 1111, 1111, 1111, 1112, 1112, 1113, 1113, 1113, 1114, 1114, 1115, 1116, 1117, 1117, 1118, 1118, 1119, 1119, 1119, 1120, 1120, 1120, 1120, 1121, 1121, 1122, 1122, 1122, 1123, 1123, 1124, 1124, 1125, 1125, 1125, 1126, 1126, 1126, 1127, 1127, 1128, 1128, 1128, 1129, 1129, 1130, 1131, 1132, 1132, 1133, 1133, 1134, 1134, 1134, 1135, 1135, 1135, 1135, 1136, 1136, 1137, 1137, 1137, 1138, 1138, 1139, 1139, 1140, 1140, 1140, 1141, 1141, 1141, 1142, 1142, 1143, 1143, 1143, 1144, 1144, 1145, 1145, 1146, 1146, 1146, 1147, 1147, 1148, 1148, 1148, 1149, 1149, 1150, 1150, 1150, 1151, 1151, 1152, 1153, 1153, 1154, 1154, 1155, 1156, 1157, 1157, 1158, 1158, 1159, 1159, 1159, 1160, 1160, 1160, 1160, 1161, 1161, 1162, 1162, 1162, 1163, 1163, 1164, 1164, 1165, 1165, 1165, 1166, 1166, 1166, 1167, 1167, 1168, 1168, 1168, 1169, 1169, 1170, 1171, 1172, 1172, 1173, 1173, 1174, 1174, 1174, 1175, 1175, 1175, 1175, 1176, 1176, 1177, 1177, 1177, 1178, 1178, 1179, 1179, 1180, 1180, 1180, 1181, 1181, 1181, 1182, 1182, 1183, 1183, 1183, 1184, 1184, 1185, 1186, 1187, 1187, 1188, 1188, 1189, 1189, 1189, 1190, 1190, 1190, 1190, 1191, 1191, 1192, 1192, 1192, 1193, 1193, 1194, 1194, 1195, 1195, 1195, 1196, 1196, 1196, 1197, 1197, 1198, 1198, 1198, 1199, 1199, 1200, 1200, 1200, 1201, 1201, 1202, 1202, 1202, 1203, 1203, 1204, 1204, 1204, 1205, 1206, 1209, 1212, 1212, 1212, 1212, 1213, 1214, 1214, 1214, 1215, 1215, 1216, 1217, 1218, 1218, 1219, 1219, 1220, 1220, 1220, 1221, 1221, 1222, 1222, 1222, 1223, 1223, 1224, 1224, 1224, 1225, 1229, 1232, 1232, 1232, 1232, 1233, 1234, 1234, 1234, 1235, 1235, 1236, 1237, 1238, 1238, 1239, 1239, 1240, 1240, 1240, 1241, 1241, 1242, 1242, 1242, 1243, 1243, 1244, 1244, 1244, 1245, 1249, 1252, 1252, 1252, 1252, 1253, 1254, 1254, 1254, 1255, 1255, 1256, 1257, 1258, 1258, 1259, 1260, 1261, 1261, 1262, 1262, 1262, 1262, 1262, 1263, 1263, 1264, 1264, 1264, 1264, 1265, 1265, 1266, 1266, 1266, 1267, 1267, 1268, 1268, 1268, 1269, 1269, 1270, 1271, 1272, 1272, 1273, 1273, 1274, 1274, 1274, 1275, 1275, 1276, 1276, 1276, 1277, 1277, 1278, 1278, 1278, 1279, 1279, 1280, 1281, 1282, 1282, 1283, 1283, 1283, 1283, 1283, 1284, 1284, 1285, 1285, 1285, 1286, 1286, 1287, 1287, 1288, 1288, 1288, 1289, 1289, 1290, 1290, 1291, 1291, 1291, 1292, 1292, 1293, 1293, 1294, 1294, 1294, 1295, 1295, 1296, 1296, 1297, 1297, 1297, 1298, 1298, 1299, 1299, 1299, 1300, 1300, 1301, 1301, 1301, 1302, 1303, 1303, 1304, 1305, 1305, 1305, 1305, 1309, 1310, 1311, 1311, 1311, 1311, 1314, 1314, 1314, 1314, 1315, 1316, 1316, 1316, 1317, 1317, 1318, 1319, 1320, 1320, 1321, 1322, 1323, 1323, 1324, 1324, 1324, 1324, 1324, 1325, 1325, 1326, 1326, 1326, 1326, 1327, 1327, 1328, 1328, 1328, 1329, 1329, 1330, 1330, 1330, 1331, 1331, 1332, 1333, 1334, 1334, 1335, 1335, 1336, 1336, 1336, 1337, 1337, 1338, 1338, 1338, 1339, 1339, 1340, 1340, 1340, 1341, 1341, 1342, 1343, 1344, 1344, 1345, 1345, 1345, 1345, 1345, 1346, 1346, 1347, 1347, 1347, 1348, 1348, 1349, 1349, 1350, 1350, 1350, 1351, 1351, 1352, 1352, 1353, 1353, 1353, 1354, 1354, 1355, 1355, 1356, 1356, 1356, 1357, 1357, 1358, 1358, 1359, 1359, 1359, 1360, 1360, 1361, 1361, 1361, 1362, 1362, 1363, 1363, 1363, 1364, 1365, 1365, 1366, 1367, 1367, 1367, 1367, 1371, 1372, 1373, 1373, 1373, 1373, 1376, 1376, 1376, 1376, 1377, 1378, 1378, 1378, 1379, 1379, 1379, 1379, 1380, 1380, 1381, 1382, 1383, 1383, 1384, 1385, 1385, 1386, 1386, 1387, 1388, 1389, 1389, 1390, 1390, 1391, 1391, 1391, 1392, 1392, 1393, 1393, 1394, 1394, 1394, 1395, 1395, 1395, 1395, 1396, 1396, 1397, 1397, 1397, 1398, 1398, 1399, 1399, 1400, 1400, 1400, 1401, 1401, 1401, 1401, 1402, 1402, 1403, 1403, 1403, 1404, 1404, 1405, 1405, 1406, 1406, 1406, 1407, 1407, 1407, 1407, 1408, 1408, 1409, 1409, 1409, 1410, 1410, 1411, 1411, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1414, 1414, 1415, 1415, 1415, 1416, 1416, 1417, 1417, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1420, 1420, 1421, 1421, 1421, 1422, 1422, 1423, 1423, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1426, 1426, 1427, 1427, 1427, 1428, 1428, 1429, 1429, 1430, 1430, 1430, 1431, 1431, 1431, 1431, 1432, 1432, 1433, 1433, 1433, 1434, 1434, 1435, 1435, 1436, 1436, 1436, 1437, 1437, 1437, 1437, 1438, 1438, 1439, 1439, 1439, 1440, 1440, 1441, 1441, 1442, 1442, 1442, 1443, 1443, 1443, 1443, 1444, 1444, 1445, 1445, 1445, 1446, 1446, 1447, 1447, 1447, 1448, 1448, 1449, 1449, 1449, 1450, 1450, 1451, 1452, 1452, 1453, 1453, 1454, 1455, 1456, 1456, 1457, 1457, 1458, 1458, 1458, 1459, 1459, 1460, 1460, 1461, 1461, 1461, 1462, 1462, 1462, 1462, 1463, 1463, 1464, 1464, 1464, 1465, 1465, 1466, 1466, 1467, 1467, 1467, 1468, 1468, 1468, 1468, 1469, 1469, 1470, 1470, 1470, 1471, 1471, 1472, 1472, 1473, 1473, 1473, 1474, 1474, 1474, 1474, 1475, 1475, 1476, 1476, 1476, 1477, 1477, 1478, 1478, 1479, 1479, 1479, 1480, 1480, 1480, 1480, 1481, 1481, 1482, 1482, 1482, 1483, 1483, 1484, 1484, 1485, 1485, 1485, 1486, 1486, 1486, 1486, 1487, 1487, 1488, 1488, 1488, 1489, 1489, 1490, 1490, 1491, 1491, 1491, 1492, 1492, 1492, 1492, 1493, 1493, 1494, 1494, 1494, 1495, 1495, 1496, 1496, 1497, 1497, 1497, 1498, 1498, 1498, 1498, 1499, 1499, 1500, 1500, 1500, 1501, 1501, 1502, 1502, 1503, 1503, 1503, 1504, 1504, 1504, 1504, 1505, 1505, 1506, 1506, 1506, 1507, 1507, 1508, 1508, 1509, 1509, 1509, 1510, 1510, 1510, 1510, 1511, 1511, 1512, 1512, 1512, 1513, 1513, 1514, 1514, 1515, 1515, 1515, 1516, 1516, 1516, 1516, 1517, 1517, 1518, 1518, 1518, 1519, 1519, 1520, 1520, 1521, 1521, 1521, 1522, 1522, 1522, 1522, 1523, 1523, 1524, 1524, 1524, 1525, 1525, 1526, 1526, 1527, 1527, 1527, 1528, 1528, 1528, 1528, 1529, 1529, 1530, 1530, 1530, 1531, 1531, 1532, 1532, 1533, 1533, 1533, 1534, 1534, 1534, 1534, 1535, 1535, 1536, 1536, 1536, 1537, 1537, 1538, 1538, 1539, 1539, 1539, 1540, 1540, 1540, 1540, 1541, 1541, 1542, 1542, 1542, 1543, 1543, 1544, 1544, 1544, 1545, 1545, 1546, 1546, 1546, 1547, 1547, 1548, 1549, 1549, 1550, 1550, 1551, 1552, 1553, 1553, 1554, 1554, 1555, 1555, 1555, 1556, 1556, 1557, 1557, 1558, 1558, 1558, 1559, 1559, 1559, 1559, 1560, 1560, 1561, 1561, 1561, 1562, 1562, 1563, 1563, 1564, 1564, 1564, 1565, 1565, 1565, 1565, 1566, 1566, 1567, 1567, 1567, 1568, 1568, 1569, 1569, 1570, 1570, 1570, 1571, 1571, 1571, 1571, 1572, 1572, 1573, 1573, 1573, 1574, 1574, 1575, 1575, 1576, 1576, 1576, 1577, 1577, 1577, 1577, 1578, 1578, 1579, 1579, 1579, 1580, 1580, 1581, 1581, 1582, 1582, 1582, 1583, 1583, 1584, 1584, 1585, 1585, 1585, 1586, 1586, 1586, 1586, 1587, 1587, 1588, 1588, 1588, 1589, 1589, 1590, 1590, 1591, 1591, 1591, 1592, 1592, 1592, 1592, 1593, 1593, 1594, 1594, 1594, 1595, 1595, 1596, 1596, 1597, 1597, 1597, 1598, 1598, 1598, 1598, 1599, 1599, 1600, 1600, 1600, 1601, 1601, 1602, 1602, 1603, 1603, 1603, 1604, 1604, 1604, 1604, 1605, 1605, 1606, 1606, 1606, 1607, 1607, 1608, 1608, 1609, 1609, 1609, 1610, 1610, 1611, 1611, 1612, 1612, 1612, 1613, 1613, 1613, 1613, 1614, 1614, 1615, 1615, 1615, 1616, 1616, 1617, 1617, 1618, 1618, 1618, 1619, 1619, 1619, 1619, 1620, 1620, 1621, 1621, 1621, 1622, 1622, 1623, 1623, 1624, 1624, 1624, 1625, 1625, 1625, 1625, 1626, 1626, 1627, 1627, 1627, 1628, 1628, 1629, 1629, 1630, 1630, 1630, 1631, 1631, 1631, 1631, 1632, 1632, 1633, 1633, 1633, 1634, 1634, 1635, 1635, 1636, 1636, 1636, 1637, 1637, 1638, 1638, 1639, 1639, 1639, 1640, 1640, 1640, 1640, 1641, 1641, 1642, 1642, 1642, 1643, 1643, 1644, 1644, 1645, 1645, 1645, 1646, 1646, 1646, 1646, 1647, 1647, 1648, 1648, 1648, 1649, 1649, 1650, 1650, 1651, 1651, 1651, 1652, 1652, 1652, 1652, 1653, 1653, 1654, 1654, 1654, 1655, 1655, 1656, 1656, 1657, 1657, 1657, 1658, 1658, 1658, 1658, 1659, 1659, 1660, 1660, 1660, 1661, 1661, 1662, 1662, 1663, 1663, 1663, 1664, 1664, 1665, 1665, 1666, 1666, 1666, 1667, 1667, 1667, 1667, 1668, 1668, 1669, 1669, 1669, 1670, 1670, 1671, 1671, 1672, 1672, 1672, 1673, 1673, 1673, 1673, 1674, 1674, 1675, 1675, 1675, 1676, 1676, 1677, 1677, 1678, 1678, 1678, 1679, 1679, 1679, 1679, 1680, 1680, 1681, 1681, 1681, 1682, 1682, 1683, 1683, 1684, 1684, 1684, 1685, 1685, 1685, 1685, 1686, 1686, 1687, 1687, 1687, 1688, 1688, 1689, 1689, 1690, 1690, 1690, 1691, 1691, 1692, 1692, 1693, 1693, 1693, 1694, 1694, 1694, 1694, 1695, 1695, 1696, 1696, 1696, 1697, 1697, 1698, 1698, 1699, 1699, 1699, 1700, 1700, 1700, 1700, 1701, 1701, 1702, 1702, 1702, 1703, 1703, 1704, 1704, 1705, 1705, 1705, 1706, 1706, 1706, 1706, 1707, 1707, 1708, 1708, 1708, 1709, 1709, 1710, 1710, 1711, 1711, 1711, 1712, 1712, 1712, 1712, 1713, 1713, 1714, 1714, 1714, 1715, 1715, 1716, 1716, 1717, 1717, 1717, 1718, 1718, 1719, 1719, 1720, 1720, 1720, 1721, 1721, 1721, 1721, 1722, 1722, 1723, 1723, 1723, 1724, 1724, 1725, 1725, 1726, 1726, 1726, 1727, 1727, 1727, 1727, 1728, 1728, 1729, 1729, 1729, 1730, 1730, 1731, 1731, 1732, 1732, 1732, 1733, 1733, 1733, 1733, 1734, 1734, 1735, 1735, 1735, 1736, 1736, 1737, 1737, 1738, 1738, 1738, 1739, 1739, 1739, 1739, 1740, 1740, 1741, 1741, 1741, 1742, 1742, 1743, 1743, 1744, 1744, 1744, 1745, 1745, 1746, 1746, 1747, 1747, 1747, 1748, 1748, 1748, 1748, 1749, 1749, 1750, 1750, 1750, 1751, 1751, 1752, 1752, 1753, 1753, 1753, 1754, 1754, 1754, 1754, 1755, 1755, 1756, 1756, 1756, 1757, 1757, 1758, 1758, 1759, 1759, 1759, 1760, 1760, 1760, 1760, 1761, 1761, 1762, 1762, 1762, 1763, 1763, 1764, 1764, 1765, 1765, 1765, 1766, 1766, 1766, 1766, 1767, 1767, 1768, 1768, 1768, 1769, 1769, 1770, 1770, 1770, 1771, 1771, 1772, 1772, 1772, 1773, 1773, 1774, 1774, 1774, 1775, 1776, 1776, 1776, 1777, 1780, 1783, 1783, 1783, 1783, 1784, 1785, 1785, 1785, 1786, 1786, 1787, 1788, 1789, 1789, 1790, 1791, 1792, 1792, 1793, 1793, 1793, 1794, 1794, 1794, 1795, 1795, 1796, 1796, 1796, 1797, 1797, 1798, 1799, 1800, 1800, 1801, 1801, 1801, 1802, 1802, 1802, 1803, 1803, 1804, 1804, 1804, 1805, 1805, 1806, 1807, 1808, 1808, 1809, 1809, 1809, 1810, 1810, 1810, 1811, 1811, 1812, 1812, 1812, 1813, 1813, 1814, 1815, 1816, 1816, 1817, 1817, 1817, 1818, 1818, 1818, 1819, 1819, 1820, 1820, 1820, 1821, 1821, 1822, 1823, 1824, 1824, 1825, 1825, 1826, 1826, 1826, 1826, 1827, 1827, 1828, 1828, 1828, 1829, 1829, 1830, 1830, 1830, 1831, 1831, 1832, 1833, 1834, 1834, 1835, 1835, 1835, 1836, 1836, 1836, 1837, 1837, 1838, 1838, 1838, 1839, 1839, 1840, 1841, 1842, 1842, 1843, 1843, 1844, 1844, 1844, 1844, 1845, 1845, 1846, 1846, 1846, 1847, 1847, 1848, 1848, 1849, 1849, 1850, 1850, 1851, 1851, 1851, 1852, 1852, 1852, 1853, 1853, 1854, 1854, 1854, 1855, 1855, 1856, 1857, 1858, 1858, 1859, 1859, 1860, 1860, 1860, 1860, 1861, 1861, 1862, 1862, 1862, 1863, 1863, 1864, 1864, 1865, 1865, 1866, 1866, 1867, 1867, 1867, 1868, 1868, 1868, 1869, 1869, 1870, 1870, 1870, 1871, 1871, 1872, 1873, 1874, 1874, 1875, 1875, 1876, 1876, 1876, 1876, 1877, 1877, 1878, 1878, 1878, 1879, 1879, 1880, 1880, 1881, 1881, 1882, 1882, 1883, 1883, 1883, 1884, 1884, 1884, 1885, 1885, 1886, 1886, 1886, 1887, 1887, 1888, 1888, 1889, 1889, 1889, 1890, 1890, 1891, 1891, 1891, 1892, 1892, 1893, 1893, 1893, 1894, 1898, 1901, 1901, 1901, 1901, 1902, 1903, 1903, 1903, 1904, 1904, 1905, 1906, 1907, 1907, 1908, 1909, 1910, 1910, 1911, 1912, 1913, 1913, 1914, 1914, 1914, 1915, 1915, 1915, 1916, 1916, 1917, 1918, 1919, 1919, 1920, 1920, 1920, 1921, 1921, 1921, 1922, 1922, 1923, 1923, 1924, 1925, 1925, 1926, 1926, 1926, 1927, 1927, 1927, 1928, 1928, 1929, 1929, 1929, 1930, 1930, 1930, 1931, 1931, 1932, 1932, 1932, 1933, 1933, 1934, 1934, 1935, 1935, 1935, 1936, 1936, 1937, 1937, 1937, 1938, 1938, 1939, 1940, 1941, 1941, 1942, 1942, 1943, 1943, 1943, 1944, 1944, 1945, 1945, 1946, 1946, 1946, 1947, 1947, 1948, 1948, 1948, 1949, 1949, 1950, 1950, 1950, 1951, 1955, 1958, 1958, 1958, 1958, 1959, 1960, 1960, 1960, 1961, 1961, 1962, 1963, 1964, 1964, 1965, 1966, 1966, 1967, 1967, 1968, 1968, 1969, 1969, 1969, 1970, 1970, 1971, 1971, 1971, 1972, 1972, 1973, 1974, 1974, 1975, 1975, 1976, 1977, 1978, 1978, 1979, 1979, 1980, 1980, 1981, 1981, 1981, 1982, 1982, 1983, 1983, 1984, 1984, 1985, 1985, 1985, 1986, 1986, 1987, 1987, 1988, 1988, 1989, 1989, 1989, 1990, 1990, 1991, 1991, 1992, 1992, 1993, 1993, 1993, 1994, 1994, 1995, 1995, 1996, 1996, 1997, 1997, 1997, 1998, 1998, 1999, 1999, 2000, 2000, 2001, 2001, 2001
///////////////////////////////////////////////////////////////////////////
// C++ code generated with wxFormBuilder (version Dec 29 2008)
// http://www.wxformbuilder.org/
//
// PLEASE DO "NOT" EDIT THIS FILE!
///////////////////////////////////////////////////////////////////////////

#include "gui_classes.h"

///////////////////////////////////////////////////////////////////////////

iGUI_Toplevel::iGUI_Toplevel( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style, const wxString& name ) : wxFrame( parent, id, title, pos, size, style, name )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	mMenuBar = new wxMenuBar( 0 );
	mFile = new wxMenu();
	wxMenuItem* mAbout;
	mAbout = new wxMenuItem( mFile, ID_ABOUT, wxString( wxT("About") ) , wxEmptyString, wxITEM_NORMAL );
	mFile->Append( mAbout );
	
	wxMenuItem* mExit;
	mExit = new wxMenuItem( mFile, ID_QUIT, wxString( wxT("Exit") ) , wxEmptyString, wxITEM_NORMAL );
	mFile->Append( mExit );
	
	mMenuBar->Append( mFile, wxT("File") );
	
	mLogging = new wxMenu();
	wxMenuItem* mLogconfig;
	mLogconfig = new wxMenuItem( mLogging, ID_LOG_CONFIG, wxString( wxT("Config") ) , wxEmptyString, wxITEM_NORMAL );
	mLogging->Append( mLogconfig );
	
	wxMenuItem* mLogstart;
	mLogstart = new wxMenuItem( mLogging, ID_LOG_START, wxString( wxT("Start") ) , wxEmptyString, wxITEM_NORMAL );
	mLogging->Append( mLogstart );
	mLogstart->Enable( false );
	
	wxMenuItem* mLogstop;
	mLogstop = new wxMenuItem( mLogging, ID_LOG_STOP, wxString( wxT("Stop") ) , wxEmptyString, wxITEM_NORMAL );
	mLogging->Append( mLogstop );
	mLogstop->Enable( false );
	
	wxMenuItem* mLogclear;
	mLogclear = new wxMenuItem( mLogging, ID_LOG_CLEAR, wxString( wxT("Clear") ) , wxEmptyString, wxITEM_NORMAL );
	mLogging->Append( mLogclear );
	mLogclear->Enable( false );
	
	mMenuBar->Append( mLogging, wxT("Logging") );
	
	mInterface = new wxMenu();
	wxMenuItem* mSerial;
	mSerial = new wxMenuItem( mInterface, ID_SERIAL, wxString( wxT("RS232") ) , wxEmptyString, wxITEM_NORMAL );
	mInterface->Append( mSerial );
	
	wxMenuItem* mNpipe;
	mNpipe = new wxMenuItem( mInterface, ID_NPIPE, wxString( wxT("Named Pipe") ) , wxEmptyString, wxITEM_NORMAL );
	mInterface->Append( mNpipe );
	
	mMenuBar->Append( mInterface, wxT("Interface") );
	
	this->SetMenuBar( mMenuBar );
	
	wxBoxSizer* sMain;
	sMain = new wxBoxSizer( wxHORIZONTAL );
	
	wxStaticBoxSizer* SubWindows;
	SubWindows = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Windows") ), wxVERTICAL );
	
	bPVT = new wxToggleButton( this, ID_PVT_B, wxT("PVT"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bPVT, 0, wxALL|wxEXPAND, 5 );
	
	bEKF = new wxToggleButton( this, ID_EKF_B, wxT("EKF"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bEKF, 0, wxALL|wxEXPAND, 5 );
	
	bChannel = new wxToggleButton( this, ID_CHANNEL_B, wxT("Channel"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bChannel, 0, wxALL|wxEXPAND, 5 );
	
	bPseudo = new wxToggleButton( this, ID_PSEUDO_B, wxT("Pseudo"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bPseudo, 0, wxALL|wxEXPAND, 5 );
	
	bEphemeris = new wxToggleButton( this, ID_EPHEMERIS_B, wxT("Ephemeris"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bEphemeris, 0, wxALL|wxEXPAND, 5 );
	
	bAlmanac = new wxToggleButton( this, ID_ALMANAC_B, wxT("Almanac"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bAlmanac, 0, wxALL|wxEXPAND, 5 );
	
	bSelect = new wxToggleButton( this, ID_SELECT_B, wxT("SV Select"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bSelect, 0, wxALL|wxEXPAND, 5 );
	
	bHealth = new wxToggleButton( this, ID_HEALTH_B, wxT("Board Health"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bHealth, 0, wxALL|wxEXPAND, 5 );
	
	bCommands = new wxToggleButton( this, ID_COMMANDS_B, wxT("Commands"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bCommands, 0, wxALL|wxEXPAND, 5 );
	
	bMessages = new wxToggleButton( this, ID_MESSAGES_B, wxT("Messages"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bMessages, 0, wxALL|wxEXPAND, 5 );
	
	bSpeedo = new wxToggleButton( this, ID_SPEEDO_B, wxT("Speedometer"), wxDefaultPosition, wxDefaultSize, 0 );
	SubWindows->Add( bSpeedo, 0, wxALL|wxEXPAND, 5 );
	
	sMain->Add( SubWindows, 1, wxALL|wxEXPAND, 5 );
	
	wxBoxSizer* sStatus;
	sStatus = new wxBoxSizer( wxVERTICAL );
	
	wxStaticBoxSizer* sRS422;
	sRS422 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Connection") ), wxVERTICAL );
	
	tRS422 = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_DONTWRAP|wxTE_LEFT|wxTE_MULTILINE|wxTE_NO_VSCROLL );
	tRS422->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxT("Monospace") ) );
	
	sRS422->Add( tRS422, 1, wxALL|wxEXPAND, 5 );
	
	sStatus->Add( sRS422, 1, wxALL|wxEXPAND, 5 );
	
	wxStaticBoxSizer* sTask;
	sTask = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Task Health") ), wxVERTICAL );
	
	tTask = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_DONTWRAP|wxTE_LEFT|wxTE_MULTILINE|wxTE_NO_VSCROLL );
	tTask->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxT("Monospace") ) );
	
	sTask->Add( tTask, 1, wxALL|wxEXPAND, 5 );
	
	sStatus->Add( sTask, 2, wxALL|wxEXPAND, 5 );
	
	sMain->Add( sStatus, 3, wxEXPAND, 5 );
	
	this->SetSizer( sMain );
	this->Layout();
	mStatus = this->CreateStatusBar( 1, wxST_SIZEGRIP, wxID_ANY );
}

iGUI_Toplevel::~iGUI_Toplevel()
{
}

iGUI_PVT::iGUI_PVT( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	this->SetExtraStyle( wxFRAME_EX_METAL );
	this->SetBackgroundColour( wxSystemSettings::GetColour( wxSYS_COLOUR_APPWORKSPACE ) );
	
	wxBoxSizer* bSizer9;
	bSizer9 = new wxBoxSizer( wxHORIZONTAL );
	
	wxStaticBoxSizer* bSizer29;
	bSizer29 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("CN0") ), wxVERTICAL );
	
	pCN0 = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	pCN0->SetBackgroundColour( wxSystemSettings::GetColour( wxSYS_COLOUR_APPWORKSPACE ) );
	
	bSizer29->Add( pCN0, 1, wxEXPAND, 5 );
	
	bSizer9->Add( bSizer29, 4, wxALL|wxEXPAND, 5 );
	
	wxBoxSizer* bSizer18;
	bSizer18 = new wxBoxSizer( wxVERTICAL );
	
	wxStaticBoxSizer* sbSizer40;
	sbSizer40 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("PVT Status") ), wxHORIZONTAL );
	
	wxBoxSizer* bSizer199;
	bSizer199 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText5311 = new wxStaticText( this, wxID_ANY, wxT("Ticks"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5311->Wrap( -1 );
	m_staticText5311->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer199->Add( m_staticText5311, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer633;
	bSizer633 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5343 = new wxStaticText( this, wxID_ANY, wxT("Receiver"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5343->Wrap( -1 );
	m_staticText5343->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer633->Add( m_staticText5343, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	rticks = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer633->Add( rticks, 2, wxALL|wxEXPAND, 5 );
	
	bSizer199->Add( bSizer633, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer65111;
	bSizer65111 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText536111 = new wxStaticText( this, wxID_ANY, wxT("Stale"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText536111->Wrap( -1 );
	m_staticText536111->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer65111->Add( m_staticText536111, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	sticks = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer65111->Add( sticks, 2, wxALL|wxEXPAND, 5 );
	
	bSizer199->Add( bSizer65111, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6311;
	bSizer6311 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53411 = new wxStaticText( this, wxID_ANY, wxT("Converged"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53411->Wrap( -1 );
	m_staticText53411->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6311->Add( m_staticText53411, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	cticks = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer6311->Add( cticks, 2, wxALL|wxEXPAND, 5 );
	
	bSizer199->Add( bSizer6311, 1, wxEXPAND, 5 );
	
	sbSizer40->Add( bSizer199, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer200;
	bSizer200 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText5321 = new wxStaticText( this, wxID_ANY, wxT("Other"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5321->Wrap( -1 );
	m_staticText5321->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer200->Add( m_staticText5321, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	
	bSizer200->Add( 0, 0, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6411;
	bSizer6411 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53511 = new wxStaticText( this, wxID_ANY, wxT("Iterations"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53511->Wrap( -1 );
	m_staticText53511->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6411->Add( m_staticText53511, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	iter = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer6411->Add( iter, 2, wxALL|wxEXPAND, 5 );
	
	bSizer200->Add( bSizer6411, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer642;
	bSizer642 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53431 = new wxStaticText( this, wxID_ANY, wxT("Nav SV"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText53431->Wrap( -1 );
	m_staticText53431->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer642->Add( m_staticText53431, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	nsv = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer642->Add( nsv, 2, wxALL|wxEXPAND, 5 );
	
	bSizer200->Add( bSizer642, 1, wxEXPAND, 5 );
	
	sbSizer40->Add( bSizer200, 1, wxEXPAND, 5 );
	
	bSizer18->Add( sbSizer40, 0, wxALL|wxEXPAND, 5 );
	
	wxStaticBoxSizer* sbSizer13;
	sbSizer13 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("PVT") ), wxHORIZONTAL );
	
	wxBoxSizer* bSizer196;
	bSizer196 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText531 = new wxStaticText( this, wxID_ANY, wxT("Position"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText531->Wrap( -1 );
	m_staticText531->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer196->Add( m_staticText531, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer63;
	bSizer63 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText534 = new wxStaticText( this, wxID_ANY, wxT("Lat"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText534->Wrap( -1 );
	m_staticText534->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer63->Add( m_staticText534, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	lat = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer63->Add( lat, 3, wxALL, 5 );
	
	bSizer196->Add( bSizer63, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer631;
	bSizer631 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5341 = new wxStaticText( this, wxID_ANY, wxT("Long"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5341->Wrap( -1 );
	m_staticText5341->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer631->Add( m_staticText5341, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	lon = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer631->Add( lon, 3, wxALL, 5 );
	
	bSizer196->Add( bSizer631, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6511;
	bSizer6511 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53611 = new wxStaticText( this, wxID_ANY, wxT("Alt"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53611->Wrap( -1 );
	m_staticText53611->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6511->Add( m_staticText53611, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	alt = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer6511->Add( alt, 3, wxALL, 5 );
	
	bSizer196->Add( bSizer6511, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6514;
	bSizer6514 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53614 = new wxStaticText( this, wxID_ANY, wxT("GDOP"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53614->Wrap( -1 );
	m_staticText53614->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6514->Add( m_staticText53614, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	gdop = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer6514->Add( gdop, 3, wxALL, 5 );
	
	bSizer196->Add( bSizer6514, 1, wxEXPAND, 5 );
	
	sbSizer13->Add( bSizer196, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer197;
	bSizer197 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText532 = new wxStaticText( this, wxID_ANY, wxT("Position (ECEF)"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText532->Wrap( -1 );
	m_staticText532->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer197->Add( m_staticText532, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer64;
	bSizer64 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText535 = new wxStaticText( this, wxID_ANY, wxT("X"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText535->Wrap( -1 );
	m_staticText535->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer64->Add( m_staticText535, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	px = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer64->Add( px, 4, wxALL, 5 );
	
	bSizer197->Add( bSizer64, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer641;
	bSizer641 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5351 = new wxStaticText( this, wxID_ANY, wxT("Y"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5351->Wrap( -1 );
	m_staticText5351->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer641->Add( m_staticText5351, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	py = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer641->Add( py, 4, wxALL, 5 );
	
	bSizer197->Add( bSizer641, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6512;
	bSizer6512 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53612 = new wxStaticText( this, wxID_ANY, wxT("Z"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53612->Wrap( -1 );
	m_staticText53612->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6512->Add( m_staticText53612, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	pz = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer6512->Add( pz, 4, wxALL, 5 );
	
	bSizer197->Add( bSizer6512, 1, wxEXPAND, 5 );
	
	
	bSizer197->Add( 0, 0, 1, wxEXPAND, 5 );
	
	sbSizer13->Add( bSizer197, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer198;
	bSizer198 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText533 = new wxStaticText( this, wxID_ANY, wxT("Velocity (ECEF)"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText533->Wrap( -1 );
	m_staticText533->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer198->Add( m_staticText533, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer65;
	bSizer65 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText536 = new wxStaticText( this, wxID_ANY, wxT("X"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText536->Wrap( -1 );
	m_staticText536->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer65->Add( m_staticText536, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	vx = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer65->Add( vx, 4, wxALL, 5 );
	
	bSizer198->Add( bSizer65, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer651;
	bSizer651 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5361 = new wxStaticText( this, wxID_ANY, wxT("Y"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5361->Wrap( -1 );
	m_staticText5361->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer651->Add( m_staticText5361, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	vy = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer651->Add( vy, 4, wxALL, 5 );
	
	bSizer198->Add( bSizer651, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6513;
	bSizer6513 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53613 = new wxStaticText( this, wxID_ANY, wxT("Z"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53613->Wrap( -1 );
	m_staticText53613->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6513->Add( m_staticText53613, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	vz = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer6513->Add( vz, 4, wxALL, 5 );
	
	bSizer198->Add( bSizer6513, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer632;
	bSizer632 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5342 = new wxStaticText( this, wxID_ANY, wxT("Vel"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5342->Wrap( -1 );
	m_staticText5342->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer632->Add( m_staticText5342, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	speed = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer632->Add( speed, 4, wxALL, 5 );
	
	bSizer198->Add( bSizer632, 1, wxEXPAND, 5 );
	
	sbSizer13->Add( bSizer198, 1, wxEXPAND, 5 );
	
	bSizer18->Add( sbSizer13, 0, wxALL|wxEXPAND|wxFIXED_MINSIZE, 5 );
	
	wxBoxSizer* bSizer110;
	bSizer110 = new wxBoxSizer( wxHORIZONTAL );
	
	wxStaticBoxSizer* sbSizer37;
	sbSizer37 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Date/Time") ), wxVERTICAL );
	
	wxBoxSizer* bSizer9221;
	bSizer9221 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText57721 = new wxStaticText( this, wxID_ANY, wxT("UTC Time"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText57721->Wrap( -1 );
	m_staticText57721->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer9221->Add( m_staticText57721, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	utct = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer9221->Add( utct, 2, wxALL, 5 );
	
	sbSizer37->Add( bSizer9221, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer92;
	bSizer92 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText577 = new wxStaticText( this, wxID_ANY, wxT("GPS Week"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText577->Wrap( -1 );
	m_staticText577->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer92->Add( m_staticText577, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	gpsw = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer92->Add( gpsw, 2, wxALL, 5 );
	
	sbSizer37->Add( bSizer92, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer922;
	bSizer922 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5772 = new wxStaticText( this, wxID_ANY, wxT("GPS Second"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5772->Wrap( -1 );
	m_staticText5772->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer922->Add( m_staticText5772, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	gpss = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer922->Add( gpss, 2, wxALL, 5 );
	
	sbSizer37->Add( bSizer922, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer921;
	bSizer921 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5771 = new wxStaticText( this, wxID_ANY, wxT("Clock Bias"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5771->Wrap( -1 );
	m_staticText5771->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer921->Add( m_staticText5771, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	cb = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer921->Add( cb, 2, wxALL, 5 );
	
	sbSizer37->Add( bSizer921, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer9211;
	bSizer9211 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText57711 = new wxStaticText( this, wxID_ANY, wxT("Clock Rate"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText57711->Wrap( -1 );
	m_staticText57711->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer9211->Add( m_staticText57711, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	cr = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer9211->Add( cr, 2, wxALL, 5 );
	
	sbSizer37->Add( bSizer9211, 1, wxEXPAND, 5 );
	
	bSizer110->Add( sbSizer37, 3, wxALL|wxEXPAND|wxFIXED_MINSIZE, 5 );
	
	wxStaticBoxSizer* sbSizer371;
	sbSizer371 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("PPS ") ), wxVERTICAL );
	
	wxBoxSizer* bSizer923;
	bSizer923 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5773 = new wxStaticText( this, wxID_ANY, wxT("State"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5773->Wrap( -1 );
	m_staticText5773->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer923->Add( m_staticText5773, 2, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	ppsstate = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer923->Add( ppsstate, 3, wxALL, 5 );
	
	sbSizer371->Add( bSizer923, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer92211;
	bSizer92211 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText577211 = new wxStaticText( this, wxID_ANY, wxT("Feedback"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText577211->Wrap( -1 );
	m_staticText577211->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer92211->Add( m_staticText577211, 2, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	ppscmd = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer92211->Add( ppscmd, 3, wxALL, 5 );
	
	sbSizer371->Add( bSizer92211, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer9212;
	bSizer9212 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText57712 = new wxStaticText( this, wxID_ANY, wxT("Clock Rate"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText57712->Wrap( -1 );
	m_staticText57712->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer9212->Add( m_staticText57712, 2, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	ppscr = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer9212->Add( ppscr, 3, wxALL, 5 );
	
	sbSizer371->Add( bSizer9212, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer92111;
	bSizer92111 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText577111 = new wxStaticText( this, wxID_ANY, wxT("Filtered Error"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText577111->Wrap( -1 );
	m_staticText577111->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer92111->Add( m_staticText577111, 2, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	ppserr = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );
	bSizer92111->Add( ppserr, 3, wxALL, 5 );
	
	sbSizer371->Add( bSizer92111, 1, wxEXPAND, 5 );
	
	
	sbSizer371->Add( 0, 0, 1, wxEXPAND, 5 );
	
	bSizer110->Add( sbSizer371, 2, wxALL|wxEXPAND, 5 );
	
	bSizer18->Add( bSizer110, 1, wxEXPAND, 5 );
	
	bSizer9->Add( bSizer18, 5, wxEXPAND, 5 );
	
	this->SetSizer( bSizer9 );
	this->Layout();
	
	// Connect Events
	this->Connect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( iGUI_PVT::OnClose ) );
}

iGUI_PVT::~iGUI_PVT()
{
	// Disconnect Events
	this->Disconnect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( iGUI_PVT::OnClose ) );
}

iGUI_EKF::iGUI_EKF( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	this->SetBackgroundColour( wxSystemSettings::GetColour( wxSYS_COLOUR_APPWORKSPACE ) );
	
	wxBoxSizer* bSizer9;
	bSizer9 = new wxBoxSizer( wxHORIZONTAL );
	
	wxStaticBoxSizer* bSizer29;
	bSizer29 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Residuals") ), wxVERTICAL );
	
	tResidual = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_LEFT|wxTE_MULTILINE|wxTE_NO_VSCROLL );
	tResidual->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxT("Monospace") ) );
	
	bSizer29->Add( tResidual, 1, wxALL|wxEXPAND, 5 );
	
	bSizer9->Add( bSizer29, 4, wxALL|wxEXPAND, 5 );
	
	wxBoxSizer* bSizer18;
	bSizer18 = new wxBoxSizer( wxVERTICAL );
	
	wxStaticBoxSizer* sbSizer40;
	sbSizer40 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("EKF Status") ), wxHORIZONTAL );
	
	wxBoxSizer* bSizer199;
	bSizer199 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText5311 = new wxStaticText( this, wxID_ANY, wxT("Ticks"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5311->Wrap( -1 );
	m_staticText5311->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer199->Add( m_staticText5311, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer633;
	bSizer633 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5343 = new wxStaticText( this, wxID_ANY, wxT("Receiver"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5343->Wrap( -1 );
	m_staticText5343->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer633->Add( m_staticText5343, 0, wxALL, 5 );
	
	rticks = new wxStaticText( this, wxID_ANY, wxT("rticks"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
	rticks->Wrap( -1 );
	bSizer633->Add( rticks, 1, wxALL|wxEXPAND, 5 );
	
	bSizer199->Add( bSizer633, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6311;
	bSizer6311 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53411 = new wxStaticText( this, wxID_ANY, wxT("State Updates"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53411->Wrap( -1 );
	m_staticText53411->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6311->Add( m_staticText53411, 0, wxALL, 5 );
	
	sticks = new wxStaticText( this, wxID_ANY, wxT("sticks"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	sticks->Wrap( -1 );
	bSizer6311->Add( sticks, 1, wxALIGN_RIGHT|wxALL, 5 );
	
	bSizer199->Add( bSizer6311, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6411;
	bSizer6411 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53511 = new wxStaticText( this, wxID_ANY, wxT("Update Period"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53511->Wrap( -1 );
	m_staticText53511->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6411->Add( m_staticText53511, 0, wxALL, 5 );
	
	period = new wxStaticText( this, wxID_ANY, wxT("period"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	period->Wrap( -1 );
	bSizer6411->Add( period, 1, wxALL|wxEXPAND, 5 );
	
	bSizer199->Add( bSizer6411, 1, wxEXPAND, 5 );
	
	sbSizer40->Add( bSizer199, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer200;
	bSizer200 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText5321 = new wxStaticText( this, wxID_ANY, wxT("Other"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5321->Wrap( -1 );
	m_staticText5321->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer200->Add( m_staticText5321, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer642;
	bSizer642 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53431 = new wxStaticText( this, wxID_ANY, wxT("Status"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53431->Wrap( -1 );
	m_staticText53431->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer642->Add( m_staticText53431, 0, wxALL, 5 );
	
	status = new wxStaticText( this, wxID_ANY, wxT("status"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	status->Wrap( -1 );
	bSizer642->Add( status, 1, wxALL|wxEXPAND, 5 );
	
	bSizer200->Add( bSizer642, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6421;
	bSizer6421 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText534311 = new wxStaticText( this, wxID_ANY, wxT("Errors"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText534311->Wrap( -1 );
	m_staticText534311->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6421->Add( m_staticText534311, 0, wxALL, 5 );
	
	err = new wxStaticText( this, wxID_ANY, wxT("err"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	err->Wrap( -1 );
	bSizer6421->Add( err, 1, wxALL|wxEXPAND, 5 );
	
	bSizer200->Add( bSizer6421, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6422;
	bSizer6422 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText534312 = new wxStaticText( this, wxID_ANY, wxT("Nav Satellites"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText534312->Wrap( -1 );
	m_staticText534312->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6422->Add( m_staticText534312, 0, wxALL, 5 );
	
	nsv = new wxStaticText( this, wxID_ANY, wxT("nsv"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	nsv->Wrap( -1 );
	bSizer6422->Add( nsv, 1, wxALL|wxEXPAND, 5 );
	
	bSizer200->Add( bSizer6422, 1, wxEXPAND, 5 );
	
	sbSizer40->Add( bSizer200, 1, wxEXPAND, 5 );
	
	bSizer18->Add( sbSizer40, 0, wxALL|wxEXPAND, 5 );
	
	wxStaticBoxSizer* sbSizer13;
	sbSizer13 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("EKF State") ), wxHORIZONTAL );
	
	wxBoxSizer* bSizer196;
	bSizer196 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText531 = new wxStaticText( this, wxID_ANY, wxT("Other"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText531->Wrap( -1 );
	m_staticText531->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer196->Add( m_staticText531, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer65111;
	bSizer65111 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText536111 = new wxStaticText( this, wxID_ANY, wxT("SRP"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText536111->Wrap( -1 );
	m_staticText536111->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer65111->Add( m_staticText536111, 0, wxALL, 5 );
	
	srp = new wxStaticText( this, wxID_ANY, wxT("srp"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	srp->Wrap( -1 );
	bSizer65111->Add( srp, 1, wxALL|wxEXPAND, 5 );
	
	bSizer196->Add( bSizer65111, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6511;
	bSizer6511 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53611 = new wxStaticText( this, wxID_ANY, wxT("Drag"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53611->Wrap( -1 );
	m_staticText53611->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6511->Add( m_staticText53611, 0, wxALL, 5 );
	
	drag = new wxStaticText( this, wxID_ANY, wxT("drag"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	drag->Wrap( -1 );
	bSizer6511->Add( drag, 1, wxALL|wxEXPAND, 5 );
	
	bSizer196->Add( bSizer6511, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer9212;
	bSizer9212 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText57712 = new wxStaticText( this, wxID_ANY, wxT("CB"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText57712->Wrap( -1 );
	m_staticText57712->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer9212->Add( m_staticText57712, 0, wxALL, 5 );
	
	cb = new wxStaticText( this, wxID_ANY, wxT("cb"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	cb->Wrap( -1 );
	bSizer9212->Add( cb, 1, wxALL|wxEXPAND, 5 );
	
	bSizer196->Add( bSizer9212, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer9213;
	bSizer9213 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText57713 = new wxStaticText( this, wxID_ANY, wxT("CR"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText57713->Wrap( -1 );
	m_staticText57713->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer9213->Add( m_staticText57713, 0, wxALL, 5 );
	
	cr = new wxStaticText( this, wxID_ANY, wxT("cr"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	cr->Wrap( -1 );
	bSizer9213->Add( cr, 1, wxALL|wxEXPAND, 5 );
	
	bSizer196->Add( bSizer9213, 1, wxEXPAND, 5 );
	
	sbSizer13->Add( bSizer196, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer197;
	bSizer197 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText532 = new wxStaticText( this, wxID_ANY, wxT("Position (ECEF)"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText532->Wrap( -1 );
	m_staticText532->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer197->Add( m_staticText532, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer64;
	bSizer64 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText535 = new wxStaticText( this, wxID_ANY, wxT("X"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText535->Wrap( -1 );
	m_staticText535->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer64->Add( m_staticText535, 0, wxALL, 5 );
	
	px = new wxStaticText( this, wxID_ANY, wxT("px"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
	px->Wrap( -1 );
	bSizer64->Add( px, 1, wxALL|wxEXPAND, 5 );
	
	bSizer197->Add( bSizer64, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer641;
	bSizer641 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5351 = new wxStaticText( this, wxID_ANY, wxT("Y"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5351->Wrap( -1 );
	m_staticText5351->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer641->Add( m_staticText5351, 0, wxALL, 5 );
	
	py = new wxStaticText( this, wxID_ANY, wxT("py"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
	py->Wrap( -1 );
	bSizer641->Add( py, 1, wxALL|wxEXPAND, 5 );
	
	bSizer197->Add( bSizer641, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6512;
	bSizer6512 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53612 = new wxStaticText( this, wxID_ANY, wxT("Z"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53612->Wrap( -1 );
	m_staticText53612->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6512->Add( m_staticText53612, 0, wxALL, 5 );
	
	pz = new wxStaticText( this, wxID_ANY, wxT("pz"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
	pz->Wrap( -1 );
	bSizer6512->Add( pz, 1, wxALL|wxEXPAND, 5 );
	
	bSizer197->Add( bSizer6512, 1, wxEXPAND, 5 );
	
	
	bSizer197->Add( 0, 0, 1, wxEXPAND, 5 );
	
	sbSizer13->Add( bSizer197, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer198;
	bSizer198 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText533 = new wxStaticText( this, wxID_ANY, wxT("Velocity (ECEF)"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText533->Wrap( -1 );
	m_staticText533->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer198->Add( m_staticText533, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer65;
	bSizer65 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText536 = new wxStaticText( this, wxID_ANY, wxT("X"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText536->Wrap( -1 );
	m_staticText536->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer65->Add( m_staticText536, 0, wxALL, 5 );
	
	vx = new wxStaticText( this, wxID_ANY, wxT("vx"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
	vx->Wrap( -1 );
	bSizer65->Add( vx, 1, wxEXPAND|wxALL, 5 );
	
	bSizer198->Add( bSizer65, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer651;
	bSizer651 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5361 = new wxStaticText( this, wxID_ANY, wxT("Y"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5361->Wrap( -1 );
	m_staticText5361->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer651->Add( m_staticText5361, 0, wxALL, 5 );
	
	vy = new wxStaticText( this, wxID_ANY, wxT("vy"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT|wxSIMPLE_BORDER );
	vy->Wrap( -1 );
	bSizer651->Add( vy, 1, wxALL|wxEXPAND, 5 );
	
	bSizer198->Add( bSizer651, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6513;
	bSizer6513 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53613 = new wxStaticText( this, wxID_ANY, wxT("Z"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53613->Wrap( -1 );
	m_staticText53613->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6513->Add( m_staticText53613, 0, wxALL, 5 );
	
	vz = new wxStaticText( this, wxID_ANY, wxT("vz"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
	vz->Wrap( -1 );
	bSizer6513->Add( vz, 1, wxALL|wxEXPAND, 5 );
	
	bSizer198->Add( bSizer6513, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer632;
	bSizer632 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5342 = new wxStaticText( this, wxID_ANY, wxT("Speed"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5342->Wrap( -1 );
	m_staticText5342->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer632->Add( m_staticText5342, 0, wxALL, 5 );
	
	speed = new wxStaticText( this, wxID_ANY, wxT("speed"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	speed->Wrap( -1 );
	bSizer632->Add( speed, 1, wxALL|wxEXPAND, 5 );
	
	bSizer198->Add( bSizer632, 1, wxEXPAND, 5 );
	
	sbSizer13->Add( bSizer198, 1, wxEXPAND, 5 );
	
	bSizer18->Add( sbSizer13, 0, wxALL|wxEXPAND|wxFIXED_MINSIZE, 5 );
	
	wxStaticBoxSizer* sbSizer131;
	sbSizer131 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("EKF Covariance") ), wxHORIZONTAL );
	
	wxBoxSizer* bSizer1961;
	bSizer1961 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText5312 = new wxStaticText( this, wxID_ANY, wxT("Other"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5312->Wrap( -1 );
	m_staticText5312->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer1961->Add( m_staticText5312, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer651111;
	bSizer651111 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5361111 = new wxStaticText( this, wxID_ANY, wxT("SRP"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5361111->Wrap( -1 );
	m_staticText5361111->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer651111->Add( m_staticText5361111, 0, wxALL, 5 );
	
	csrp = new wxStaticText( this, wxID_ANY, wxT("csrp"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	csrp->Wrap( -1 );
	bSizer651111->Add( csrp, 1, wxALL|wxEXPAND, 5 );
	
	bSizer1961->Add( bSizer651111, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer65112;
	bSizer65112 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText536112 = new wxStaticText( this, wxID_ANY, wxT("Drag"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText536112->Wrap( -1 );
	m_staticText536112->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer65112->Add( m_staticText536112, 0, wxALL, 5 );
	
	cdrag = new wxStaticText( this, wxID_ANY, wxT("cdrag"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	cdrag->Wrap( -1 );
	bSizer65112->Add( cdrag, 1, wxALL|wxEXPAND, 5 );
	
	bSizer1961->Add( bSizer65112, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer651121;
	bSizer651121 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5361121 = new wxStaticText( this, wxID_ANY, wxT("CB"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5361121->Wrap( -1 );
	m_staticText5361121->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer651121->Add( m_staticText5361121, 0, wxALL, 5 );
	
	ccb = new wxStaticText( this, wxID_ANY, wxT("ccb"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	ccb->Wrap( -1 );
	bSizer651121->Add( ccb, 1, wxALL|wxEXPAND, 5 );
	
	bSizer1961->Add( bSizer651121, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer651122;
	bSizer651122 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5361122 = new wxStaticText( this, wxID_ANY, wxT("CR"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5361122->Wrap( -1 );
	m_staticText5361122->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer651122->Add( m_staticText5361122, 0, wxALL, 5 );
	
	ccr = new wxStaticText( this, wxID_ANY, wxT("ccr"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	ccr->Wrap( -1 );
	bSizer651122->Add( ccr, 1, wxALL|wxEXPAND, 5 );
	
	bSizer1961->Add( bSizer651122, 1, wxEXPAND, 5 );
	
	sbSizer131->Add( bSizer1961, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer1971;
	bSizer1971 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText5322 = new wxStaticText( this, wxID_ANY, wxT("Position (ECEF)"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5322->Wrap( -1 );
	m_staticText5322->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer1971->Add( m_staticText5322, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer643;
	bSizer643 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5352 = new wxStaticText( this, wxID_ANY, wxT("X"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5352->Wrap( -1 );
	m_staticText5352->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer643->Add( m_staticText5352, 0, wxALL, 5 );
	
	cpx = new wxStaticText( this, wxID_ANY, wxT("cpx"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	cpx->Wrap( -1 );
	bSizer643->Add( cpx, 1, wxALL|wxEXPAND, 5 );
	
	bSizer1971->Add( bSizer643, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6412;
	bSizer6412 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53512 = new wxStaticText( this, wxID_ANY, wxT("Y"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53512->Wrap( -1 );
	m_staticText53512->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6412->Add( m_staticText53512, 0, wxALL, 5 );
	
	cpy = new wxStaticText( this, wxID_ANY, wxT("cpy"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	cpy->Wrap( -1 );
	bSizer6412->Add( cpy, 1, wxALL|wxEXPAND, 5 );
	
	bSizer1971->Add( bSizer6412, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer65121;
	bSizer65121 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText536121 = new wxStaticText( this, wxID_ANY, wxT("Z"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText536121->Wrap( -1 );
	m_staticText536121->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer65121->Add( m_staticText536121, 0, wxALL, 5 );
	
	cpz = new wxStaticText( this, wxID_ANY, wxT("cpz"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	cpz->Wrap( -1 );
	bSizer65121->Add( cpz, 1, wxALL|wxEXPAND, 5 );
	
	bSizer1971->Add( bSizer65121, 1, wxEXPAND, 5 );
	
	
	bSizer1971->Add( 0, 0, 1, wxEXPAND, 5 );
	
	sbSizer131->Add( bSizer1971, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer1981;
	bSizer1981 = new wxBoxSizer( wxVERTICAL );
	
	m_staticText5331 = new wxStaticText( this, wxID_ANY, wxT("Velocity (ECEF)"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5331->Wrap( -1 );
	m_staticText5331->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 94, 92, true, wxEmptyString ) );
	
	bSizer1981->Add( m_staticText5331, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	wxBoxSizer* bSizer652;
	bSizer652 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5362 = new wxStaticText( this, wxID_ANY, wxT("X"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5362->Wrap( -1 );
	m_staticText5362->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer652->Add( m_staticText5362, 0, wxALL, 5 );
	
	cvx = new wxStaticText( this, wxID_ANY, wxT("cvx"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	cvx->Wrap( -1 );
	bSizer652->Add( cvx, 1, wxEXPAND|wxALL, 5 );
	
	bSizer1981->Add( bSizer652, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer6514;
	bSizer6514 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText53614 = new wxStaticText( this, wxID_ANY, wxT("Y"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText53614->Wrap( -1 );
	m_staticText53614->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer6514->Add( m_staticText53614, 0, wxALL, 5 );
	
	cvy = new wxStaticText( this, wxID_ANY, wxT("cvy"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE|wxSIMPLE_BORDER );
	cvy->Wrap( -1 );
	bSizer6514->Add( cvy, 1, wxALL|wxEXPAND, 5 );
	
	bSizer1981->Add( bSizer6514, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer65131;
	bSizer65131 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText536131 = new wxStaticText( this, wxID_ANY, wxT("Z"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText536131->Wrap( -1 );
	m_staticText536131->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer65131->Add( m_staticText536131, 0, wxALL, 5 );
	
	cvz = new wxStaticText( this, wxID_ANY, wxT("cvz"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	cvz->Wrap( -1 );
	bSizer65131->Add( cvz, 1, wxALL|wxEXPAND, 5 );
	
	bSizer1981->Add( bSizer65131, 1, wxEXPAND, 5 );
	
	
	bSizer1981->Add( 0, 0, 1, wxEXPAND, 5 );
	
	sbSizer131->Add( bSizer1981, 1, wxEXPAND, 5 );
	
	bSizer18->Add( sbSizer131, 0, wxALL|wxEXPAND, 5 );
	
	wxStaticBoxSizer* sbSizer37;
	sbSizer37 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("EKF Date/Time") ), wxVERTICAL );
	
	wxBoxSizer* bSizer9221;
	bSizer9221 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText57721 = new wxStaticText( this, wxID_ANY, wxT("UTC Time"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText57721->Wrap( -1 );
	m_staticText57721->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer9221->Add( m_staticText57721, 0, wxALL, 5 );
	
	utct = new wxStaticText( this, wxID_ANY, wxT("utct"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	utct->Wrap( -1 );
	bSizer9221->Add( utct, 1, wxALL|wxEXPAND, 5 );
	
	sbSizer37->Add( bSizer9221, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer92;
	bSizer92 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText577 = new wxStaticText( this, wxID_ANY, wxT("GPS Week"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText577->Wrap( -1 );
	m_staticText577->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer92->Add( m_staticText577, 0, wxALL, 5 );
	
	gpsw = new wxStaticText( this, wxID_ANY, wxT("gpsw"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	gpsw->Wrap( -1 );
	bSizer92->Add( gpsw, 1, wxALL|wxEXPAND, 5 );
	
	sbSizer37->Add( bSizer92, 1, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer922;
	bSizer922 = new wxBoxSizer( wxHORIZONTAL );
	
	m_staticText5772 = new wxStaticText( this, wxID_ANY, wxT("GPS Second"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5772->Wrap( -1 );
	m_staticText5772->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	bSizer922->Add( m_staticText5772, 0, wxALL, 5 );
	
	gpss = new wxStaticText( this, wxID_ANY, wxT("gpss"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	gpss->Wrap( -1 );
	bSizer922->Add( gpss, 1, wxALL|wxEXPAND, 5 );
	
	sbSizer37->Add( bSizer922, 1, wxEXPAND, 5 );
	
	bSizer18->Add( sbSizer37, 0, wxALL|wxEXPAND|wxFIXED_MINSIZE, 5 );
	
	bSizer9->Add( bSizer18, 5, wxEXPAND, 5 );
	
	this->SetSizer( bSizer9 );
	this->Layout();
}

iGUI_EKF::~iGUI_EKF()
{
}

iGUI_Channel::iGUI_Channel( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer9;
	bSizer9 = new wxBoxSizer( wxVERTICAL );
	
	tChannel = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_DONTWRAP|wxTE_LEFT|wxTE_MULTILINE );
	tChannel->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxT("Monospace") ) );
	
	bSizer9->Add( tChannel, 1, wxALL|wxEXPAND, 5 );
	
	this->SetSizer( bSizer9 );
	this->Layout();
}

iGUI_Channel::~iGUI_Channel()
{
}

iGUI_Pseudo::iGUI_Pseudo( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer9;
	bSizer9 = new wxBoxSizer( wxVERTICAL );
	
	tPseudo = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_DONTWRAP|wxTE_LEFT|wxTE_MULTILINE );
	tPseudo->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxT("Monospace") ) );
	
	bSizer9->Add( tPseudo, 1, wxALL|wxEXPAND, 5 );
	
	this->SetSizer( bSizer9 );
	this->Layout();
}

iGUI_Pseudo::~iGUI_Pseudo()
{
}

iGUI_Ephemeris::iGUI_Ephemeris( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer17;
	bSizer17 = new wxBoxSizer( wxVERTICAL );
	
	wxBoxSizer* bSizer22;
	bSizer22 = new wxBoxSizer( wxVERTICAL );
	
	bSizer22->SetMinSize( wxSize( -1,120 ) ); 
	pDecoded = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	pDecoded->SetMinSize( wxSize( -1,120 ) );
	
	bSizer22->Add( pDecoded, 1, wxALL|wxEXPAND, 5 );
	
	bSizer17->Add( bSizer22, 0, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer23;
	bSizer23 = new wxBoxSizer( wxVERTICAL );
	
	tDisplay = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_DONTWRAP|wxTE_MULTILINE );
	tDisplay->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxT("Monospace") ) );
	
	bSizer23->Add( tDisplay, 1, wxALL|wxEXPAND, 5 );
	
	bSizer17->Add( bSizer23, 10, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer21;
	bSizer21 = new wxBoxSizer( wxHORIZONTAL );
	
	bSizer21->SetMinSize( wxSize( -1,30 ) ); 
	
	bSizer21->Add( 0, 0, 1, wxEXPAND, 5 );
	
	bRefresh = new wxButton( this, ID_EPHEMERIS_REFRESH, wxT("Refresh"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer21->Add( bRefresh, 0, wxALL, 5 );
	
	bSave = new wxButton( this, ID_EPHEMERIS_SAVE, wxT("Save"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer21->Add( bSave, 0, wxALL, 5 );
	
	bLoad = new wxButton( this, ID_EPHEMERIS_LOAD, wxT("Load"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer21->Add( bLoad, 0, wxALL, 5 );
	
	
	bSizer21->Add( 0, 0, 1, wxEXPAND, 5 );
	
	bSizer17->Add( bSizer21, 0, wxEXPAND, 5 );
	
	this->SetSizer( bSizer17 );
	this->Layout();
	
	// Connect Events
	pDecoded->Connect( wxEVT_LEFT_DOWN, wxMouseEventHandler( iGUI_Ephemeris::onMouse ), NULL, this );
}

iGUI_Ephemeris::~iGUI_Ephemeris()
{
	// Disconnect Events
	pDecoded->Disconnect( wxEVT_LEFT_DOWN, wxMouseEventHandler( iGUI_Ephemeris::onMouse ), NULL, this );
}

iGUI_Almanac::iGUI_Almanac( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer17;
	bSizer17 = new wxBoxSizer( wxVERTICAL );
	
	wxBoxSizer* bSizer22;
	bSizer22 = new wxBoxSizer( wxVERTICAL );
	
	bSizer22->SetMinSize( wxSize( -1,120 ) ); 
	pDecoded = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	pDecoded->SetMinSize( wxSize( -1,120 ) );
	
	bSizer22->Add( pDecoded, 1, wxALL|wxEXPAND, 5 );
	
	bSizer17->Add( bSizer22, 0, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer23;
	bSizer23 = new wxBoxSizer( wxVERTICAL );
	
	tDisplay = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_DONTWRAP|wxTE_MULTILINE );
	tDisplay->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxT("Monospace") ) );
	
	bSizer23->Add( tDisplay, 1, wxALL|wxEXPAND, 5 );
	
	bSizer17->Add( bSizer23, 10, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer21;
	bSizer21 = new wxBoxSizer( wxHORIZONTAL );
	
	bSizer21->SetMinSize( wxSize( -1,30 ) ); 
	
	bSizer21->Add( 0, 0, 1, wxEXPAND, 5 );
	
	bRefresh = new wxButton( this, ID_ALMANAC_REFRESH, wxT("Refresh"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer21->Add( bRefresh, 0, wxALL, 5 );
	
	bSave = new wxButton( this, ID_ALMANAC_SAVE, wxT("Save"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer21->Add( bSave, 0, wxALL, 5 );
	
	bLoad = new wxButton( this, ID_ALMANAC_LOAD, wxT("Load"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer21->Add( bLoad, 0, wxALL, 5 );
	
	
	bSizer21->Add( 0, 0, 1, wxEXPAND, 5 );
	
	bSizer17->Add( bSizer21, 0, wxEXPAND, 5 );
	
	this->SetSizer( bSizer17 );
	this->Layout();
	
	// Connect Events
	pDecoded->Connect( wxEVT_LEFT_DOWN, wxMouseEventHandler( iGUI_Almanac::onMouse ), NULL, this );
}

iGUI_Almanac::~iGUI_Almanac()
{
	// Disconnect Events
	pDecoded->Disconnect( wxEVT_LEFT_DOWN, wxMouseEventHandler( iGUI_Almanac::onMouse ), NULL, this );
}

iGUI_Health::iGUI_Health( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	this->SetBackgroundColour( wxSystemSettings::GetColour( wxSYS_COLOUR_APPWORKSPACE ) );
	
	wxBoxSizer* bSizer61;
	bSizer61 = new wxBoxSizer( wxVERTICAL );
	
	wxStaticBoxSizer* sbSizer32;
	sbSizer32 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("FPGA Versions") ), wxVERTICAL );
	
	wxGridSizer* gSizer14;
	gSizer14 = new wxGridSizer( 2, 5, 0, 0 );
	
	
	gSizer14->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText533 = new wxStaticText( this, wxID_ANY, wxT("TRK"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText533->Wrap( -1 );
	m_staticText533->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer14->Add( m_staticText533, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText534 = new wxStaticText( this, wxID_ANY, wxT("ACQ"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText534->Wrap( -1 );
	m_staticText534->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer14->Add( m_staticText534, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText535 = new wxStaticText( this, wxID_ANY, wxT("FFT"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText535->Wrap( -1 );
	m_staticText535->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer14->Add( m_staticText535, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText536 = new wxStaticText( this, wxID_ANY, wxT("Software"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText536->Wrap( -1 );
	m_staticText536->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer14->Add( m_staticText536, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText537 = new wxStaticText( this, wxID_ANY, wxT("Version"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText537->Wrap( -1 );
	m_staticText537->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer14->Add( m_staticText537, 0, wxALL, 5 );
	
	trkv = new wxStaticText( this, wxID_ANY, wxT("trkv"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	trkv->Wrap( -1 );
	trkv->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer14->Add( trkv, 0, wxALL|wxEXPAND, 5 );
	
	acqv = new wxStaticText( this, wxID_ANY, wxT("acqv"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	acqv->Wrap( -1 );
	acqv->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer14->Add( acqv, 0, wxALL|wxEXPAND, 5 );
	
	fftv = new wxStaticText( this, wxID_ANY, wxT("fftv"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	fftv->Wrap( -1 );
	fftv->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer14->Add( fftv, 0, wxALL|wxEXPAND, 5 );
	
	sftv = new wxStaticText( this, wxID_ANY, wxT("sftv"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	sftv->Wrap( -1 );
	sftv->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer14->Add( sftv, 0, wxALL|wxEXPAND, 5 );
	
	sbSizer32->Add( gSizer14, 1, wxEXPAND, 5 );
	
	bSizer61->Add( sbSizer32, 0, wxALL|wxEXPAND, 5 );
	
	wxStaticBoxSizer* sbSizer35;
	sbSizer35 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Gain Control") ), wxVERTICAL );
	
	wxGridSizer* gSizer15;
	gSizer15 = new wxGridSizer( 3, 5, 0, 0 );
	
	
	gSizer15->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText53 = new wxStaticText( this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText53->Wrap( -1 );
	m_staticText53->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer15->Add( m_staticText53, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText56 = new wxStaticText( this, wxID_ANY, wxT("1"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText56->Wrap( -1 );
	m_staticText56->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer15->Add( m_staticText56, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText54 = new wxStaticText( this, wxID_ANY, wxT("2"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText54->Wrap( -1 );
	m_staticText54->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer15->Add( m_staticText54, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText55 = new wxStaticText( this, wxID_ANY, wxT("3"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText55->Wrap( -1 );
	m_staticText55->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer15->Add( m_staticText55, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText5 = new wxStaticText( this, wxID_ANY, wxT("DSA Values"), wxDefaultPosition, wxDefaultSize, wxST_NO_AUTORESIZE );
	m_staticText5->Wrap( -1 );
	m_staticText5->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer15->Add( m_staticText5, 0, wxALL|wxEXPAND, 5 );
	
	dsa0 = new wxStaticText( this, wxID_ANY, wxT("dsa0"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	dsa0->Wrap( -1 );
	dsa0->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer15->Add( dsa0, 0, wxALL|wxEXPAND, 5 );
	
	dsa1 = new wxStaticText( this, wxID_ANY, wxT("dsa1"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	dsa1->Wrap( -1 );
	dsa1->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer15->Add( dsa1, 0, wxALL|wxEXPAND, 5 );
	
	dsa2 = new wxStaticText( this, wxID_ANY, wxT("dsa2"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	dsa2->Wrap( -1 );
	dsa2->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer15->Add( dsa2, 0, wxALL|wxEXPAND, 5 );
	
	dsa3 = new wxStaticText( this, wxID_ANY, wxT("dsa3"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	dsa3->Wrap( -1 );
	dsa3->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer15->Add( dsa3, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText52 = new wxStaticText( this, wxID_ANY, wxT("Overflow Count"), wxDefaultPosition, wxDefaultSize, wxST_NO_AUTORESIZE );
	m_staticText52->Wrap( -1 );
	m_staticText52->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer15->Add( m_staticText52, 0, wxALL|wxEXPAND, 5 );
	
	ovr0 = new wxStaticText( this, wxID_ANY, wxT("ovr0"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	ovr0->Wrap( -1 );
	ovr0->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer15->Add( ovr0, 0, wxALL|wxEXPAND, 5 );
	
	ovr1 = new wxStaticText( this, wxID_ANY, wxT("ovr1"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	ovr1->Wrap( -1 );
	ovr1->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer15->Add( ovr1, 0, wxALL|wxEXPAND, 5 );
	
	ovr2 = new wxStaticText( this, wxID_ANY, wxT("ovr2"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	ovr2->Wrap( -1 );
	ovr2->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer15->Add( ovr2, 0, wxALL|wxEXPAND, 5 );
	
	ovr3 = new wxStaticText( this, wxID_ANY, wxT("ovr3"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	ovr3->Wrap( -1 );
	ovr3->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer15->Add( ovr3, 0, wxALL|wxEXPAND, 5 );
	
	sbSizer35->Add( gSizer15, 0, wxEXPAND, 5 );
	
	bSizer61->Add( sbSizer35, 0, wxALL|wxEXPAND, 5 );
	
	wxStaticBoxSizer* sbSizer36;
	sbSizer36 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Status and Health") ), wxVERTICAL );
	
	wxGridSizer* gSizer151;
	gSizer151 = new wxGridSizer( 8, 5, 0, 0 );
	
	
	gSizer151->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText53141 = new wxStaticText( this, wxID_ANY, wxT("NSP TR"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText53141->Wrap( -1 );
	m_staticText53141->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText53141, 0, wxALL|wxEXPAND, 5 );
	
	nsptr = new wxStaticText( this, wxID_ANY, wxT("nsptr"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	nsptr->Wrap( -1 );
	nsptr->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( nsptr, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText531421 = new wxStaticText( this, wxID_ANY, wxT("PCC TR"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText531421->Wrap( -1 );
	m_staticText531421->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText531421, 0, wxALL|wxEXPAND, 5 );
	
	pcctr = new wxStaticText( this, wxID_ANY, wxT("pcctr"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	pcctr->Wrap( -1 );
	pcctr->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( pcctr, 0, wxALL|wxEXPAND, 5 );
	
	
	gSizer151->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText53142 = new wxStaticText( this, wxID_ANY, wxT("RF TR"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText53142->Wrap( -1 );
	m_staticText53142->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText53142, 0, wxALL|wxEXPAND, 5 );
	
	rftr = new wxStaticText( this, wxID_ANY, wxT("rftr"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	rftr->Wrap( -1 );
	rftr->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( rftr, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText561 = new wxStaticText( this, wxID_ANY, wxT("VREF"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText561->Wrap( -1 );
	m_staticText561->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText561, 0, wxALL|wxEXPAND, 5 );
	
	vref = new wxStaticText( this, wxID_ANY, wxT("vref"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	vref->Wrap( -1 );
	vref->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( vref, 0, wxALL|wxEXPAND, 5 );
	
	
	gSizer151->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText531 = new wxStaticText( this, wxID_ANY, wxT("GND1"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText531->Wrap( -1 );
	m_staticText531->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText531, 0, wxALL|wxEXPAND, 5 );
	
	gnd1 = new wxStaticText( this, wxID_ANY, wxT("gnd1"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	gnd1->Wrap( -1 );
	gnd1->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( gnd1, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText541 = new wxStaticText( this, wxID_ANY, wxT("GND2"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText541->Wrap( -1 );
	m_staticText541->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText541, 0, wxALL|wxEXPAND, 5 );
	
	gnd2 = new wxStaticText( this, wxID_ANY, wxT("gnd2"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	gnd2->Wrap( -1 );
	gnd2->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( gnd2, 0, wxALL|wxEXPAND, 5 );
	
	
	gSizer151->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText551 = new wxStaticText( this, wxID_ANY, wxT("+5V"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText551->Wrap( -1 );
	m_staticText551->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText551, 0, wxALL|wxEXPAND, 5 );
	
	p5 = new wxStaticText( this, wxID_ANY, wxT("p5"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	p5->Wrap( -1 );
	p5->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( p5, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText5311 = new wxStaticText( this, wxID_ANY, wxT("+15V"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText5311->Wrap( -1 );
	m_staticText5311->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText5311, 0, wxALL|wxEXPAND, 5 );
	
	p15 = new wxStaticText( this, wxID_ANY, wxT("p15"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	p15->Wrap( -1 );
	p15->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( p15, 0, wxALL|wxEXPAND, 5 );
	
	
	gSizer151->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText5312 = new wxStaticText( this, wxID_ANY, wxT("-15V"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText5312->Wrap( -1 );
	m_staticText5312->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText5312, 0, wxALL|wxEXPAND, 5 );
	
	n15 = new wxStaticText( this, wxID_ANY, wxT("n15"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	n15->Wrap( -1 );
	n15->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( n15, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText5313 = new wxStaticText( this, wxID_ANY, wxT("+2.5V"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText5313->Wrap( -1 );
	m_staticText5313->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText5313, 0, wxALL|wxEXPAND, 5 );
	
	p25 = new wxStaticText( this, wxID_ANY, wxT("p25"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	p25->Wrap( -1 );
	p25->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( p25, 0, wxALL|wxEXPAND, 5 );
	
	
	gSizer151->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText5314 = new wxStaticText( this, wxID_ANY, wxT("+3.3V"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText5314->Wrap( -1 );
	m_staticText5314->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText5314, 0, wxALL|wxEXPAND, 5 );
	
	p33 = new wxStaticText( this, wxID_ANY, wxT("p33"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	p33->Wrap( -1 );
	p33->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( p33, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText531422 = new wxStaticText( this, wxID_ANY, wxT("+1.5V"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText531422->Wrap( -1 );
	m_staticText531422->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText531422, 0, wxALL|wxEXPAND, 5 );
	
	p1p5 = new wxStaticText( this, wxID_ANY, wxT("p1p5"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	p1p5->Wrap( -1 );
	p1p5->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( p1p5, 0, wxALL|wxEXPAND, 5 );
	
	
	gSizer151->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText5314221 = new wxStaticText( this, wxID_ANY, wxT("RF0"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText5314221->Wrap( -1 );
	m_staticText5314221->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText5314221, 0, wxALL|wxEXPAND, 5 );
	
	rf0 = new wxStaticText( this, wxID_ANY, wxT("rf0"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	rf0->Wrap( -1 );
	rf0->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( rf0, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText5314222 = new wxStaticText( this, wxID_ANY, wxT("RF1"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText5314222->Wrap( -1 );
	m_staticText5314222->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText5314222, 0, wxALL|wxEXPAND, 5 );
	
	rf1 = new wxStaticText( this, wxID_ANY, wxT("rf1"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	rf1->Wrap( -1 );
	rf1->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( rf1, 0, wxALL|wxEXPAND, 5 );
	
	
	gSizer151->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_staticText53142221 = new wxStaticText( this, wxID_ANY, wxT("RF2"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText53142221->Wrap( -1 );
	m_staticText53142221->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText53142221, 0, wxALL|wxEXPAND, 5 );
	
	rf2 = new wxStaticText( this, wxID_ANY, wxT("rf2"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	rf2->Wrap( -1 );
	rf2->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( rf2, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText53142222 = new wxStaticText( this, wxID_ANY, wxT("RF3"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	m_staticText53142222->Wrap( -1 );
	m_staticText53142222->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );
	
	gSizer151->Add( m_staticText53142222, 0, wxALL|wxEXPAND, 5 );
	
	rf3 = new wxStaticText( this, wxID_ANY, wxT("rf3"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE );
	rf3->Wrap( -1 );
	rf3->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	gSizer151->Add( rf3, 0, wxALL|wxEXPAND, 5 );
	
	sbSizer36->Add( gSizer151, 0, wxEXPAND, 5 );
	
	bSizer61->Add( sbSizer36, 0, wxALL|wxEXPAND, 5 );
	
	this->SetSizer( bSizer61 );
	this->Layout();
	bSizer61->Fit( this );
}

iGUI_Health::~iGUI_Health()
{
}

iGUI_Commands::iGUI_Commands( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer11;
	bSizer11 = new wxBoxSizer( wxVERTICAL );
	
	wxBoxSizer* bSizer291;
	bSizer291 = new wxBoxSizer( wxHORIZONTAL );
	
	bNull = new wxButton( this, ID_NULL, wxT("Null"), wxDefaultPosition, wxSize( 150,-1 ), 0 );
	bSizer291->Add( bNull, 0, wxALL, 5 );
	
	bSizer11->Add( bSizer291, 0, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer293;
	bSizer293 = new wxBoxSizer( wxHORIZONTAL );
	
	bResetWatchdog = new wxButton( this, ID_RESET_WATCHDOG, wxT("Reset Watchdog"), wxDefaultPosition, wxSize( 150,-1 ), 0 );
	bSizer293->Add( bResetWatchdog, 0, wxALL, 5 );
	
	bSizer11->Add( bSizer293, 0, 0, 5 );
	
	wxBoxSizer* bSizer29;
	bSizer29 = new wxBoxSizer( wxHORIZONTAL );
	
	bResetAll = new wxButton( this, ID_RESET_ALL, wxT("Reset All"), wxDefaultPosition, wxSize( 150,-1 ), 0 );
	bSizer29->Add( bResetAll, 0, wxALL, 5 );
	
	bSizer11->Add( bSizer29, 0, 0, 5 );
	
	wxBoxSizer* bSizer292;
	bSizer292 = new wxBoxSizer( wxHORIZONTAL );
	
	bResetPPS = new wxButton( this, ID_RESET_PPS, wxT("Reset PPS"), wxDefaultPosition, wxSize( 150,-1 ), 0 );
	bSizer292->Add( bResetPPS, 0, wxALL, 5 );
	
	bSizer11->Add( bSizer292, 0, 0, 5 );
	
	wxBoxSizer* bSizer17;
	bSizer17 = new wxBoxSizer( wxHORIZONTAL );
	
	bReset_PVT = new wxButton( this, ID_RESET_PVT, wxT("Reset PVT"), wxDefaultPosition, wxDefaultSize, 0 );
	bReset_PVT->SetMinSize( wxSize( 150,-1 ) );
	
	bSizer17->Add( bReset_PVT, 0, wxALL, 5 );
	
	bSizer11->Add( bSizer17, 0, 0, 5 );
	
	wxBoxSizer* bSizer2921;
	bSizer2921 = new wxBoxSizer( wxHORIZONTAL );
	
	bResetEKF = new wxButton( this, ID_RESET_EKF, wxT("Reset EKF"), wxDefaultPosition, wxSize( 150,-1 ), 0 );
	bSizer2921->Add( bResetEKF, 0, wxALL, 5 );
	
	bSizer11->Add( bSizer2921, 0, 0, 5 );
	
	wxBoxSizer* bSizer18;
	bSizer18 = new wxBoxSizer( wxHORIZONTAL );
	
	bReset_Channel = new wxButton( this, ID_RESET_CHANNEL, wxT("Reset Channel"), wxDefaultPosition, wxDefaultSize, 0 );
	bReset_Channel->SetMinSize( wxSize( 150,-1 ) );
	
	bSizer18->Add( bReset_Channel, 0, wxALL, 5 );
	
	wxString mReset_ChannelChoices[] = { wxT("All"), wxT("00"), wxT("01"), wxT("02"), wxT("03"), wxT("04"), wxT("05"), wxT("06"), wxT("07"), wxT("08"), wxT("09"), wxT("10"), wxT("11") };
	int mReset_ChannelNChoices = sizeof( mReset_ChannelChoices ) / sizeof( wxString );
	mReset_Channel = new wxChoice( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, mReset_ChannelNChoices, mReset_ChannelChoices, 0 );
	mReset_Channel->SetSelection( 0 );
	bSizer18->Add( mReset_Channel, 1, wxALL|wxEXPAND, 5 );
	
	bSizer11->Add( bSizer18, 0, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer19;
	bSizer19 = new wxBoxSizer( wxHORIZONTAL );
	
	bReset_Ephemeris = new wxButton( this, ID_RESET_EPHEMERIS, wxT("Reset Ephemeris"), wxDefaultPosition, wxDefaultSize, 0 );
	bReset_Ephemeris->SetMinSize( wxSize( 150,-1 ) );
	
	bSizer19->Add( bReset_Ephemeris, 0, wxALL, 5 );
	
	wxString mReset_EphemerisChoices[] = { wxT("All"), wxT("01"), wxT("02"), wxT("03"), wxT("04"), wxT("05"), wxT("06"), wxT("07"), wxT("08"), wxT("09"), wxT("10"), wxT("11"), wxT("12"), wxT("13"), wxT("14"), wxT("15"), wxT("16"), wxT("17"), wxT("18"), wxT("19"), wxT("20"), wxT("21"), wxT("22"), wxT("23"), wxT("24"), wxT("25"), wxT("26"), wxT("27"), wxT("28"), wxT("29"), wxT("30"), wxT("31"), wxT("32") };
	int mReset_EphemerisNChoices = sizeof( mReset_EphemerisChoices ) / sizeof( wxString );
	mReset_Ephemeris = new wxChoice( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, mReset_EphemerisNChoices, mReset_EphemerisChoices, 0 );
	mReset_Ephemeris->SetSelection( 0 );
	bSizer19->Add( mReset_Ephemeris, 1, wxALL|wxEXPAND, 5 );
	
	bSizer11->Add( bSizer19, 0, wxEXPAND, 5 );
	
	wxBoxSizer* bSizer20;
	bSizer20 = new wxBoxSizer( wxHORIZONTAL );
	
	bReset_Almanac = new wxButton( this, ID_RESET_ALMANAC, wxT("Reset Almanac"), wxDefaultPosition, wxDefaultSize, 0 );
	bReset_Almanac->SetMinSize( wxSize( 150,-1 ) );
	
	bSizer20->Add( bReset_Almanac, 0, wxALL, 5 );
	
	wxString mReset_AlmanacChoices[] = { wxT("All"), wxT("01"), wxT("02"), wxT("03"), wxT("04"), wxT("05"), wxT("06"), wxT("07"), wxT("08"), wxT("09"), wxT("10"), wxT("11"), wxT("12"), wxT("13"), wxT("14"), wxT("15"), wxT("16"), wxT("17"), wxT("18"), wxT("19"), wxT("20"), wxT("21"), wxT("22"), wxT("23"), wxT("24"), wxT("25"), wxT("26"), wxT("27"), wxT("28"), wxT("29"), wxT("30"), wxT("31"), wxT("32") };
	int mReset_AlmanacNChoices = sizeof( mReset_AlmanacChoices ) / sizeof( wxString );
	mReset_Almanac = new wxChoice( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, mReset_AlmanacNChoices, mReset_AlmanacChoices, 0 );
	mReset_Almanac->SetSelection( 0 );
	bSizer20->Add( mReset_Almanac, 1, wxALL|wxEXPAND, 5 );
	
	bSizer11->Add( bSizer20, 0, wxEXPAND, 5 );
	
	tCommand_Ack = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_LEFT|wxTE_MULTILINE );
	tCommand_Ack->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxT("Monospace") ) );
	
	bSizer11->Add( tCommand_Ack, 1, wxALL|wxEXPAND, 5 );
	
	this->SetSizer( bSizer11 );
	this->Layout();
}

iGUI_Commands::~iGUI_Commands()
{
}

iGUI_EEPROM::iGUI_EEPROM( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer33;
	bSizer33 = new wxBoxSizer( wxVERTICAL );
	
	wxBoxSizer* bSizer34;
	bSizer34 = new wxBoxSizer( wxHORIZONTAL );
	
	wxString mBurnChoices[] = { wxT("Burn"), wxT("Dump"), wxT("Verify") };
	int mBurnNChoices = sizeof( mBurnChoices ) / sizeof( wxString );
	mBurn = new wxChoice( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, mBurnNChoices, mBurnChoices, 0 );
	mBurn->SetSelection( 0 );
	bSizer34->Add( mBurn, 0, wxALL, 5 );
	
	wxString mBankChoices[] = { wxT("Bank A"), wxT("Bank B") };
	int mBankNChoices = sizeof( mBankChoices ) / sizeof( wxString );
	mBank = new wxChoice( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, mBankNChoices, mBankChoices, 0 );
	mBank->SetSelection( 0 );
	bSizer34->Add( mBank, 1, wxALL, 5 );
	
	wxString mTypeChoices[] = { wxT("Application Code"), wxT("Checksum Block"), wxT("Configuration Table") };
	int mTypeNChoices = sizeof( mTypeChoices ) / sizeof( wxString );
	mType = new wxChoice( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, mTypeNChoices, mTypeChoices, 0 );
	mType->SetSelection( 0 );
	bSizer34->Add( mType, 0, wxALL, 5 );
	
	mEEPROMFile = new wxFilePickerCtrl( this, wxID_ANY, wxT("/home/gheckler/navigator.bin"), wxT("Choose a file to burn to EEPROM"), wxT("*.bin"), wxDefaultPosition, wxSize( 600,-1 ), wxFLP_OPEN|wxFLP_SAVE );
	bSizer34->Add( mEEPROMFile, 3, wxALL, 5 );
	
	bSizer33->Add( bSizer34, 0, wxEXPAND, 5 );
	
	tFeedback = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_LEFT|wxTE_MULTILINE );
	tFeedback->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxT("Monospace") ) );
	
	bSizer33->Add( tFeedback, 1, wxALL|wxEXPAND, 5 );
	
	wxBoxSizer* bSizer35;
	bSizer35 = new wxBoxSizer( wxHORIZONTAL );
	
	mStop = new wxButton( this, ID_EEPROM_STOP, wxT("Stop"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer35->Add( mStop, 0, wxALL, 5 );
	
	mStart = new wxButton( this, ID_EEPROM_START, wxT("Start"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer35->Add( mStart, 0, wxALL, 5 );
	
	bSizer33->Add( bSizer35, 0, wxALIGN_RIGHT, 5 );
	
	this->SetSizer( bSizer33 );
	this->Layout();
}

iGUI_EEPROM::~iGUI_EEPROM()
{
}

iGUI_Log::iGUI_Log( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer30;
	bSizer30 = new wxBoxSizer( wxVERTICAL );
	
	wxStaticBoxSizer* sbSizer27;
	sbSizer27 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Log Path") ), wxVERTICAL );
	
	mFile = new wxDirPickerCtrl( this, wxID_ANY, wxT("/home/gpssim/workspace/gps-sdr/gse"), wxT("Select a folder"), wxDefaultPosition, wxDefaultSize, wxDIRP_DEFAULT_STYLE|wxDIRP_DIR_MUST_EXIST|wxDIRP_USE_TEXTCTRL );
	sbSizer27->Add( mFile, 1, wxALL|wxEXPAND, 5 );
	
	bSizer30->Add( sbSizer27, 0, wxALL|wxEXPAND, 5 );
	
	wxStaticBoxSizer* sbSizer14;
	sbSizer14 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Logged Items") ), wxVERTICAL );
	
	wxGridSizer* gSizer3;
	gSizer3 = new wxGridSizer( 2, 2, 0, 0 );
	
	cPVT = new wxCheckBox( this, wxID_ANY, wxT("PVT State"), wxDefaultPosition, wxDefaultSize, 0 );
	
	gSizer3->Add( cPVT, 0, wxALL, 5 );
	
	cClock = new wxCheckBox( this, wxID_ANY, wxT("Clock State"), wxDefaultPosition, wxDefaultSize, 0 );
	
	gSizer3->Add( cClock, 0, wxALL, 5 );
	
	cPPS = new wxCheckBox( this, wxID_ANY, wxT("PPS State"), wxDefaultPosition, wxDefaultSize, 0 );
	
	gSizer3->Add( cPPS, 0, wxALL, 5 );
	
	cEKFState = new wxCheckBox( this, wxID_ANY, wxT("EKF State"), wxDefaultPosition, wxDefaultSize, 0 );
	
	gSizer3->Add( cEKFState, 0, wxALL, 5 );
	
	cEKFCov = new wxCheckBox( this, wxID_ANY, wxT("EKF Covariance"), wxDefaultPosition, wxDefaultSize, 0 );
	
	gSizer3->Add( cEKFCov, 0, wxALL, 5 );
	
	cEKFRes = new wxCheckBox( this, wxID_ANY, wxT("EKF Residual"), wxDefaultPosition, wxDefaultSize, 0 );
	
	gSizer3->Add( cEKFRes, 0, wxALL, 5 );
