144
22, 24, 25, 25, 25, 26, 27, 29, 30, 30, 30, 31, 32, 34, 35, 35, 35, 36, 38, 39, 39, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 54, 54, 55, 56, 58, 59, 59, 59, 60, 62, 63, 63, 63, 64, 65, 67, 67, 68, 68, 68, 69, 71, 72, 74, 75, 77, 78, 78, 78, 79, 80, 82, 83, 83, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 96, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 101, 101, 101, 102, 103, 104, 105, 105, 106, 106, 106, 107, 108, 109, 111, 112, 112, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 132, 132, 133, 133, 133, 134, 135, 136, 138, 139, 141, 142, 142, 142, 143, 144, 146, 147, 148
/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with main.c; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
 */

#include "SDL4Cpp_main.h"
#include "SDL4Cpp_video.h"
#include "SDL4Cpp_mouse.h"

namespace SDL
{

	void WarpMouse(Uint16 x, Uint16 y)
	{
		SDL_WarpMouse(x, y);
	}

	int ShowCursor(int toggle)
	{
		return SDL_ShowCursor(toggle);
	}

	Cursor::Cursor() : m_Cursor(NULL)
	{
	}

	Cursor::Cursor(const Cursor &cursor) : m_Cursor(NULL)
	{
		// XXX TODO no error checking here to make sure area is valid
		memcpy(&m_Cursor->area, &cursor.m_Cursor->area, sizeof(SDL_Rect));

		m_Cursor->hot_x = cursor.m_Cursor->hot_x;
		m_Cursor->hot_y = cursor.m_Cursor->hot_y;

		// XXX TODO should there be some sanity checks here too?
		memcpy(m_Cursor->data, cursor.m_Cursor->data, sizeof(cursor.m_Cursor->data));
		memcpy(m_Cursor->mask, cursor.m_Cursor->mask, sizeof(cursor.m_Cursor->mask));
		memcpy(m_Cursor->save, cursor.m_Cursor->save, sizeof(cursor.m_Cursor->save));

	}

	Cursor::Cursor(const char *image[]) : m_Cursor(NULL)
	{
		Set(image);
	}

	Cursor::~Cursor()
	{
	}

	Cursor &Cursor::operator =(const Cursor &cursor)
	{
		// XXX TODO could probably copy the copy constructor and use = in there
	}

	bool Cursor::Create(Uint8 &data, Uint8 &mask, int w, int h, int hot_x, int hot_y)
	{
		m_Cursor = SDL_CreateCursor(&data, &mask, w, h, hot_x, hot_y);

		if(m_Cursor)
			return true;

		return false;
	}

	void Cursor::Set()
	{
		SetCursor(*this);
	}

	void Cursor::Set(const char *image[])
	{
		// Taken from SDL manual
		int i, row, col;
		Uint8 data[4*32];
		Uint8 mask[4*32];
		int hot_x, hot_y;

		i = -1;

		if(image == NULL) {
			throw SDL::LogicError("Unable to set cursor from a NULL image.");
		}

		for(row=0; row<32; ++row)
		{
			for(col=0; col<32; ++col)
			{
				if(col % 8)
				{
					data[i] <<= 1;
					mask[i] <<= 1;
				}
				else
				{
					++i;
					data[i] = mask[i] = 0;
				}

				switch (image[4+row][col])
				{
					case 'X':
						data[i] |= 0x01;
						mask[i] |= 0x01;
						break;
					case '.':
						mask[i] |= 0x01;
						break;
					case ' ':
						break;
				}
			}
		}

		sscanf(image[4+row], "%d,%d", &hot_x, &hot_y);

		m_Cursor = SDL_CreateCursor(data, mask, 32, 32, hot_x, hot_y);
		Set();
	}

	void SetCursor(Cursor &cursor)
	{
		if(cursor.m_Cursor == NULL) {
			throw SDL::LogicError("Cannot set cursor from NULL");
		}

		SDL_SetCursor(cursor.m_Cursor);
	}

	Cursor GetCursor()
	{
		Cursor temp;
		temp.m_Cursor = SDL_GetCursor();

		return temp;
	}
}

