167
6, 11, 16, 21, 21, 21, 22, 23, 25, 25, 25, 26, 27, 31, 35, 35, 35, 36, 39, 39, 39, 40, 41, 45, 46, 47, 47, 47, 48, 48, 49, 53, 57, 57, 57, 58, 58, 58, 59, 59, 60, 61, 62, 63, 63, 63, 64, 65, 66, 67, 69, 70, 74, 74, 74, 75, 76, 77, 78, 79, 80, 80, 81, 82, 83, 84, 85, 85, 86, 86, 87, 87, 89, 89, 91, 91, 93, 93, 94, 95, 96, 97, 97, 98, 98, 98, 99, 100, 100, 101, 102, 102, 103, 104, 104, 105, 105, 106, 106, 107, 107, 107, 108, 109, 109, 110, 110, 111, 116, 117, 118, 118, 119, 123, 126, 130, 131, 135, 136, 137, 137, 138, 138, 138, 139, 140, 141, 142, 143, 144, 144, 145, 145, 145, 146, 146, 147, 153, 154, 154, 154, 155, 156, 156, 156, 157, 158, 158, 159, 160, 160, 161, 161, 161, 162, 163, 164, 165, 166, 166, 167, 168, 168, 168, 169, 173, 174
#include "PicoDriveAppS60.h"
#include <picodrives60.rsg>
#include <apgcli.h>
#include <eikdll.h>
EXPORT_C CApaApplication* NewApplication()
{
        return (new CPicoDrive);
}

CPicoDrive::CPicoDrive()
{
}


CPicoDrive::~CPicoDrive()
{
}


CApaDocument* CPicoDrive::CreateDocumentL()
	{
	return new (ELeave) CPicoDriveDoc(*this);
	}
TUid CPicoDrive::AppDllUid() const
	{
	return TUid::Uid(0x101F9B49);
	}


CPicoDriveDoc::CPicoDriveDoc(CEikApplication& aApp):CAknDocument(aApp)
{
}

CPicoDriveDoc::~CPicoDriveDoc()
	{
	}

CEikAppUi* CPicoDriveDoc::CreateAppUiL()
	{
	return new (ELeave) CPicoDriveUi;
	}


void CPicoDriveUi::HandleForegroundEventL(TBool aForeground)
{
	if(aForeground)
	{
		BringUpEmulatorL();	
	}
}

CPicoDriveUi::CPicoDriveUi()
{
}

CPicoDriveUi::~CPicoDriveUi()
	{
	
	 RemoveFromViewStack(*iView,iView);
	DeregisterViewAndRemoveStack(*iView);
	delete iView;
	if(iWatcher)
	{
		iThreadWatch.LogonCancel(iWatcher->iStatus);
		iWatcher->Cancel();
	}
	delete iWatcher;

	iThreadWatch.Close();
	}


void CPicoDriveUi::ConstructL()
	{
	BaseConstructL();
	iView = new(ELeave)CPicoView;
	iView->SetMopParent(this);
	iView->ConstructL();
	RegisterViewAndAddStackL(*iView);
	AddToViewStackL(*iView,iView);
	SetDefaultViewL(*iView);
	TBuf<128> startFile;
	startFile = iEikonEnv->EikAppUi()->Application()->AppFullName();
	TParse parser;
	parser.Set(startFile,NULL,NULL);
	
	startFile = parser.DriveAndPath();	
#ifndef __WINS__
	startFile.Append( _L("PicoDrive.EXE"));
#else
	startFile.Append( _L("PicoDrive.DLL"));
#endif
	CApaCommandLine* cmdLine=CApaCommandLine::NewLC(startFile);
	RApaLsSession lsSession;
	lsSession.Connect();
	CleanupClosePushL(lsSession);
	lsSession.StartApp(*cmdLine,iThreadId);
	CleanupStack::PopAndDestroy();//close lsSession
	CleanupStack::PopAndDestroy(cmdLine);
	User::After(500000);// Let the application start
	TApaTaskList taskList(iEikonEnv->WsSession());
	TApaTask myTask=taskList.FindApp(TUid::Uid(0x101F9B49));
	myTask.SendToBackground();
	TApaTask exeTask=taskList.FindByPos(0);
	iExeWgId=exeTask.WgId();
	if(iThreadWatch.Open(iThreadId)==KErrNone)
	{
		iWatcher = new (ELeave)CPicoWatcher;
		iWatcher->iAppUi=this;
		iThreadWatch.Logon(iWatcher->iStatus);	
	}
}


CPicoWatcher::CPicoWatcher():CActive(EPriorityStandard)
{
	CActiveScheduler::Add(this);
	iStatus=KRequestPending;
	SetActive();
}

CPicoWatcher::~CPicoWatcher()
{
}
void CPicoWatcher::DoCancel()
{
}

void CPicoWatcher::RunL()
{
	iAppUi->HandleCommandL(EEikCmdExit);
}

void CPicoDriveUi::BringUpEmulatorL()
{
	RThread thread;
	if(thread.Open(iThreadId)==KErrNone)
	{
		thread.Close();
		TApaTask apaTask(iEikonEnv->WsSession());
		apaTask.SetWgId(iExeWgId);
		apaTask.BringToForeground();
	}
	else
	{
		iExeWgId=-1;
	}
}



void CPicoDriveUi::HandleCommandL(TInt aCommand)
{
	
	switch(aCommand)
	{
	case EEikCmdExit:
		{
			RThread thread;
			if(thread.Open(iThreadId)==KErrNone)
			{
				thread.Terminate(0);
				thread.Close();
			}
			Exit();
		} 
		break;
	
	}
}

GLDEF_C  TInt E32Dll(TDllReason)
{
	return KErrNone;
}



