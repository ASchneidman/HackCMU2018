59
4, 8, 12, 12, 17, 18, 18, 22, 23, 23, 28, 28, 30, 36, 36, 44, 44, 47, 53, 53, 57, 57, 70, 70, 76, 76, 83, 83, 92, 92, 96, 96, 103, 103, 114, 114, 124, 124, 129, 129, 134, 134, 139, 146, 154, 160, 164, 164, 166, 167, 171, 171, 177, 179, 180, 185, 185, 147, 56
#include<cstdio>
#include<cstring>
#include<iostream>
using namespace std;

const int maxn = 500 + 10;
struct bign
{
	int len, s[maxn];

	bign()
	{
		memset(s, 0, sizeof(s));
		len = 1;
	}

	bign(int num)
	{
		*this = num;
	}

	bign(const char* num)
	{
		*this = num;
	}

	bign operator = (int num)
	{
		char s[maxn];
		sprintf(s, "%d", num);
		*this = s;
		return *this;
	}

	bign operator = (const char* num)
	{
		len = strlen(num);
		for(int i = 0; i < len; i++)
		s[i] = num[len-i-1] - '0';
		return *this;
	}

	string str() const
	{
		string res = "";
		for(int i = 0; i < len; i++)
			res = (char)(s[i] + '0') + res;
		if(res == "") res = "0";
		return res;
	}

	bign operator + (const bign& b) const
	{
		bign c;
		c.len = 0;
		for(int i = 0, g = 0; g || i < max(len, b.len); i++)
		{
			int x = g;
			if(i < len)
				x += s[i];
			if(i < b.len)
				x += b.s[i];
			c.s[c.len++] = x % 10;
			g = x / 10;
		}
		return c;
	}

	void clean()
	{
		while(len > 1 && !s[len-1])
			len--;
	}

	bign operator * (const bign& b)
	{
		bign c;
		c.len = len + b.len;
		for(int i = 0; i < len; i++)
			for(int j = 0; j < b.len; j++)
				c.s[i+j] += s[i] * b.s[j];
		for(int i = 0; i < c.len-1; i++)
		{
			c.s[i+1] += c.s[i] / 10;
			c.s[i] %= 10;
		}
		c.clean();
		return c;
	}

	bign operator - (const bign& b)
	{
		bign c;
		c.len = 0;
		for(int i = 0, g = 0; i < len; i++)
		{
			int x = s[i] - g;
			if(i < b.len)
				x -= b.s[i];
			if(x >= 0)
				g = 0;
			else
			{
				g = 1;
				x += 10;
			}
			c.s[c.len++] = x;
		}
		c.clean();
		return c;
	}

	bool operator < (const bign& b) const
	{
		if(len != b.len)
			return len < b.len;
		for(int i = len-1; i >= 0; i--)
			if(s[i] != b.s[i])
				return s[i] < b.s[i];
		return false;
	}

	bool operator > (const bign& b) const
	{
		return b < *this;
	}

	bool operator <= (const bign& b)
	{
		return !(b > *this);
	}

	bool operator == (const bign& b)
	{
		return !(b < *this) && !(*this < b);
	}

	bign operator += (const bign& b)
	{
		*this = *this + b;
		return *this;
	}
};

istream& operator >> (istream &in, bign& x)
{
	string s;
	in >> s;
	x = s.c_str();
	return in;
}

ostream& operator << (ostream &out, const bign& x)
{
	out << x.str();
	return out;
}

int main()
{
	bign a, b;
	char o, s[1000], temp[1000];
	while(fgets(s, 1000, stdin) != NULL)
	{
		int i = 0, j = 0;
		while(!isdigit(s[i++])); i--;
		while(s[i++] == '0'); i--;
		if(!isdigit(s[i]))
			a = 0;
		else
		{
			while(isdigit(s[i]))
				temp[j++] = s[i++];
			temp[j] = '\0';
			a = temp;
		}
		while(s[i++] != '+' && s[i-1] != '*');
		o = s[i-1];
		while(!isdigit(s[i++])); i--;
		while(s[i++] == '0'); i--;
		j = 0;
		if(!isdigit(s[i]))
			a = 0;
		else
		{
			while(isdigit(s[i]))
				temp[j++] = s[i++];
			temp[j] = '\0';
			b = temp;
		}
		cout << s;
		if(a > 0x7fffffff)
			cout << "first number too big" << endl;
		if(b > 0x7fffffff)
			cout << "second number too big" << endl;
		if(o == '+')
			if(a + b > 0x7fffffff)
				cout << "result too big" << endl;
		if(o == '*')
			if(a * b > 0x7fffffff)
				cout << "result too big" << endl;
	}
	return 0;
}

