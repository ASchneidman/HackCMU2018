65
7, 8, 10, 10, 10, 10, 12, 14, 16, 16, 16, 17, 17, 18, 21, 21, 21, 22, 26, 27, 28, 30, 31, 33, 33, 33, 33, 34, 34, 34, 34, 37, 45, 46, 48, 48, 48, 48, 50, 52, 54, 54, 54, 55, 55, 56, 59, 59, 59, 60, 64, 65, 66, 68, 69, 71, 71, 71, 71, 72, 72, 72, 72, 75, 47
<<<<<<< HEAD
/*
You are in a party of N people, where only one person is known to everyone. Such a person may be present in the party, if yes, (s)he doesn’t know anyone in the party. Your task is to find the stranger (celebrity) in party.
You will be given a square matrix M where if an element of row i and column j  is set to 1 it means there is an edge from ith person to jth person. An edge represent the relation that i th person knows j th person. You need to complete the function getId which finds the id of the celebrity if present else return -1. The function getId takes two arguments the square matrix M and its size n.
*/
int getId(int M[MAX][MAX], int n)
{
    //Your code here
    stack<int> celeb;
    for(int i=0;i<n;++i)
        celeb.push(i);
    int a=celeb.top();
    celeb.pop();
    int b=celeb.top();
    celeb.pop();
    while(celeb.size()>1){
        if(M[a][b]){
            a=celeb.top();
            celeb.pop();
        }
        else{
            b=celeb.top();
            celeb.pop();
        }
    }
    int c=celeb.top();
    if(M[c][b])
        c=b;

    if(M[c][a])
        c=a;

    for(int i=0;i<n;++i)
        if(i!=c and (!M[i][c] or M[c][i]))
            return -1;
    return c;

}
=======
/*
You are in a party of N people, where only one person is known to everyone. Such a person may be present in the party, if yes, (s)he doesn’t know anyone in the party. Your task is to find the stranger (celebrity) in party.
You will be given a square matrix M where if an element of row i and column j  is set to 1 it means there is an edge from ith person to jth person. An edge represent the relation that i th person knows j th person. You need to complete the function getId which finds the id of the celebrity if present else return -1. The function getId takes two arguments the square matrix M and its size n.
*/
int getId(int M[MAX][MAX], int n)
{
    //Your code here
    stack<int> celeb;
    for(int i=0;i<n;++i)
        celeb.push(i);
    int a=celeb.top();
    celeb.pop();
    int b=celeb.top();
    celeb.pop();
    while(celeb.size()>1){
        if(M[a][b]){
            a=celeb.top();
            celeb.pop();
        }
        else{
            b=celeb.top();
            celeb.pop();
        }
    }
    int c=celeb.top();
    if(M[c][b])
        c=b;

    if(M[c][a])
        c=a;

    for(int i=0;i<n;++i)
        if(i!=c and (!M[i][c] or M[c][i]))
            return -1;
    return c;

}
>>>>>>> 1cef6792d706b1e8b7eab9954b86478c9c79e871
