681
26, 29, 30, 31, 32, 32, 32, 33, 34, 35, 36, 36, 37, 38, 39, 39, 40, 41, 45, 46, 47, 47, 47, 48, 49, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 98, 98, 99, 99, 100, 101, 101, 102, 103, 104, 106, 107, 107, 107, 108, 110, 111, 112, 112, 112, 113, 114, 114, 114, 115, 115, 116, 116, 116, 117, 118, 119, 120, 121, 123, 124, 125, 125, 125, 126, 127, 128, 129, 129, 129, 130, 131, 132, 133, 134, 135, 136, 136, 137, 137, 137, 138, 139, 140, 140, 140, 141, 142, 143, 144, 144, 145, 145, 145, 146, 147, 148, 150, 151, 151, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 163, 163, 164, 165, 166, 167, 169, 170, 171, 171, 172, 172, 172, 173, 173, 174, 174, 174, 175, 176, 177, 178, 179, 180, 182, 183, 183, 183, 184, 185, 186, 187, 187, 188, 189, 189, 190, 191, 191, 192, 193, 193, 194, 195, 195, 196, 197, 197, 198, 199, 199, 200, 201, 201, 202, 203, 204, 204, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 214, 214, 215, 215, 215, 216, 217, 217, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 234, 235, 236, 236, 236, 237, 238, 239, 241, 242, 243, 245, 246, 246, 246, 247, 248, 250, 251, 251, 251, 252, 253, 254, 255, 255, 256, 257, 257, 258, 259, 259, 260, 261, 262, 263, 265, 266, 266, 266, 267, 268, 270, 271, 271, 271, 272, 273, 274, 274, 274, 275, 276, 277, 278, 280, 281, 281, 282, 283, 289, 290, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 318, 319, 319, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 339, 339, 340, 341, 341, 341, 342, 343, 344, 344, 345, 346, 346, 347, 347, 347, 348, 349, 349, 349, 350, 351, 352, 353, 355, 356, 357, 359, 360, 362, 363, 364, 364, 365, 365, 365, 366, 367, 368, 369, 370, 371, 371, 372, 373, 375, 376, 377, 377, 377, 378, 379, 379, 379, 380, 381, 382, 383, 384, 385, 386, 387, 387, 387, 388, 389, 390, 391, 392, 392, 392, 393, 393, 393, 394, 395, 395, 395, 396, 397, 398, 399, 400, 401, 401, 401, 402, 403, 404, 405, 405, 405, 406, 407, 408, 409, 410, 411, 412, 413, 413, 413, 414, 415, 416, 416, 416, 417, 418, 419, 420, 421, 422, 423, 423, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 437, 437, 438, 438, 438, 439, 440, 441, 441, 441, 442, 443, 444, 445, 446, 447, 448, 448, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 462, 462, 463, 463, 463, 464, 465, 466, 466, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 483, 483, 484, 484, 484, 485, 486, 487, 487, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 501, 501, 502, 502, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 516, 517, 517, 517, 518, 519, 520, 521, 522, 523, 524, 524, 524, 525, 525, 525, 526, 528, 529, 530, 531, 531, 531, 532, 533, 534, 535, 535, 536, 538, 539, 540, 540, 540, 541, 542, 543, 544, 544, 545, 547, 548, 549, 549, 549, 550, 551, 551, 551, 552, 553, 554, 555, 556, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 575, 576, 576, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596
/*
 * Copyright (C) 2005  Justin Karneges
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include <QtCore>
#include <QtNetwork>
#include "qjdns.h"

QString dataToString(const QByteArray &buf)
{
	QString out;
	for(int n = 0; n < buf.size(); ++n)
	{
		unsigned char c = (unsigned char)buf[n];
		if(c == '\\')
			out += "\\\\";
		else if(c >= 0x20 && c < 0x7f)
			out += c;
		else
			out += QString().sprintf("\\x%02x", (unsigned int)c);
	}
	return out;
}

void print_record(const QJDns::Record &r)
{
	switch(r.type)
	{
		case QJDns::A:
			printf("  A: [%s] (ttl=%d)\n", qPrintable(r.address.toString()), r.ttl);
			break;
		case QJDns::Aaaa:
			printf("  AAAA: [%s] (ttl=%d)\n", qPrintable(r.address.toString()), r.ttl);
			break;
		case QJDns::Mx:
			printf("  MX: [%s] priority=%d (ttl=%d)\n", r.name.data(), r.priority, r.ttl);
			break;
		case QJDns::Srv:
			printf("  SRV: [%s] port=%d priority=%d weight=%d (ttl=%d)\n", r.name.data(), r.port, r.priority, r.weight, r.ttl);
			break;
		case QJDns::Cname:
			printf("  CNAME: [%s] (ttl=%d)\n", r.name.data(), r.ttl);
			break;
		case QJDns::Ptr:
			printf("  PTR: [%s] (ttl=%d)\n", r.name.data(), r.ttl);
			break;
		case QJDns::Txt:
		{
			printf("  TXT: count=%d (ttl=%d)\n", r.texts.count(), r.ttl);
			for(int n = 0; n < r.texts.count(); ++n)
				printf("    len=%d [%s]\n", r.texts[n].size(), qPrintable(dataToString(r.texts[n])));
			break;
		}
		case QJDns::Hinfo:
			printf("  HINFO: [%s] [%s] (ttl=%d)\n", r.cpu.data(), r.os.data(), r.ttl);
			break;
		case QJDns::Ns:
			printf("  NS: [%s] (ttl=%d)\n", r.name.data(), r.ttl);
			break;
		default:
			printf("  (Unknown): type=%d, size=%d (ttl=%d)\n", r.type, r.rdata.size(), r.ttl);
			break;
	}
}

class App : public QObject
{
	Q_OBJECT
public:
	bool opt_debug, opt_ipv6, opt_quit;
	int quit_time;
	QString mode, type, name, ipaddr;
	QStringList nslist;
	QList<QJDns::Record> pubitems;
	QJDns jdns;
	int req_id;

	App()
	{
		connect(&jdns, SIGNAL(resultsReady(int, const QJDns::Response &)), SLOT(jdns_resultsReady(int, const QJDns::Response &)));
		connect(&jdns, SIGNAL(published(int)), SLOT(jdns_published(int)));
		connect(&jdns, SIGNAL(error(int, QJDns::Error)), SLOT(jdns_error(int, QJDns::Error)));
		connect(&jdns, SIGNAL(shutdownFinished()), SLOT(jdns_shutdownFinished()));
		connect(&jdns, SIGNAL(debugLinesReady()), SLOT(jdns_debugLinesReady()));
	}

	~App()
	{
	}

public slots:
	void start()
	{
		if(mode == "uni")
		{
			if(!jdns.init(QJDns::Unicast, opt_ipv6 ? QHostAddress::AnyIPv6 : QHostAddress::Any))
			{
				jdns_debugLinesReady();
				printf("unable to bind\n");
				emit quit();
				return;
			}

			QList<QJDns::NameServer> addrs;
			for(int n = 0; n < nslist.count(); ++n)
			{
				QJDns::NameServer host;
				QString str = nslist[n];
				if(str == "mul")
				{
					if(opt_ipv6)
						host.address = QHostAddress("FF02::FB");
					else
						host.address = QHostAddress("224.0.0.251");
					host.port = 5353;
				}
				else
				{
					int at = str.indexOf(';');
					if(at != -1)
					{
						host.address = QHostAddress(str.mid(0, at));
						host.port = str.mid(at + 1).toInt();
					}
					else
					{
						host.address = QHostAddress(str);
					}
				}

				if(host.address.isNull() || host.port <= 0)
				{
					printf("bad nameserver: [%s]\n", qPrintable(nslist[n]));
					emit quit();
					return;
				}
				addrs += host;
			}

			if(addrs.isEmpty())
				addrs = QJDns::systemInfo().nameServers;

			if(addrs.isEmpty())
			{
				printf("no nameservers were detected or specified\n");
				emit quit();
				return;
			}

			jdns.setNameServers(addrs);
		}
		else
		{
			if(!jdns.init(QJDns::Multicast, opt_ipv6 ? QHostAddress::AnyIPv6 : QHostAddress::Any))
			{
				jdns_debugLinesReady();
				printf("unable to bind\n");
				emit quit();
				return;
			}
		}

		if(mode == "uni" || mode == "mul")
		{
			int x = QJDns::A;
			if(type == "ptr")
				x = QJDns::Ptr;
			else if(type == "srv")
				x = QJDns::Srv;
			else if(type == "a")
				x = QJDns::A;
			else if(type == "aaaa")
				x = QJDns::Aaaa;
			else if(type == "mx")
				x = QJDns::Mx;
			else if(type == "txt")
				x = QJDns::Txt;
			else if(type == "hinfo")
				x = QJDns::Hinfo;
			else if(type == "cname")
				x = QJDns::Cname;
			else if(type == "any")
				x = QJDns::Any;
			else
			{
				bool ok;
				int y = type.toInt(&ok);
				if(ok)
					x = y;
			}

			req_id = jdns.queryStart(name.toLatin1(), x);
			printf("[%d] Querying for [%s] type=%d ...\n", req_id, qPrintable(name), x);
		}
		else // publish
		{
			for(int n = 0; n < pubitems.count(); ++n)
			{
				const QJDns::Record &rr = pubitems[n];
				QJDns::PublishMode m = QJDns::Unique;
				if(rr.type == QJDns::Ptr)
					m = QJDns::Shared;
				int id = jdns.publishStart(m, rr);
				printf("[%d] Publishing [%s] type=%d ...\n", id, rr.owner.data(), rr.type);
			}
		}

		if(opt_quit)
			QTimer::singleShot(quit_time * 1000, this, SLOT(doShutdown()));
	}

signals:
	void quit();

private slots:
	void jdns_resultsReady(int id, const QJDns::Response &results)
	{
		printf("[%d] Results\n", id);
		for(int n = 0; n < results.answerRecords.count(); ++n)
			print_record(results.answerRecords[n]);

		if(mode == "uni")
			jdns.shutdown();
	}

	void jdns_published(int id)
	{
		printf("[%d] Published\n", id);
	}

	void jdns_error(int id, QJDns::Error e)
	{
		QString str;
		if(e == QJDns::ErrorGeneric)
			str = "Generic";
		else if(e == QJDns::ErrorNXDomain)
			str = "NXDomain";
		else if(e == QJDns::ErrorTimeout)
			str = "Timeout";
		else if(e == QJDns::ErrorConflict)
			str = "Conflict";
		printf("[%d] Error: %s\n", id, qPrintable(str));
		jdns.shutdown();
	}

	void jdns_shutdownFinished()
	{
		emit quit();
	}

	void jdns_debugLinesReady()
	{
		QStringList lines = jdns.debugLines();
		if(opt_debug)
		{
			for(int n = 0; n < lines.count(); ++n)
				printf("jdns: %s\n", qPrintable(lines[n]));
		}
	}

	void doShutdown()
	{
		jdns.shutdown();
	}
};

#include "main.moc"

void usage()
{
	printf("usage: jdns (options) uni [type] [name] (nameserver(;port)|mul ...)\n");
	printf("       jdns (options) mul [type] [name]\n");
	printf("       jdns (options) pub [items ...]\n");
	printf("       jdns sys\n");
	printf("\n");
	printf("options:\n");
	printf("  -d     show debug output\n");
	printf("  -6     use ipv6\n");
	printf("  -q x   quit x seconds after starting\n");
	printf("\n");
	printf("uni/mul types: a aaaa ptr srv mx txt hinfo cname any\n");
	printf("pub items: ptr:name,answer srv:name,answer,port a:name,ipaddr\n");
	printf("           txt:name,str0,...,strn aaaa:name,ipaddr\n");
	printf("\n");
	printf("examples:\n");
	printf("  jdns uni a jabber.org 192.168.0.1\n");
	printf("  jdns uni srv _xmpp-client._tcp.jabber.org 192.168.0.1;53\n");
	printf("  jdns uni 10 user@host._presence._tcp.local mul\n");
	printf("  jdns mul a foobar.local\n");
	printf("  jdns mul ptr _services._dns-sd._udp.local\n");
	printf("  jdns pub a:mybox.local.,192.168.0.55\n");
	printf("\n");
}

int main(int argc, char **argv)
{
	QCoreApplication app(argc, argv);

	if(argc < 2)
	{
		usage();
		return 1;
	}

	// get args
	QStringList args;
	for(int n = 1; n < argc; ++n)
		args += QString(argv[n]);

	bool opt_debug = false;
	bool opt_ipv6 = false;
	bool opt_quit = false;
	int quit_time = 0;
	QString mode, type, name, ipaddr;
	QStringList nslist;
	QList<QJDns::Record> pubitems;

	// options
	for(int n = 0; n < args.count(); ++n)
	{
		if(args[n].left(1) == "-")
		{
			if(args[n] == "-d")
				opt_debug = true;
			else if(args[n] == "-6")
				opt_ipv6 = true;
			else if(args[n] == "-q")
			{
				if(n + 1 >= args.count())
				{
					printf("need to specify number of seconds\n");
					usage();
					return 1;
				}

				int x = args[n + 1].toInt();
				if(x < 1)
					x = 30;

				opt_quit = true;
				quit_time = x;

				args.removeAt(n + 1);
			}
			else
			{
				printf("bad option\n");
				usage();
				return 1;
			}
			args.removeAt(n);
			--n; // adjust position
		}
	}

	mode = args[0];
	if(mode == "uni" || mode == "mul")
	{
		if(args.count() < 3)
		{
			printf("not enough args\n");
			usage();
			return 1;
		}
		type = args[1];
		name = args[2];
		if(mode == "uni")
		{
			for(int n = 3; n < args.count(); ++n)
				nslist += QString(args[n]);
		}
	}
	else if(mode == "pub")
	{
		if(args.count() < 2)
		{
			printf("not enough args\n");
			usage();
			return 1;
		}
		for(int n = 1; n < args.count(); ++n)
		{
			QString arg = args[n];
			int at = arg.indexOf(':');
			if(at == -1)
			{
				printf("missing colon\n");
				usage();
				return 1;
			}
			QString type = arg.mid(0, at).toLower();
			QString val = arg.mid(at + 1);
			if(type == "a")
			{
				QStringList list = val.split(',');
				if(list.count() != 2)
				{
					printf("bad format for A type\n");
					usage();
					return 1;
				}
				QHostAddress host(list[1]);
				if(host.isNull() || host.protocol() != QAbstractSocket::IPv4Protocol)
				{
					printf("bad format for A type IP address\n");
					usage();
					return 1;
				}

				QJDns::Record rec;
				rec.owner = list[0].toLatin1();
				rec.type = QJDns::A;
				rec.ttl = 120;
				rec.haveKnown = true;
				rec.address = host;
				pubitems += rec;
			}
			else if(type == "aaaa")
			{
				QStringList list = val.split(',');
				if(list.count() != 2)
				{
					printf("bad format for AAAA type\n");
					usage();
					return 1;
				}
				QHostAddress host(list[1]);
				if(host.isNull() || host.protocol() != QAbstractSocket::IPv6Protocol)
				{
					printf("bad format for AAAA type IP address\n");
					usage();
					return 1;
				}

				QJDns::Record rec;
				rec.owner = list[0].toLatin1();
				rec.type = QJDns::Aaaa;
				rec.ttl = 120;
				rec.haveKnown = true;
				rec.address = host;
				pubitems += rec;
			}
			else if(type == "srv")
			{
				QStringList list = val.split(',');
				if(list.count() != 3)
				{
					printf("bad format for SRV type\n");
					usage();
					return 1;
				}

				QJDns::Record rec;
				rec.owner = list[0].toLatin1();
				rec.type = QJDns::Srv;
				rec.ttl = 120;
				rec.haveKnown = true;
				rec.name = list[1].toLatin1();
				rec.priority = 0;
				rec.weight = 0;
				rec.port = list[2].toInt();
				pubitems += rec;
			}
			else if(type == "ptr")
			{
				QStringList list = val.split(',');
				if(list.count() != 2)
				{
					printf("bad format for PTR type\n");
					usage();
					return 1;
				}

				QJDns::Record rec;
				rec.owner = list[0].toLatin1();
				rec.type = QJDns::Ptr;
				rec.ttl = 120;
				rec.haveKnown = true;
				rec.name = list[1].toLatin1();
				pubitems += rec;
			}
			else if(type == "txt")
			{
				QStringList list = val.split(',');
				QList<QByteArray> texts;
				for(int n = 1; n < list.count(); ++n)
					texts += list[n].toLatin1();

				QJDns::Record rec;
				rec.owner = list[0].toLatin1();
				rec.type = QJDns::Txt;
				rec.ttl = 120;
				rec.haveKnown = true;
				rec.texts = texts;
				pubitems += rec;
			}
			else
			{
				printf("bad record type [%s]\n", qPrintable(type));
				usage();
				return 1;
			}
		}
	}
	else if(mode == "sys")
	{
		QJDns::SystemInfo info = QJDns::systemInfo();

		printf("DNS System Information\n");
		printf("  Name Servers:\n");
		if(!info.nameServers.isEmpty())
		{
			for(int n = 0; n < info.nameServers.count(); ++n)
				printf("    %s\n", qPrintable(info.nameServers[n].address.toString()));
		}
		else
			printf("    (None)\n");

		printf("  Domains:\n");
		if(!info.domains.isEmpty())
		{
			for(int n = 0; n < info.domains.count(); ++n)
				printf("    [%s]\n", info.domains[n].data());
		}
		else
			printf("    (None)\n");

		printf("  Hosts:\n");
		if(!info.hosts.isEmpty())
		{
			for(int n = 0; n < info.hosts.count(); ++n)
			{
				const QJDns::DnsHost &h = info.hosts[n];
				printf("    [%s] -> %s\n", h.name.data(), qPrintable(h.address.toString()));
			}
		}
		else
			printf("    (None)\n");

		QHostAddress addr;
		printf("Primary IPv4 Multicast Address: ");
		addr = QJDns::detectPrimaryMulticast(QHostAddress::Any);
		if(!addr.isNull())
			printf("%s\n", qPrintable(addr.toString()));
		else
			printf("(None)\n");
		printf("Primary IPv6 Multicast Address: ");
		addr = QJDns::detectPrimaryMulticast(QHostAddress::AnyIPv6);
		if(!addr.isNull())
			printf("%s\n", qPrintable(addr.toString()));
		else
			printf("(None)\n");

		return 0;
	}
	else
	{
		usage();
		return 1;
	}

	App a;
	a.opt_debug = opt_debug;
	a.opt_ipv6 = opt_ipv6;
	a.opt_quit = opt_quit;
	a.quit_time = quit_time;
	a.mode = mode;
	a.type = type.toLower();
	a.name = name;
	a.ipaddr = ipaddr;
	a.nslist = nslist;
	a.pubitems = pubitems;
	QObject::connect(&a, SIGNAL(quit()), &app, SLOT(quit()));
	QTimer::singleShot(0, &a, SLOT(start()));
	app.exec();
	return 0;
}
