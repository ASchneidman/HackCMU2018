45
2, 4, 5, 5, 9, 9, 10, 11, 11, 13, 13, 14, 17, 19, 24, 26, 26, 27, 28, 28, 29, 31, 38, 40, 41, 41, 45, 45, 46, 47, 47, 49, 49, 50, 53, 55, 60, 62, 62, 63, 64, 64, 65, 67, 43
<<<<<<< HEAD
//You are required to complete this method
void levelOrder(struct Node* node)
{
 //Your code here
    queue<Node*>q;
    queue<Node*>ans;
    q.push(node);
    while(true){
        int noOfNodes=q.size();
        if(noOfNodes==0)
            break;
        while(noOfNodes){
            Node *cur=q.front();
            q.pop();
            ans.push(cur);
            if(cur->left)
                q.push(cur->left);
            if(cur->right)
                q.push(cur->right);
            noOfNodes--;
        }
        ans.push(NULL);

    }
    while(ans.size()){
        node=ans.front();
        if(node==NULL)
            cout<<"$ ";
        else
            cout<<node->data<<" ";
        ans.pop();
    }
}


=======
//You are required to complete this method
void levelOrder(struct Node* node)
{
 //Your code here
    queue<Node*>q;
    queue<Node*>ans;
    q.push(node);
    while(true){
        int noOfNodes=q.size();
        if(noOfNodes==0)
            break;
        while(noOfNodes){
            Node *cur=q.front();
            q.pop();
            ans.push(cur);
            if(cur->left)
                q.push(cur->left);
            if(cur->right)
                q.push(cur->right);
            noOfNodes--;
        }
        ans.push(NULL);

    }
    while(ans.size()){
        node=ans.front();
        if(node==NULL)
            cout<<"$ ";
        else
            cout<<node->data<<" ";
        ans.pop();
    }
}


>>>>>>> 1cef6792d706b1e8b7eab9954b86478c9c79e871
