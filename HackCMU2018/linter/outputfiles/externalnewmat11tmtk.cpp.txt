205
10, 12, 13, 15, 18, 29, 30, 31, 32, 35, 35, 37, 38, 38, 39, 39, 40, 41, 42, 42, 43, 43, 44, 45, 46, 47, 48, 50, 51, 52, 52, 53, 54, 55, 55, 56, 56, 57, 58, 59, 60, 61, 63, 64, 64, 65, 65, 66, 67, 68, 68, 69, 69, 70, 71, 72, 73, 74, 76, 77, 78, 78, 79, 80, 81, 81, 82, 82, 83, 84, 85, 86, 87, 89, 90, 91, 91, 93, 94, 94, 95, 95, 96, 97, 98, 99, 100, 102, 103, 104, 104, 106, 107, 107, 108, 108, 109, 110, 111, 112, 113, 115, 116, 117, 117, 119, 120, 120, 121, 121, 122, 123, 124, 125, 126, 128, 129, 129, 130, 130, 130, 131, 132, 133, 133, 133, 134, 134, 135, 136, 137, 138, 139, 141, 142, 142, 143, 143, 143, 144, 145, 146, 146, 146, 147, 147, 148, 149, 150, 151, 152, 154, 155, 155, 156, 156, 156, 157, 158, 159, 159, 159, 160, 160, 161, 162, 163, 164, 165, 167, 168, 168, 169, 169, 169, 170, 171, 172, 172, 172, 173, 173, 174, 175, 176, 177, 178, 179, 179, 180, 181, 183, 184, 185, 186, 186, 187, 188, 189, 191, 198, 199, 200, 201, 202
/// \ingroup newmat
///@{

/// \file tmtk.cpp
/// Part of matrix library test program.


#define WANT_STREAM

#include "include.h"

#include "newmatap.h"
#include "newmatio.h"

#include "tmt.h"

#ifdef use_namespace
using namespace NEWMAT;
#endif


static inline int my_min(int x, int y) { return x < y ? x : y; }
static inline int my_max(int x, int y) { return x > y ? x : y; }


#ifdef SETUP_C_SUBSCRIPTS

void trymatk()
{
   Tracer et("Twentieth test of Matrix package");
   Tracer::PrintTrace();
   // test C subscript package


   int i,j; Matrix X, Y;

   cout << "Matrix\n";
   Matrix A(15,35), B(15, 35);
   for (i=0; i<15; i++) for (j=0; j<35; j++)
      { A[i][j] = i+100*j; B(i+1,j+1) = i+100*j; }
   X = A - B; Print(X); Y = X;
   for (i=0; i<15; i++) for (j=0; j<35; j++)
   {
      X.element(i,j) = A.element(i,j) - B[i][j];
      Y.element(i,j) = ((const Matrix&)A)[i][j] - B[i][j];
   }
   Print(X); Print(Y);
   A.CleanUp(); B.CleanUp();

   cout << "UpperTriangularMatrix\n";
   UpperTriangularMatrix A1(15), B1(15);
   for (i=0; i<15; i++) for (j=i; j<15; j++)
      { A1[i][j] = i+100*j; B1(i+1,j+1) = i+100*j; }
   X = A1 - B1; Print(X); Y = X;
   for (i=0; i<15; i++) for (j=i; j<15; j++)
   {
      X.element(i,j) = A1.element(i,j) - B1[i][j];
      Y.element(i,j) = ((const UpperTriangularMatrix&)A1)[i][j] - B1[i][j];
   }
   Print(X); Print(Y);
   A1.CleanUp(); B1.CleanUp();

   cout << "LowerTriangularMatrix\n";
   LowerTriangularMatrix A2(35), B2(35); 
   for (i=0; i<35; i++) for (j=0; j<=i; j++)
      { A2[i][j] = i+100*j; B2(i+1,j+1) = i+100*j; }
   X = A2 - B2; Print(X); Y = X;
   for (i=0; i<35; i++) for (j=0; j<=i; j++)
   {
      X.element(i,j) = A2.element(i,j) - B2[i][j];
      Y.element(i,j) = ((const LowerTriangularMatrix&)A2)[i][j] - B2[i][j];
   }
   Print(X); Print(Y);
   A2.CleanUp(); B2.CleanUp();

   cout << "SymmetricMatrix\n";
   SymmetricMatrix A3(10), B3(10);
   for (i=0; i<10; i++) for (j=0; j<=i; j++)
      { A3[i][j] = i+100*j; B3(i+1,j+1) = i+100*j; }
   X = A3 - B3; Print(X); Y = X;
   for (i=0; i<10; i++) for (j=0; j<=i; j++)
   {
      X.element(i,j) = A3.element(i,j) - B3[i][j];
      Y.element(i,j) = ((const SymmetricMatrix&)A3)[i][j] - B3[i][j];
   }
   Print(X); Print(Y);
   A3.CleanUp(); B3.CleanUp();

   cout << "DiagonalMatrix\n";
   DiagonalMatrix A4(10), B4(10);
   for (i=0; i<10; i++)
      { A4[i] = i+100; B4(i+1) = i+100; }
   X = A4 - B4; Print(X); Y = X;
   for (i=0; i<10; i++)
   {
      X.element(i,i) = A4.element(i) - B4[i];
      Y.element(i,i) = ((const DiagonalMatrix&)A4)[i] - B4[i];
   }
   Print(X); Print(Y);
   A4.CleanUp(); B4.CleanUp();

   cout << "RowVector\n";
   RowVector A5(10), B5(10);
   for (i=0; i<10; i++)
      { A5[i] = i+100; B5(i+1) = i+100; }
   X = A5 - B5; Print(X); Y = X;
   for (i=0; i<10; i++)
   {
      X.element(0,i) = A5.element(i) - B5[i];
      Y.element(0,i) = ((const RowVector&)A5)[i] - B5[i];
   }
   Print(X); Print(Y);
   A5.CleanUp(); B5.CleanUp();

   cout << "ColumnVector\n";
   ColumnVector A6(10), B6(10);
   for (i=0; i<10; i++)
      { A6[i] = i+100; B6(i+1) = i+100; }
   X = A6 - B6; Print(X); Y = X;
   for (i=0; i<10; i++)
   {
      X.element(i,0) = A6.element(i) - B6[i];
      Y.element(i,0) = ((const ColumnVector&)A6)[i] - B6[i];
   }
   Print(X); Print(Y);
   A6.CleanUp(); B6.CleanUp();

   cout << "BandMatrix\n";
   BandMatrix A7(55,10, 5), B7(55, 10, 5);
   for (i=0; i<55; i++) for (j=my_max(0,i-10); j<=my_min(54,i+5); j++)
      { A7[i][j] = i+100*j; B7(i+1,j+1) = i+100*j; }
   X = A7 - B7; Print(X); Y = X;
   for (i=0; i<55; i++) for (j=my_max(0,i-10); j<=my_min(54,i+5); j++)
   {
      X.element(i,j) = A7.element(i,j) - B7[i][j];
      Y.element(i,j) = ((const BandMatrix&)A7)[i][j] - B7[i][j];
   }
   Print(X); Print(Y);
   A7.CleanUp(); B7.CleanUp();

   cout << "UpperBandMatrix\n";
   UpperBandMatrix A8(80,15), B8(80,15);
   for (i=0; i<80; i++) for (j=i; j<=my_min(79,i+15); j++)
      { A8[i][j] = i+100*j; B8(i+1,j+1) = i+100*j; }
   X = A8 - B8; Print(X); Y = X;
   for (i=0; i<80; i++) for (j=i; j<=my_min(79,i+15); j++)
   {
      X.element(i,j) = A8.element(i,j) - B8[i][j];
      Y.element(i,j) = ((const UpperBandMatrix&)A8)[i][j] - B8[i][j];
   }
   Print(X); Print(Y);
   A8.CleanUp(); B8.CleanUp();

   cout << "LowerBandMatrix\n";
   LowerBandMatrix A9(75,27), B9(75,27);
   for (i=0; i<75; i++) for (j=my_max(0,i-27); j<=i; j++)
      { A9[i][j] = i+100*j; B9(i+1,j+1) = i+100*j; }
   X = A9 - B9; Print(X); Y = X;
   for (i=0; i<75; i++) for (j=my_max(0,i-27); j<=i; j++)
   {
      X.element(i,j) = A9.element(i,j) - B9[i][j];
      Y.element(i,j) = ((const LowerBandMatrix&)A9)[i][j] - B9[i][j];
   }
   Print(X); Print(Y);
   A9.CleanUp(); B9.CleanUp();

   cout << "SymmetricBandMatrix\n";
   SymmetricBandMatrix Aa(69,15), Ba(69,15);
   for (i=0; i<69; i++) for (j=my_max(0,i-15); j<=i; j++)
      { Aa[i][j] = i+100*j; Ba(i+1,j+1) = i+100*j; }
   X = Aa - Ba; Print(X); Y = X;
   for (i=0; i<69; i++) for (j=my_max(0,i-15); j<=i; j++)
   {
      X.element(i,j) = Aa.element(i,j) - Ba[i][j];
      Y.element(i,j) = ((const SymmetricBandMatrix&)Aa)[i][j] - Ba[i][j];
   }
   Print(X); Print(Y);
   Aa.CleanUp(); Ba.CleanUp();
   
   // test special constructors used in Numerical Recipes for C++
   Real a[] = {1.2, 5.6, 7.9, 3.8, 4.5, 1.3,
               5.2, 9.9, 2.1, 4.7, 0.0, 1.6 };
   ColumnVector CV0(12); CV0 << a;
   ColumnVector CV1(a, 12); CV1 -= CV0; Print(CV1);
   RowVector RV1(a, 12); RV1 -= CV0.AsRow(); Print(RV1);
   Matrix RM1(a, 3, 4); RM1 -= CV0.AsMatrix(3,4); Print(RM1);
   ColumnVector CV2(5.75, 15); CV2 -= 5.75; Print(CV2);
   RowVector RV2(2.75, 15); RV2 -= 2.75; Print(RV2);
   Matrix RM2(-3.75, 6, 4); RM2 += 3.75; Print(RM2);


}


#else

void trymatk()
{
   Tracer et("Twentieth test of Matrix package");
   Tracer::PrintTrace();
   // test C subscript package
   cout << "C subscripts not enabled, not tested\n\n";
}

#endif


///@}
