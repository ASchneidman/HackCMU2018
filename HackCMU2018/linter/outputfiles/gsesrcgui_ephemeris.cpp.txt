250
8, 21, 29, 33, 33, 34, 35, 36, 40, 41, 42, 46, 47, 48, 49, 53, 59, 60, 62, 63, 65, 66, 66, 66, 67, 68, 69, 74, 75, 76, 77, 78, 80, 81, 81, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 96, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 128, 129, 129, 130, 130, 131, 131, 133, 135, 136, 137, 137, 137, 138, 139, 140, 141, 143, 144, 146, 146, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 159, 159, 160, 161, 165, 166, 167, 168, 170, 171, 172, 172, 173, 174, 174, 175, 176, 176, 177, 178, 178, 179, 180, 180, 181, 182, 182, 183, 184, 184, 185, 186, 186, 187, 188, 188, 189, 190, 190, 191, 192, 192, 193, 194, 194, 195, 196, 196, 197, 198, 198, 199, 200, 200, 201, 202, 202, 203, 204, 204, 205, 206, 206, 207, 208, 208, 209, 210, 210, 211, 212, 212, 213, 214, 214, 215, 216, 216, 217, 218, 222, 223, 224, 228, 229, 230, 231, 232, 233, 235, 235, 237, 238, 238, 238, 239, 240, 242, 242, 244, 245, 245, 245, 246, 247, 247, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 268, 268, 270, 271, 271, 271, 272, 273, 275, 275, 277, 278, 278, 278, 279, 280, 280, 280, 281, 282, 283, 284, 285, 286, 287, 288
/*
 * gui_toplevel.cpp
 *
 *  Created on: Nov 4, 2008
 *      Author: gheckler
 */

#include "gui.h"

extern wxColor red;
extern wxColor green;
extern wxColor blue;
extern wxColor yellow;
extern wxColor white;
extern wxColor black;
extern wxColor grey;
extern wxColor htext;

DECLARE_APP(GUI_App)

/*----------------------------------------------------------------------------------------------*/
BEGIN_EVENT_TABLE(GUI_Ephemeris, wxFrame)
    EVT_CLOSE(GUI_Ephemeris::onClose)
    EVT_LEFT_DOWN(GUI_Ephemeris::onMouse)
    EVT_BUTTON(ID_EPHEMERIS_SAVE, GUI_Ephemeris::onSave)
    EVT_BUTTON(ID_EPHEMERIS_LOAD, GUI_Ephemeris::onLoad)
    EVT_BUTTON(ID_EPHEMERIS_REFRESH, GUI_Ephemeris::onRefresh)
END_EVENT_TABLE()
/*----------------------------------------------------------------------------------------------*/



GUI_Ephemeris::GUI_Ephemeris():iGUI_Ephemeris(NULL, wxID_ANY, wxT("Ephemeris"), wxDefaultPosition, wxSize(400,600), wxDEFAULT_FRAME_STYLE|wxTAB_TRAVERSAL)
{
	sv = 0;
	loaded = 0;
}

GUI_Ephemeris::~GUI_Ephemeris()
{


}

void GUI_Ephemeris::onClose(wxCloseEvent& evt)
{
	wxCommandEvent cevt;
	evt.Veto();
	pToplevel->onEphemeris(cevt);
}

void GUI_Ephemeris::paintNow()
{
    wxClientDC dc(this);
    render(dc);
}

void GUI_Ephemeris::render(wxDC& dc)
{
	int32 val;

	renderDecoded();
	renderSV();

	if(loaded == 0)
	{
		pSerial->formCommand(GET_EPHEMERIS_STATUS_C_ID, &loaded);
		loaded = 1;
	}
}


void GUI_Ephemeris::onMouse(wxMouseEvent& event)
{

	wxString str;
	wxPoint br, tl, sp, mp;
	wxCoord w, h;

	int32 row, col;
	int32 dX,dY;

	pDecoded->GetClientSize(&w, &h);
	sp = this->GetScreenPosition();
	tl = pDecoded->GetScreenPosition() - sp;
	mp = wxGetMousePosition() - sp;

	dY = (h/4);
	dX = (w/(MAX_SV>>2));

	br.x = tl.x + w;
	br.y = tl.y + h;

	/* Within the pDecoded area */
	if((mp.x >= tl.x) && (mp.x <= br.x) && (mp.y >= tl.y) && (mp.y <= br.y))
	{
		mp -= tl;

		row = mp.y/dY;
		col = mp.x/dX;
		sv = row*(MAX_SV>>2);
		sv += col;

		if(sv >= 0 && sv <= MAX_SV)
			pSerial->formCommand(GET_EPHEMERIS_C_ID, &sv);
		else
			sv = 0;
	}
}


void GUI_Ephemeris::renderDecoded()
{

	int32 dX, dY, lcv;
	wxPoint box[4];
	wxCoord w, h;
	wxString str;

	wxBufferedPaintDC dc(pDecoded, wxBUFFER_CLIENT_AREA);
	dc.Clear();

	pDecoded->GetClientSize(&w, &h);

	dY = (h/4);
	dX = (w/(MAX_SV>>2));

	box[0].x = 0;	box[0].y = 0;
	box[1].x = dX;	box[1].y = 0;
	box[2].x = dX;	box[2].y = dY;
	box[3].x = 0;	box[3].y = dY;

	dc.SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxNORMAL));

	/* Render the decoded ephemerides */
	for(lcv = 0; lcv < MAX_SV; lcv++)
	{
		if(p->ephemeris_status.valid[lcv])
			dc.SetBrush(wxBrush(green));
		else
			dc.SetBrush(wxBrush(grey));

		dc.SetPen(wxPen(black, 1));
		dc.DrawPolygon(4, box, (lcv%(MAX_SV>>2))*dX, (lcv/(MAX_SV>>2))*dY);

		str.Printf(wxT("%02d"),(int)lcv+1);
		dc.DrawText(str, (lcv%(MAX_SV>>2))*dX + dX/3, (lcv/(MAX_SV>>2))*dY + dY/5);
	}

	/* Draw highlighted box */
	if(p->ephemeris_status.valid[sv])
		dc.SetBrush(wxBrush(green));
	else
		dc.SetBrush(wxBrush(grey));

	dc.SetPen(wxPen(red, 1));
	dc.DrawPolygon(4, box, (sv%(MAX_SV>>2))*dX, (sv/(MAX_SV>>2))*dY);

	str.Printf(wxT("%02d"),(int)sv+1);
	dc.DrawText(str, (sv%(MAX_SV>>2))*dX + dX/3, (sv/(MAX_SV>>2))*dY + dY/5);

}

void GUI_Ephemeris::renderSV()
{

	wxString str;
	tDisplay->Clear();

	Ephemeris_M *e;
	e = &p->ephemerides[sv];
	str.Printf(wxT("************* Ephemeris for PRN-%02d *************\n"),sv+1);
	tDisplay->AppendText(str);
	str.Printf(wxT("ID:                        %02d\n"),sv+1);
	tDisplay->AppendText(str);
	str.Printf(wxT("Health:                    %03d\n"),e->subframe_1_health);
	tDisplay->AppendText(str);
	str.Printf(wxT("Eccentricity:              %.10g\n"),e->ecc);
	tDisplay->AppendText(str);
	str.Printf(wxT("Time of Ephemeris(s):      %.10g\n"),e->toe);
	tDisplay->AppendText(str);
	str.Printf(wxT("Orbital Inclination(rad):  %.10g\n"),e->in0);
	tDisplay->AppendText(str);
	str.Printf(wxT("Inclination Rate(r/s):     %.10g\n"),e->idot);
	tDisplay->AppendText(str);
	str.Printf(wxT("Rate of Right Ascen(r/s):  %.10g\n"),e->omd);
	tDisplay->AppendText(str);
	str.Printf(wxT("SQRT(A)  (m 1/2):          %.10g\n"),e->sqrta);
	tDisplay->AppendText(str);
	str.Printf(wxT("Right Ascen at Week(rad):  %.10g\n"),e->om0);
	tDisplay->AppendText(str);
	str.Printf(wxT("Argument of Perigee(rad):  %.10g\n"),e->argp);
	tDisplay->AppendText(str);
	str.Printf(wxT("Mean Anom(rad):            %.10g\n"),e->m0);
	tDisplay->AppendText(str);
	str.Printf(wxT("Mean Motion(rad):          %.10g\n"),e->deltan);
	tDisplay->AppendText(str);
	str.Printf(wxT("Time of Clock(s):          %.10g\n"),e->toc);
	tDisplay->AppendText(str);
	str.Printf(wxT("Af0(s):                    %.10g\n"),e->af0);
	tDisplay->AppendText(str);
	str.Printf(wxT("Af1(s/s):                  %.10g\n"),e->af1);
	tDisplay->AppendText(str);
	str.Printf(wxT("Af2(s/s/s):                %.10g\n"),e->af2);
	tDisplay->AppendText(str);
	str.Printf(wxT("CIC:                       %.10g\n"),e->cic);
	tDisplay->AppendText(str);
	str.Printf(wxT("CIS:                       %.10g\n"),e->cis);
	tDisplay->AppendText(str);
	str.Printf(wxT("CUC:                       %.10g\n"),e->cuc);
	tDisplay->AppendText(str);
	str.Printf(wxT("CUS:                       %.10g\n"),e->cus);
	tDisplay->AppendText(str);
	str.Printf(wxT("CRC:                       %.10g\n"),e->crc);
	tDisplay->AppendText(str);
	str.Printf(wxT("CRS:                       %.10g\n"),e->crs);
	tDisplay->AppendText(str);

}

void GUI_Ephemeris::onRefresh(wxCommandEvent& event)
{
	int32 val = 0;
	pSerial->formCommand(GET_EPHEMERIS_STATUS_C_ID, &val);
}

void GUI_Ephemeris::onSave(wxCommandEvent& event)
{

	int32 prn, week, lcv;
	wxString fileName, str;
	Ephemeris_M *e;
	FILE *fp;

	wxFileDialog * openFileDialog = new wxFileDialog(this, wxT("Save Ephemeris"), wxT(""), wxT(""), wxT("*.*"), wxSAVE);

	if(openFileDialog->ShowModal() == wxID_OK)
	{
		fileName = openFileDialog->GetPath();
		FILE *fp;

		fp = fopen(fileName.mb_str(),"w");

		if(fp != NULL)
		{
			for(lcv = 0; lcv < MAX_SV; lcv++)
			{
				pSerial->formCommand(GET_EPHEMERIS_C_ID, &lcv);

				e = &p->ephemerides[lcv];
				fwrite(e, sizeof(Ephemeris_M), MAX_SV, fp);
			}
			fflush(fp);
			fclose(fp);
		}
	}

}

void GUI_Ephemeris::onLoad(wxCommandEvent& event)
{

	int32 prn, week, lcv;
	wxString fileName, str;
	Set_Ephemeris_C c;
	FILE *fp;

	wxFileDialog * openFileDialog = new wxFileDialog(this, wxT("Load Ephemeris"), wxT(""), wxT(""), wxT("*.*"), wxOPEN);

	if(openFileDialog->ShowModal() == wxID_OK)
	{
		fileName = openFileDialog->GetPath();
		FILE *fp;

		fp = fopen(fileName.mb_str(),"r");

		if(fp != NULL)
		{
			for(lcv = 0; lcv < MAX_SV; lcv++)
			{
				c.sv = lcv;
				fread(&c.ephemeris, sizeof(Ephemeris_M), 1, fp);
				pSerial->formCommand(SET_EPHEMERIS_C_ID, &c);
			}
			fclose(fp);
		}
	}

}
