932
43, 44, 45, 48, 55, 56, 58, 59, 60, 63, 64, 69, 71, 74, 75, 77, 78, 83, 85, 89, 92, 96, 97, 98, 102, 105, 106, 106, 106, 107, 109, 109, 110, 110, 111, 111, 112, 112, 112, 113, 113, 114, 114, 115, 116, 117, 118, 118, 118, 119, 119, 120, 120, 121, 121, 122, 123, 124, 125, 125, 126, 126, 127, 128, 129, 129, 130, 130, 130, 131, 132, 132, 133, 133, 134, 135, 136, 137, 137, 137, 138, 138, 139, 139, 140, 140, 141, 142, 143, 144, 144, 145, 145, 146, 147, 148, 149, 150, 150, 151, 151, 152, 152, 152, 153, 153, 154, 154, 154, 155, 156, 157, 158, 159, 159, 160, 160, 161, 161, 163, 164, 164, 165, 165, 166, 166, 167, 167, 167, 168, 168, 169, 169, 170, 171, 172, 173, 173, 174, 174, 175, 176, 176, 176, 177, 178, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 187, 188, 188, 189, 190, 191, 192, 193, 193, 194, 194, 194, 195, 195, 196, 197, 198, 199, 200, 201, 202, 202, 203, 203, 203, 204, 204, 205, 205, 206, 207, 208, 209, 209, 210, 210, 211, 212, 212, 212, 213, 214, 214, 215, 216, 217, 218, 219, 219, 220, 221, 222, 223, 224, 224, 225, 226, 227, 228, 229, 229, 230, 230, 230, 231, 232, 233, 234, 235, 236, 237, 238, 238, 239, 240, 241, 242, 243, 243, 244, 244, 245, 245, 246, 246, 247, 248, 248, 249, 249, 249, 250, 251, 252, 252, 253, 254, 254, 254, 255, 256, 256, 257, 258, 259, 259, 260, 260, 260, 261, 262, 262, 263, 264, 265, 266, 266, 266, 267, 268, 268, 269, 269, 270, 271, 272, 272, 273, 273, 274, 275, 276, 277, 278, 279, 279, 280, 280, 281, 282, 282, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 294, 295, 296, 296, 296, 297, 298, 299, 300, 301, 301, 302, 302, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 311, 312, 313, 313, 314, 315, 315, 315, 316, 317, 318, 319, 320, 320, 321, 322, 323, 323, 324, 324, 324, 325, 326, 327, 328, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 340, 341, 342, 342, 343, 344, 345, 346, 347, 347, 348, 348, 349, 350, 351, 352, 353, 354, 355, 356, 356, 357, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 371, 372, 373, 374, 374, 375, 376, 377, 377, 377, 378, 379, 379, 380, 381, 381, 382, 383, 384, 385, 386, 386, 387, 387, 387, 388, 389, 390, 391, 392, 393, 393, 394, 395, 395, 396, 397, 398, 399, 399, 399, 400, 401, 402, 403, 404, 405, 406, 406, 407, 407, 408, 409, 410, 411, 412, 413, 413, 413, 414, 415, 416, 417, 417, 418, 419, 419, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 431, 432, 433, 433, 434, 435, 436, 436, 437, 438, 438, 439, 440, 440, 441, 442, 443, 443, 444, 444, 445, 446, 446, 447, 449, 450, 451, 451, 452, 453, 453, 453, 454, 454, 455, 455, 456, 457, 458, 458, 458, 459, 459, 460, 460, 461, 462, 462, 463, 464, 464, 464, 465, 466, 467, 467, 467, 468, 468, 469, 470, 470, 471, 471, 472, 472, 473, 473, 474, 475, 476, 476, 477, 478, 479, 480, 481, 482, 482, 482, 483, 484, 485, 487, 488, 489, 489, 490, 491, 491, 491, 492, 493, 494, 495, 496, 496, 497, 498, 499, 499, 500, 501, 501, 502, 503, 503, 503, 504, 505, 507, 508, 508, 509, 510, 511, 512, 513, 513, 514, 515, 516, 517, 518, 518, 519, 520, 521, 522, 523, 523, 524, 524, 524, 525, 526, 527, 527, 527, 528, 528, 530, 531, 532, 533, 533, 534, 535, 535, 535, 536, 537, 538, 539, 539, 540, 541, 541, 541, 542, 543, 544, 545, 546, 546, 546, 547, 548, 549, 550, 551, 552, 553, 553, 554, 554, 555, 556, 557, 558, 559, 559, 559, 560, 561, 562, 563, 564, 565, 566, 567, 567, 568, 568, 568, 569, 570, 570, 571, 572, 573, 574, 574, 575, 576, 577, 577, 578, 578, 579, 580, 582, 583, 583, 583, 584, 585, 585, 586, 588, 589, 589, 589, 590, 591, 591, 592, 593, 593, 593, 594, 595, 596, 597, 598, 598, 598, 599, 600, 601, 602, 603, 603, 603, 604, 605, 606, 607, 608, 608, 609, 609, 610, 611, 612, 613, 614, 614, 615, 615, 615, 616, 616, 617, 618, 619, 619, 620, 621, 621, 622, 622, 623, 624, 624, 624, 625, 625, 626, 626, 627, 628, 628, 629, 630, 631, 631, 632, 633, 633, 633, 634, 635, 635, 636, 637, 638, 638, 638, 639, 640, 640, 641, 642, 642, 642, 643, 644, 645, 646, 647, 647, 647, 648, 649, 650, 651, 652, 652, 652, 653, 654, 655, 656, 657, 657, 658, 658, 659, 660, 661, 662, 663, 663, 664, 664, 664, 665, 665, 666, 667, 668, 668, 669, 670, 670, 671, 671, 672, 673, 673, 673, 674, 674, 675, 675, 676, 677, 677, 678, 679, 680, 682, 683, 683, 684, 684, 685, 685, 685, 686, 687, 688, 689, 689, 690, 690, 691, 691, 692, 692, 693, 693, 693, 694, 694, 695, 695, 696, 697, 698, 698, 699, 699, 700, 701, 702, 702, 703, 703, 703, 704, 705, 705, 706, 706, 706, 707, 707, 707, 708, 709, 709, 710, 710, 711, 712, 713, 714, 715, 715, 716, 716, 718, 718, 718, 719, 720, 721, 722, 723, 723, 724, 724, 725, 725, 726, 727, 67, 69, 70, 71, 82, 83, 85, 86
/*
 * Snes9x - Portable Super Nintendo Entertainment System (TM) emulator.
 *
 * (c) Copyright 1996 - 2001 Gary Henderson (gary.henderson@ntlworld.com) and
 *                           Jerremy Koot (jkoot@snes9x.com)
 *
 * Super FX C emulator code 
 * (c) Copyright 1997 - 1999 Ivar (ivar@snes9x.com) and
 *                           Gary Henderson.
 * Super FX assembler emulator code (c) Copyright 1998 zsKnight and _Demo_.
 *
 * DSP1 emulator code (c) Copyright 1998 Ivar, _Demo_ and Gary Henderson.
 * C4 asm and some C emulation code (c) Copyright 2000 zsKnight and _Demo_.
 * C4 C code (c) Copyright 2001 Gary Henderson (gary.henderson@ntlworld.com).
 *
 * DOS port code contains the works of other authors. See headers in
 * individual files.
 *
 * Snes9x homepage: http://www.snes9x.com
 *
 * Permission to use, copy, modify and distribute Snes9x in both binary and
 * source form, for non-commercial purposes, is hereby granted without fee,
 * providing that this license information and copyright notice appear with
 * all copies and any derived work.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event shall the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Snes9x is freeware for PERSONAL USE only. Commercial users should
 * seek permission of the copyright holders first. Commercial use includes
 * charging money for Snes9x or software derived from Snes9x.
 *
 * The copyright holders request that bug fixes and improvements to the code
 * should be forwarded to them so everyone can benefit from the modifications
 * in future versions.
 *
 * Super NES and Super Nintendo Entertainment System are trademarks of
 * Nintendo Co., Limited and its subsidiary companies.
 */
#include <stdlib.h>

#include "snes9x.h"
#include "memmap.h"
#include "ppu.h"

struct Band
{
    uint32 Left;
    uint32 Right;
};

#undef MIN
#undef MAX
#define MIN(A,B) ((A) < (B) ? (A) : (B))
#define MAX(A,B) ((A) > (B) ? (A) : (B))
#define BAND_EMPTY(B) (B.Left >= B.Right)
#define BANDS_INTERSECT(A,B) ((A.Left >= B.Left && A.Left < B.Right) || \
			      (A.Right > B.Left && A.Right <= B.Right))
#define OR_BANDS(R,A,B) {\
    R.Left = MIN(A.Left, B.Left); \
    R.Right = MAX(A.Right, B.Right);}
    
#define AND_BANDS(R,A,B) {\
    R.Left = MAX(A.Left, B.Left); \
    R.Right = MIN(A.Right, B.Right);}

#if !defined(_SNESPPC) || defined(__IPHONE__)
static int IntCompare (const void *d1, const void *d2)
#else
static int _cdecl IntCompare (const void *d1, const void *d2)
#endif
{
    if (*(uint32 *) d1 > *(uint32 *) d2)
	return (1);
    else
    if (*(uint32 *) d1 < *(uint32 *) d2)
	return (-1);
    return (0);
}

#if !defined(_SNESPPC) || defined(__IPHONE__)
static int BandCompare (const void *d1, const void *d2)
#else
static int _cdecl BandCompare (const void *d1, const void *d2)
#endif
{
    if (((struct Band *) d1)->Left > ((struct Band *) d2)->Left)
	return (1);
    else
    if (((struct Band *) d1)->Left < ((struct Band *) d2)->Left)
	return (-1);
    return (0);
}

void ComputeClipWindows ()
{
    struct ClipData *pClip = &IPPU.Clip [0];

    // Loop around the main screen then the sub-screen.
    for (int c = 0; c < 2; c++, pClip++)
    {
        // Loop around the colour window then a clip window for each of the
        // background layers.
	for (int w = 5; w >= 0; w--)
	{
	    pClip->Count[w] = 0;

	    if (w == 5) // The colour window...
	    {
		if (c == 0) // ... on the main screen
		{
		    if ((Memory.FillRAM [0x2130] & 0xc0) == 0xc0)
		    {
			// The whole of the main screen is switched off,
			// completely clip everything.
			for (int i = 0; i < 6; i++)
			{
			    IPPU.Clip [c].Count [i] = 1;
			    IPPU.Clip [c].Left [0][i] = 1;
			    IPPU.Clip [c].Right [0][i] = 0;
			}
			continue;
		    }
		    else
		    if ((Memory.FillRAM [0x2130] & 0xc0) == 0x00)
			continue;
		}
		else
		{
		    // .. colour window on the sub-screen.
		    if ((Memory.FillRAM [0x2130] & 0x30) == 0x30)
		    {
			// The sub-screen is switched off, completely
			// clip everything.
			for (int i = 0; i < 6; i++)
			{
			    IPPU.Clip [1].Count [i] = 1;
			    IPPU.Clip [1].Left [0][i] = 1;
			    IPPU.Clip [1].Right [0][i] = 0;
			}
			return;
		    }
		    else
		    if ((Memory.FillRAM [0x2130] & 0x30) == 0x00)
			continue;
		}
	    }
	    if (!Settings.DisableGraphicWindows)
	    {
		if (w == 5 || pClip->Count [5] ||
		    (Memory.FillRAM [0x212c + c] & 
		     Memory.FillRAM [0x212e + c] & (1 << w)))
		{
		    struct Band Win1[3];
		    struct Band Win2[3];
		    uint32 Window1Enabled = 0;
		    uint32 Window2Enabled = 0;
		    bool8_32 invert = (w == 5 && 
				    ((c == 1 && (Memory.FillRAM [0x2130] & 0x30) == 0x10) ||
				     (c == 0 && (Memory.FillRAM [0x2130] & 0xc0) == 0x40)));

		    if (w == 5 ||
			(Memory.FillRAM [0x212c + c] & Memory.FillRAM [0x212e + c] & (1 << w)))
		    {
			if (PPU.ClipWindow1Enable [w])
			{
			    if (!PPU.ClipWindow1Inside [w])
			    {
				Win1[Window1Enabled].Left = PPU.Window1Left;
				Win1[Window1Enabled++].Right = PPU.Window1Right + 1;
			    }
			    else
			    {
				if (PPU.Window1Left <= PPU.Window1Right)
				{
				    if (PPU.Window1Left > 0)
				    {
					Win1[Window1Enabled].Left = 0;
					Win1[Window1Enabled++].Right = PPU.Window1Left;
				    }
				    if (PPU.Window1Right < 255)
				    {
					Win1[Window1Enabled].Left = PPU.Window1Right + 1;
					Win1[Window1Enabled++].Right = 256;
				    }
				    if (Window1Enabled == 0)
				    {
					Win1[Window1Enabled].Left = 1;
					Win1[Window1Enabled++].Right = 0;
				    }
				}
				else
				{
				    // 'outside' a window with no range - 
				    // appears to be the whole screen.
				    Win1[Window1Enabled].Left = 0;
				    Win1[Window1Enabled++].Right = 256;
				}
			    }
			}
			if (PPU.ClipWindow2Enable [w])
			{
			    if (!PPU.ClipWindow2Inside [w])
			    {
				Win2[Window2Enabled].Left = PPU.Window2Left;
				Win2[Window2Enabled++].Right = PPU.Window2Right + 1;
			    }
			    else
			    {
				if (PPU.Window2Left <= PPU.Window2Right)
				{
				    if (PPU.Window2Left > 0)
				    {
					Win2[Window2Enabled].Left = 0;
					Win2[Window2Enabled++].Right = PPU.Window2Left;
				    }
				    if (PPU.Window2Right < 255)
				    {
					Win2[Window2Enabled].Left = PPU.Window2Right + 1;
					Win2[Window2Enabled++].Right = 256;
				    }
				    if (Window2Enabled == 0)
				    {
					Win2[Window2Enabled].Left = 1;
					Win2[Window2Enabled++].Right = 0;
				    }
				}
				else
				{
				    Win2[Window2Enabled].Left = 0;
				    Win2[Window2Enabled++].Right = 256;
				}
			    }
			}
		    }
		    if (Window1Enabled && Window2Enabled)
		    {
			// Overlap logic
			//
			// Each window will be in one of three states:
			// 1. <no range> (Left > Right. One band)
			// 2. |    ----------------             | (Left >= 0, Right <= 255, Left <= Right. One band)
			// 3. |------------           ----------| (Left1 == 0, Right1 < Left2; Left2 > Right1, Right2 == 255. Two bands)
			
			struct Band Bands [6];
			int B = 0;
			switch (PPU.ClipWindowOverlapLogic [w] ^ 1)
			{
			case CLIP_OR:
			    if (Window1Enabled == 1)
			    {
				if (BAND_EMPTY(Win1[0]))
				{
				    B = Window2Enabled;
				    memmove (Bands, Win2,
					     sizeof(Win2[0]) * Window2Enabled);
				}
				else
				{
				    if (Window2Enabled == 1)
				    {
					if (BAND_EMPTY (Win2[0]))
					    Bands[B++] = Win1[0];
					else
					{
					    if (BANDS_INTERSECT (Win1[0], Win2[0]))
					    {
						OR_BANDS(Bands[0],Win1[0], Win2[0])
						B = 1;
					    }
					    else
					    {
						Bands[B++] = Win1[0];
						Bands[B++] = Win2[0];
					    }
					}
				    }
				    else
				    {
					if (BANDS_INTERSECT(Win1[0], Win2[0]))
					{
					    OR_BANDS(Bands[0], Win1[0], Win2[0])
					    if (BANDS_INTERSECT(Win1[0], Win2[1]))
						OR_BANDS(Bands[1], Win1[0], Win2[1])
					    else
						Bands[1] = Win2[1];
					    B = 1;
					    if (BANDS_INTERSECT(Bands[0], Bands[1]))
						OR_BANDS(Bands[0], Bands[0], Bands[1])
					    else
						B = 2;
					}
					else
					if (BANDS_INTERSECT(Win1[0], Win2[1]))
					{
					    Bands[B++] = Win2[0];
					    OR_BANDS(Bands[B], Win1[0], Win2[1]);
					    B++;
					}
					else
					{
					    Bands[0] = Win2[0];
					    Bands[1] = Win1[0];
					    Bands[2] = Win2[1];
					    B = 3;
					}
				    }
				}
			    }
			    else
			    if (Window2Enabled == 1)
			    {
				if (BAND_EMPTY(Win2[0]))
				{
				    // Window 2 defines an empty range - just
				    // use window 1 as the clipping (which
				    // could also be empty).
				    B = Window1Enabled;
				    memmove (Bands, Win1,
					     sizeof(Win1[0]) * Window1Enabled);
				}
				else
				{
				    // Window 1 has two bands and Window 2 has one.
				    // Neither is an empty region.
				    if (BANDS_INTERSECT(Win2[0], Win1[0]))
				    {
					OR_BANDS(Bands[0], Win2[0], Win1[0])
					if (BANDS_INTERSECT(Win2[0], Win1[1]))
					    OR_BANDS(Bands[1], Win2[0], Win1[1])
					else
					    Bands[1] = Win1[1];
					B = 1;
					if (BANDS_INTERSECT(Bands[0], Bands[1]))
					    OR_BANDS(Bands[0], Bands[0], Bands[1])
					else
					    B = 2;
				    }
				    else
				    if (BANDS_INTERSECT(Win2[0], Win1[1]))
				    {
					Bands[B++] = Win1[0];
					OR_BANDS(Bands[B], Win2[0], Win1[1]);
					B++;
				    }
				    else
				    {
					Bands[0] = Win1[0];
					Bands[1] = Win2[0];
					Bands[2] = Win1[1];
					B = 3;
				    }
				}
			    }
			    else
			    {
				// Both windows have two bands
				OR_BANDS(Bands[0], Win1[0], Win2[0]);
				OR_BANDS(Bands[1], Win1[1], Win2[1]);
				B = 1;
				if (BANDS_INTERSECT(Bands[0], Bands[1]))
				    OR_BANDS(Bands[0], Bands[0], Bands[1])
				else
				    B = 2;
			    }
			    break;

			case CLIP_AND:
			    if (Window1Enabled == 1)
			    {
				// Window 1 has one band
				if (BAND_EMPTY(Win1[0]))
				    Bands [B++] = Win1[0];
				else
				if (Window2Enabled == 1)
				{
				    if (BAND_EMPTY (Win2[0]))
					Bands [B++] = Win2[0];
				    else
				    {
					AND_BANDS(Bands[0], Win1[0], Win2[0]);
					B = 1;
				    }
				}
				else
				{
				    AND_BANDS(Bands[0], Win1[0], Win2[0]);
				    AND_BANDS(Bands[1], Win1[0], Win2[1]);
				    B = 2;
				}
			    }
			    else
			    if (Window2Enabled == 1)
			    {
				if (BAND_EMPTY(Win2[0]))
				    Bands[B++] = Win2[0];
				else
				{
				    // Window 1 has two bands.
				    AND_BANDS(Bands[0], Win1[0], Win2[0]);
				    AND_BANDS(Bands[1], Win1[1], Win2[0]);
				    B = 2;
				}
			    }
			    else
			    {
				// Both windows have two bands.
				AND_BANDS(Bands[0], Win1[0], Win2[0]);
				AND_BANDS(Bands[1], Win1[1], Win2[1]);
				B = 2;
				if (BANDS_INTERSECT(Win1[0], Win2[1]))
				{
				    AND_BANDS(Bands[2], Win1[0], Win2[1]);
				    B = 3;
				}
				else
				if (BANDS_INTERSECT(Win1[1], Win2[0]))
				{
				    AND_BANDS(Bands[2], Win1[1], Win2[0]);
				    B = 3;
				}
			    }
			    break;
			case CLIP_XNOR:
			    invert = !invert;
			    // Fall...

			case CLIP_XOR:
			    if (Window1Enabled == 1 && BAND_EMPTY(Win1[0]))
			    {
				B = Window2Enabled;
				memmove (Bands, Win2,
					 sizeof(Win2[0]) * Window2Enabled);
			    }
			    else
			    if (Window2Enabled == 1 && BAND_EMPTY(Win2[0]))
			    {
				B = Window1Enabled;
				memmove (Bands, Win1,
					 sizeof(Win1[0]) * Window1Enabled);
			    }
			    else
			    {
				uint32 p = 0;
				uint32 points [10];
				uint32 i;

				invert = !invert;
				// Build an array of points (window edges)
				points [p++] = 0;
				for (i = 0; i < Window1Enabled; i++)
				{
				    points [p++] = Win1[i].Left;
				    points [p++] = Win1[i].Right;
				}
				for (i = 0; i < Window2Enabled; i++)
				{
				    points [p++] = Win2[i].Left;
				    points [p++] = Win2[i].Right;
				}
				points [p++] = 256;
				// Sort them
				qsort ((void *) points, p, sizeof (points [0]),
				       IntCompare);
				for (i = 0; i < p; i += 2)
				{
				    if (points [i] == points [i + 1])
					continue;
				    Bands [B].Left = points [i];
				    while (i + 2 < p && 
					   points [i + 1] == points [i + 2])
				    {
					i += 2;
				    }
				    Bands [B++].Right = points [i + 1];
				}
			    }
			    break;
			}
			if (invert)
			{
			    int b;
			    int j = 0;
			    int empty_band_count = 0;

			    // First remove all empty bands from the list.
			    for (b = 0; b < B; b++)
			    {
				if (!BAND_EMPTY(Bands[b]))
				{
				    if (b != j)
					Bands[j] = Bands[b];
				    j++;
				}
				else
				    empty_band_count++;
			    }
			    
			    if (j > 0)
			    {
				if (j == 1)
				{
				    j = 0;
				    // Easy case to deal with, so special case it.

				    if (Bands[0].Left > 0)
				    {
					pClip->Left[j][w] = 0;
					pClip->Right[j++][w] = Bands[0].Left + 1;
				    }
				    if (Bands[0].Right < 256)
				    {
					pClip->Left[j][w] = Bands[0].Right;
					pClip->Right[j++][w] = 256;
				    }
				    if (j == 0)
				    {
					pClip->Left[j][w] = 1;
					pClip->Right[j++][w] = 0;
				    }
				}
				else
				{
				    // Now sort the bands into order
				    B = j;
				    qsort ((void *) Bands, B,
					   sizeof (Bands [0]), BandCompare);

				    // Now invert the area the bands cover
				    j = 0;
				    for (b = 0; b < B; b++)
				    {
					if (b == 0 && Bands[b].Left > 0)
					{
					    pClip->Left[j][w] = 0;
					    pClip->Right[j++][w] = Bands[b].Left + 1;
					}
					else
					if (b == B - 1 && Bands[b].Right < 256)
					{
					    pClip->Left[j][w] = Bands[b].Right;
					    pClip->Right[j++][w] = 256;
					}
					if (b < B - 1)
					{
					    pClip->Left[j][w] = Bands[b].Right;
					    pClip->Right[j++][w] = Bands[b + 1].Left + 1;
					}
				    }
				}
			    }
			    else
			    {
				// Inverting a window that consisted of only
				// empty bands is the whole width of the screen.
				// Needed for Mario Kart's rear-view mirror display.
				if (empty_band_count)
				{
				    pClip->Left[j][w] = 0;
				    pClip->Right[j][w] = 256;
				    j++;
				}
			    }
			    pClip->Count[w] = j;
			}
			else
			{
			    for (int j = 0; j < B; j++)
			    {
				pClip->Left[j][w] = Bands[j].Left;
				pClip->Right[j][w] = Bands[j].Right;
			    }
			    pClip->Count [w] = B;
			}
		    }
		    else
		    {
			// Only one window enabled so no need to perform
			// complex overlap logic...

			if (Window1Enabled)
			{
			    if (invert)
			    {
				int j = 0;

				if (Window1Enabled == 1)
				{
				    if (Win1[0].Left <= Win1[0].Right)
				    {
					if (Win1[0].Left > 0)
					{
					    pClip->Left[j][w] = 0;
					    pClip->Right[j++][w] = Win1[0].Left;
					}
					if (Win1[0].Right < 256)
					{
					    pClip->Left[j][w] = Win1[0].Right;
					    pClip->Right[j++][w] = 256;
					}
					if (j == 0)
					{
					    pClip->Left[j][w] = 1;
					    pClip->Right[j++][w] = 0;
					}
				    }
				    else
				    {
					pClip->Left[j][w] = 0;
					pClip->Right[j++][w] = 256;
				    }
				}
				else
				{
				    pClip->Left [j][w] = Win1[0].Right;
				    pClip->Right[j++][w] = Win1[1].Left;
				}
				pClip->Count [w] = j;
			    }
			    else
			    {
				for (uint32 j = 0; j < Window1Enabled; j++)
				{
				    pClip->Left [j][w] = Win1[j].Left;
				    pClip->Right [j][w] = Win1[j].Right;
				}
				pClip->Count [w] = Window1Enabled;
			    }
			}
			else
			if (Window2Enabled)
			{
			    if (invert)
			    {
				int j = 0;
				if (Window2Enabled == 1)
				{
				    if (Win2[0].Left <= Win2[0].Right)
				    {
					if (Win2[0].Left > 0)
					{
					    pClip->Left[j][w] = 0;
					    pClip->Right[j++][w] = Win2[0].Left;
					}
					if (Win2[0].Right < 256)
					{
					    pClip->Left[j][w] = Win2[0].Right;
					    pClip->Right[j++][w] = 256;
					}
					if (j == 0)
					{
					    pClip->Left[j][w] = 1;
					    pClip->Right[j++][w] = 0;
					}
				    }
				    else
				    {
					pClip->Left[j][w] = 0;
					pClip->Right[j++][w] = 256;
				    }
				}
				else
				{
				    pClip->Left [j][w] = Win2[0].Right;
				    pClip->Right[j++][w] = Win2[1].Left + 1;
				}
				pClip->Count [w] = j;
			    }
			    else
			    {
				for (uint32 j = 0; j < Window2Enabled; j++)
				{
				    pClip->Left [j][w] = Win2[j].Left;
				    pClip->Right [j][w] = Win2[j].Right;
				}
				pClip->Count [w] = Window2Enabled;
			    }
			}
		    }

		    if (w != 5)
		    {
			if (pClip->Count [5])
			{
			    // Colour window enabled. Set the
			    // clip windows for all remaining backgrounds to be
			    // the same as the colour window.
			    if (pClip->Count [w] == 0)
			    {
				pClip->Count [w] = pClip->Count [5];
				for (uint32 i = 0; i < pClip->Count [w]; i++)
				{
				    pClip->Left [i][w] = pClip->Left [i][5];
				    pClip->Right [i][w] = pClip->Right [i][5];
				}
			    }
			    else
			    {
				// Intersect the colour window with the bg's
				// own clip window.
					for (uint32 i = 0; i < pClip->Count [w]; i++)
					{
						uint32 j;
						for (j = 0; j < pClip->Count [5]; j++)
						{
							if((pClip->Left[i][w] >= pClip->Left[j][5] && pClip->Left[i][w] < pClip->Right[j][5]) || (pClip->Left[j][5] >= pClip->Left[i][w] && pClip->Left[j][5] < pClip->Right[i][w])){
								// Found an intersection!
								pClip->Left[i][w]=MAX(pClip->Left[i][w], pClip->Left[j][5]);
								pClip->Right[i][w]=MIN(pClip->Right[i][w], pClip->Right[j][5]);
								goto Clip_ok;
							}
						}
						// no intersection, nullify it
						pClip->Left[i][w]=1;
						pClip->Right[i][w]=0;
Clip_ok:
						j=0; // dummy statement
					}
			    }
			}
		    }
		} // if (w == 5 | ...
	    } // if (!Settings.DisableGraphicWindows)
	} // for (int w...
    } // for (int c...
}
