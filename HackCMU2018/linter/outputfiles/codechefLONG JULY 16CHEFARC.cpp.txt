524
3, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 15, 17, 17, 17, 18, 18, 22, 24, 26, 26, 26, 26, 27, 27, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 32, 32, 32, 32, 34, 34, 34, 35, 36, 36, 42, 42, 42, 42, 43, 43, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 50, 50, 50, 51, 51, 52, 58, 58, 58, 58, 59, 59, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 63, 63, 63, 66, 66, 66, 67, 67, 68, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 84, 84, 84, 85, 85, 85, 85, 85, 86, 87, 88, 91, 92, 92, 92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 94, 95, 95, 96, 98, 98, 98, 98, 98, 99, 99, 99, 99, 100, 100, 101, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 105, 105, 106, 108, 108, 108, 108, 109, 109, 109, 109, 109, 110, 110, 111, 113, 114, 114, 114, 114, 114, 115, 115, 115, 115, 116, 116, 116, 116, 116, 117, 117, 118, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 123, 123, 124, 127, 127, 127, 127, 127, 128, 128, 128, 128, 129, 129, 130, 132, 132, 132, 132, 133, 133, 133, 133, 134, 134, 135, 156, 156, 156, 157, 157, 157, 157, 157, 158, 158, 158, 158, 158, 159, 159, 160, 160, 164, 164, 167, 168, 173, 174, 176, 177, 177, 178, 178, 179, 179, 180, 180, 180, 180, 181, 181, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 185, 186, 186, 186, 188, 188, 188, 189, 189, 193, 195, 197, 197, 197, 197, 198, 198, 200, 200, 200, 200, 200, 201, 201, 201, 201, 201, 202, 203, 203, 203, 203, 205, 205, 205, 206, 207, 207, 213, 213, 213, 213, 214, 214, 216, 216, 216, 216, 216, 217, 217, 217, 217, 217, 218, 218, 221, 221, 221, 222, 222, 223, 229, 229, 229, 229, 230, 230, 232, 232, 232, 232, 232, 233, 233, 233, 233, 233, 234, 234, 234, 237, 237, 237, 238, 238, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255, 255, 255, 256, 256, 256, 256, 256, 257, 258, 259, 262, 263, 263, 263, 263, 263, 264, 264, 264, 264, 265, 265, 265, 265, 266, 266, 267, 269, 269, 269, 269, 269, 270, 270, 270, 270, 271, 271, 272, 274, 274, 274, 274, 274, 275, 275, 275, 275, 275, 276, 276, 277, 279, 279, 279, 279, 280, 280, 280, 280, 280, 281, 281, 282, 284, 285, 285, 285, 285, 285, 286, 286, 286, 286, 287, 287, 287, 287, 287, 288, 288, 289, 292, 292, 292, 292, 292, 293, 293, 293, 293, 293, 294, 294, 295, 298, 298, 298, 298, 298, 299, 299, 299, 299, 300, 300, 301, 303, 303, 303, 303, 304, 304, 304, 304, 305, 305, 306, 327, 327, 327, 328, 328, 328, 328, 328, 329, 329, 329, 329, 329, 330, 330, 331, 331, 335, 335, 338, 339, 331
<<<<<<< HEAD
#include <bits/stdc++.h>
using namespace std;

long long grid[102][102];
long long bot1[102][102],bot2[102][102];
long long n,m;
long long t,k1,k2;
void fillSE(long long bot[][102],long long x,long long y,long long dist,long long k){
    long long row=k;

    for(long long i=x;i<=x+k;++i){
        for(long long j=y;j<=y+row;++j){

            if(i>n or j>m)
                continue;
            if(grid[i][j]==0){
                bot[i][j]=min(bot[i][j],dist+1);
            }
        }
        row--;

    }

}
void fillSW(long long bot[][102],long long x,long long y,long long dist,long long k){
    long long row=k;

    for(long long i=x;i<=x+k;++i){
        for(long long j=y;j>=y-row;--j){

            if(i>n or j<1)
                continue;
            if(grid[i][j]==0){

                bot[i][j]=min(bot[i][j],dist+1);
            }
        }
        row--;
    }
}
void fillNE(long long bot[][102],long long x,long long y,long long dist,long long k){
    long long row=k;

    for(long long i=x;i>=x-k;--i){
        for(long long j=y;j<=y+row;++j){
            if(i<1 or j>m)
                continue;

            if(grid[i][j]==0){
                bot[i][j]=min(bot[i][j],dist+1);

            }
        }
        row--;
    }
}
void fillNW(long long bot[][102],long long x,long long y,long long dist,long long k){
    long long row=k;

    for(long long i=x;i>=x-k;--i){
        for(long long j=y;j>=y-row;--j){
            if(i<1 or j<1)
                continue;

            if(grid[i][j]==0){
                bot[i][j]=min(bot[i][j],dist+1);

            }
        }
        row--;
    }
}
int main()
{

    scanf(" %lld",&t);
    //t=10;
    while(t--)
    {
        scanf(" %lld %lld %lld %lld",&n,&m,&k1,&k2);
        //n=m=100;
        //k1=k2=10;
        for(long long i=1;i<=n;++i)
            for(long long j=1;j<=m;++j){
                scanf(" %lld",&grid[i][j]);
                //grid[i][j]=0;
             bot1[i][j]=bot2[i][j]=INT_MAX;
            }

        bot1[1][1]=0;
        for(int x=0;x<5;++x){
        for(long long i=1;i<=n;++i)
            for(long long j=1;j<=m;++j)
                if(grid[i][j]==0)
                fillSE(bot1,i,j,bot1[i][j],k1);

        for(long long i=n;i>0;--i)
            for(long long j=1;j<=m;++j)
                if(grid[i][j]==0)
                fillNE(bot1,i,j,bot1[i][j],k1);

        for(long long i=n;i>0;--i)
            for(long long j=m;j>0;--j)
                if(grid[i][j]==0)
                fillNW(bot1,i,j,bot1[i][j],k1);

        for(long long i=1;i<=n;++i)
            for(long long j=m;j>0;--j)
                if(grid[i][j]==0)
                fillSW(bot1,i,j,bot1[i][j],k1);
        }
        bot2[1][m]=0;
        for(int x=0;x<5;++x){
        for(long long i=1;i<=n;++i)
            for(long long j=m;j>0;--j)
                if(grid[i][j]==0)
                fillSW(bot2,i,j,bot2[i][j],k2);


        for(long long i=n;i>0;--i)
            for(long long j=m;j>0;--j)
                if(grid[i][j]==0)
                fillNW(bot2,i,j,bot2[i][j],k2);


        for(long long i=n;i>0;--i)
            for(long long j=1;j<=m;++j)
                if(grid[i][j]==0)
                fillNE(bot2,i,j,bot2[i][j],k2);

        for(long long i=1;i<=n;++i)
            for(long long j=1;j<=m;++j)
                if(grid[i][j]==0)
                fillSE(bot2,i,j,bot2[i][j],k2);
        }
/*
        for(long long i=1;i<=n;++i){
            for(long long j=1;j<=m;++j)
                if(bot1[i][j]==INT_MAX)
                    cout<<"-";
                else
                    cout<<bot1[i][j];
                cout<<endl;
        }
        }
        for(long long i=1;i<=n;++i){
            for(long long j=1;j<=m;++j)
                if(bot2[i][j]==INT_MAX)
                    cout<<"-";
                else
                    cout<<bot2[i][j];
                cout<<endl;
        }
        */
        long long ans=INT_MAX,cell;
        for(long long i=1;i<=n;++i){
            for(long long j=1;j<=m;++j){
                cell=max(bot1[i][j],bot2[i][j]);
                ans=min(ans,cell);
            }
        }

        if(ans==INT_MAX)
            printf("-1\n");
        else
            printf("%lld\n",ans);

    }
	return 0;
}
=======
#include <bits/stdc++.h>
using namespace std;

long long grid[102][102];
long long bot1[102][102],bot2[102][102];
long long n,m;
long long t,k1,k2;
void fillSE(long long bot[][102],long long x,long long y,long long dist,long long k){
    long long row=k;

    for(long long i=x;i<=x+k;++i){
        for(long long j=y;j<=y+row;++j){

            if(i>n or j>m)
                continue;
            if(grid[i][j]==0){
                bot[i][j]=min(bot[i][j],dist+1);
            }
        }
        row--;

    }

}
void fillSW(long long bot[][102],long long x,long long y,long long dist,long long k){
    long long row=k;

    for(long long i=x;i<=x+k;++i){
        for(long long j=y;j>=y-row;--j){

            if(i>n or j<1)
                continue;
            if(grid[i][j]==0){

                bot[i][j]=min(bot[i][j],dist+1);
            }
        }
        row--;
    }
}
void fillNE(long long bot[][102],long long x,long long y,long long dist,long long k){
    long long row=k;

    for(long long i=x;i>=x-k;--i){
        for(long long j=y;j<=y+row;++j){
            if(i<1 or j>m)
                continue;

            if(grid[i][j]==0){
                bot[i][j]=min(bot[i][j],dist+1);

            }
        }
        row--;
    }
}
void fillNW(long long bot[][102],long long x,long long y,long long dist,long long k){
    long long row=k;

    for(long long i=x;i>=x-k;--i){
        for(long long j=y;j>=y-row;--j){
            if(i<1 or j<1)
                continue;

            if(grid[i][j]==0){
                bot[i][j]=min(bot[i][j],dist+1);

            }
        }
        row--;
    }
}
int main()
{

    scanf(" %lld",&t);
    //t=10;
    while(t--)
    {
        scanf(" %lld %lld %lld %lld",&n,&m,&k1,&k2);
        //n=m=100;
        //k1=k2=10;
        for(long long i=1;i<=n;++i)
            for(long long j=1;j<=m;++j){
                scanf(" %lld",&grid[i][j]);
                //grid[i][j]=0;
             bot1[i][j]=bot2[i][j]=INT_MAX;
            }

        bot1[1][1]=0;
        for(int x=0;x<5;++x){
        for(long long i=1;i<=n;++i)
            for(long long j=1;j<=m;++j)
                if(grid[i][j]==0)
                fillSE(bot1,i,j,bot1[i][j],k1);

        for(long long i=n;i>0;--i)
            for(long long j=1;j<=m;++j)
                if(grid[i][j]==0)
                fillNE(bot1,i,j,bot1[i][j],k1);

        for(long long i=n;i>0;--i)
            for(long long j=m;j>0;--j)
                if(grid[i][j]==0)
                fillNW(bot1,i,j,bot1[i][j],k1);

        for(long long i=1;i<=n;++i)
            for(long long j=m;j>0;--j)
                if(grid[i][j]==0)
                fillSW(bot1,i,j,bot1[i][j],k1);
        }
        bot2[1][m]=0;
        for(int x=0;x<5;++x){
        for(long long i=1;i<=n;++i)
            for(long long j=m;j>0;--j)
                if(grid[i][j]==0)
                fillSW(bot2,i,j,bot2[i][j],k2);


        for(long long i=n;i>0;--i)
            for(long long j=m;j>0;--j)
                if(grid[i][j]==0)
                fillNW(bot2,i,j,bot2[i][j],k2);


        for(long long i=n;i>0;--i)
            for(long long j=1;j<=m;++j)
                if(grid[i][j]==0)
                fillNE(bot2,i,j,bot2[i][j],k2);

        for(long long i=1;i<=n;++i)
            for(long long j=1;j<=m;++j)
                if(grid[i][j]==0)
                fillSE(bot2,i,j,bot2[i][j],k2);
        }
/*
        for(long long i=1;i<=n;++i){
            for(long long j=1;j<=m;++j)
                if(bot1[i][j]==INT_MAX)
                    cout<<"-";
                else
                    cout<<bot1[i][j];
                cout<<endl;
        }
        }
        for(long long i=1;i<=n;++i){
            for(long long j=1;j<=m;++j)
                if(bot2[i][j]==INT_MAX)
                    cout<<"-";
                else
                    cout<<bot2[i][j];
                cout<<endl;
        }
        */
        long long ans=INT_MAX,cell;
        for(long long i=1;i<=n;++i){
            for(long long j=1;j<=m;++j){
                cell=max(bot1[i][j],bot2[i][j]);
                ans=min(ans,cell);
            }
        }

        if(ans==INT_MAX)
            printf("-1\n");
        else
            printf("%lld\n",ans);

    }
	return 0;
}
>>>>>>> 1cef6792d706b1e8b7eab9954b86478c9c79e871
