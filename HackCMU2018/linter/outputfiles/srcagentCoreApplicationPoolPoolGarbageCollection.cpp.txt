133
37, 38, 43, 44, 45, 46, 47, 52, 53, 53, 54, 55, 56, 57, 58, 59, 60, 61, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 75, 76, 77, 78, 83, 84, 85, 86, 86, 87, 88, 89, 89, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 116, 117, 117, 117, 118, 119, 120, 121, 122, 123, 128, 128, 129, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 168, 170, 171, 173, 174, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 196, 200, 201
/*
 *  Phusion Passenger - https://www.phusionpassenger.com/
 *  Copyright (c) 2011-2017 Phusion Holding B.V.
 *
 *  "Passenger", "Phusion Passenger" and "Union Station" are registered
 *  trademarks of Phusion Holding B.V.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
#include <Core/ApplicationPool/Pool.h>

/*************************************************************************
 *
 * Garbage collection functions for ApplicationPool2::Pool
 *
 *************************************************************************/

namespace Passenger {
namespace ApplicationPool2 {

using namespace std;
using namespace boost;


void
Pool::initializeGarbageCollection() {
	interruptableThreads.create_thread(
		boost::bind(garbageCollect, shared_from_this()),
		"Pool garbage collector",
		POOL_HELPER_THREAD_STACK_SIZE
	);
}

void
Pool::garbageCollect(PoolPtr self) {
	TRACE_POINT();
	{
		ScopedLock lock(self->syncher);
		self->garbageCollectionCond.timed_wait(lock,
			posix_time::seconds(5));
	}
	while (!this_thread::interruption_requested()) {
		try {
			UPDATE_TRACE_POINT();
			unsigned long long sleepTime = self->realGarbageCollect();
			UPDATE_TRACE_POINT();
			ScopedLock lock(self->syncher);
			self->garbageCollectionCond.timed_wait(lock,
				posix_time::microseconds(sleepTime));
		} catch (const thread_interrupted &) {
			break;
		} catch (const tracable_exception &e) {
			P_WARN("ERROR: " << e.what() << "\n  Backtrace:\n" << e.backtrace());
		}
	}
}

void
Pool::maybeUpdateNextGcRuntime(GarbageCollectorState &state, unsigned long candidate) {
	if (state.nextGcRunTime == 0 || candidate < state.nextGcRunTime) {
		state.nextGcRunTime = candidate;
	}
}

void
Pool::checkWhetherProcessCanBeGarbageCollected(GarbageCollectorState &state,
	const GroupPtr &group, const ProcessPtr &process, ProcessList &output)
{
	assert(maxIdleTime > 0);
	unsigned long long processGcTime = process->lastUsed + maxIdleTime;
	if (process->sessions == 0
	 && state.now >= processGcTime)
	{
		if (output.capacity() == 0) {
			output.reserve(group->enabledCount);
		}
		output.push_back(process);
	} else {
		maybeUpdateNextGcRuntime(state, processGcTime);
	}
}

void
Pool::garbageCollectProcessesInGroup(GarbageCollectorState &state,
	const GroupPtr &group)
{
	ProcessList &processes = group->enabledProcesses;
	ProcessList processesToGc;
	ProcessList::iterator p_it, p_end = processes.end();

	for (p_it = processes.begin(); p_it != p_end; p_it++) {
		const ProcessPtr &process = *p_it;
		checkWhetherProcessCanBeGarbageCollected(state, group, process,
			processesToGc);
	}

	p_it  = processesToGc.begin();
	p_end = processesToGc.end();
	while (p_it != p_end
	 && (unsigned long) group->getProcessCount() > group->options.minProcesses)
	{
		ProcessPtr process = *p_it;
		P_DEBUG("Garbage collect idle process: " << process->inspect() <<
			", group=" << group->getName());
		group->detach(process, state.actions);
		p_it++;
	}
}

void
Pool::maybeCleanPreloader(GarbageCollectorState &state, const GroupPtr &group) {
	if (group->spawner->cleanable() && group->options.getMaxPreloaderIdleTime() != 0) {
		unsigned long long spawnerGcTime =
			group->spawner->lastUsed() +
			group->options.getMaxPreloaderIdleTime() * 1000000;
		if (state.now >= spawnerGcTime) {
			P_DEBUG("Garbage collect idle spawner: group=" << group->getName());
			group->cleanupSpawner(state.actions);
		} else {
			maybeUpdateNextGcRuntime(state, spawnerGcTime);
		}
	}
}

unsigned long long
Pool::realGarbageCollect() {
	TRACE_POINT();
	ScopedLock lock(syncher);
	GroupMap::ConstIterator g_it(groups);
	GarbageCollectorState state;
	state.now = SystemTime::getUsec();
	state.nextGcRunTime = 0;

	P_DEBUG("Garbage collection time...");
	verifyInvariants();

	// For all groups...
	while (*g_it != NULL) {
		const GroupPtr group = g_it.getValue();

		if (maxIdleTime > 0) {
			// ...detach processes that have been idle for more than maxIdleTime.
			garbageCollectProcessesInGroup(state, group);
		}

		group->verifyInvariants();

		// ...cleanup the spawner if it's been idle for more than preloaderIdleTime.
		maybeCleanPreloader(state, group);

		g_it.next();
	}

	verifyInvariants();
	lock.unlock();

	// Schedule next garbage collection run.
	unsigned long long sleepTime;
	if (state.nextGcRunTime == 0 || state.nextGcRunTime <= state.now) {
		if (maxIdleTime == 0) {
			sleepTime = 10 * 60 * 1000000;
		} else {
			sleepTime = maxIdleTime;
		}
	} else {
		sleepTime = state.nextGcRunTime - state.now;
	}
	P_DEBUG("Garbage collection done; next garbage collect in " <<
		std::fixed << std::setprecision(3) << (sleepTime / 1000000.0) << " sec");

	UPDATE_TRACE_POINT();
	runAllActions(state.actions);
	UPDATE_TRACE_POINT();
	state.actions.clear();
	return sleepTime;
}

void
Pool::wakeupGarbageCollector() {
	garbageCollectionCond.notify_all();
}


} // namespace ApplicationPool2
} // namespace Passenger
